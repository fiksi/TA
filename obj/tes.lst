
obj/tes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  00003c74  00003d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000046e  008001f2  008001f2  00003dfa  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00003dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001a5  00000000  00000000  00003eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c3e  00000000  00000000  0000405f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082b  00000000  00000000  00006c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001edf  00000000  00000000  000074c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  000093a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c6  00000000  00000000  000096b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000359f  00000000  00000000  00009d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  0000d31d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      48:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <__vector_18>
      4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

0000008c <__c.1988>:
      8c:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e4 e7       	ldi	r30, 0x74	; 116
      ac:	fc e3       	ldi	r31, 0x3C	; 60
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a2 3f       	cpi	r26, 0xF2	; 242
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	16 e0       	ldi	r17, 0x06	; 6
      c0:	a2 ef       	ldi	r26, 0xF2	; 242
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a0 36       	cpi	r26, 0x60	; 96
      ca:	b1 07       	cpc	r27, r17
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 6d 00 	call	0xda	; 0xda <main>
      d2:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <_exit>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <main>:
#include "ta_led.h"
#include "ta_uart.h"

int main (void){

    ta_led_LEDInit();
      da:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ta_led_LEDInit>
    ta_uart_Init();
      de:	0e 94 29 17 	call	0x2e52	; 0x2e52 <ta_uart_Init>

    ta_mmc_WriteTest();
      e2:	0e 94 77 00 	call	0xee	; 0xee <ta_mmc_WriteTest>

    sei(); // Enable all interrupt callback
      e6:	78 94       	sei

	while(1){
        ta_led_LEDTest();
      e8:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <ta_led_LEDTest>
      ec:	fd cf       	rjmp	.-6      	; 0xe8 <main+0xe>

000000ee <ta_mmc_WriteTest>:
FIL Fil;
UINT bw;

void ta_mmc_WriteTest(void){

    f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
      ee:	87 ef       	ldi	r24, 0xF7	; 247
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	71 e0       	ldi	r23, 0x01	; 1
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	0e 94 df 12 	call	0x25be	; 0x25be <f_mount>

    if (f_open(&Fil, "newfile.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
      fc:	88 e2       	ldi	r24, 0x28	; 40
      fe:	94 e0       	ldi	r25, 0x04	; 4
     100:	61 e0       	ldi	r22, 0x01	; 1
     102:	71 e0       	ldi	r23, 0x01	; 1
     104:	4a e0       	ldi	r20, 0x0A	; 10
     106:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <f_open>
     10a:	89 2b       	or	r24, r25
     10c:	71 f4       	brne	.+28     	; 0x12a <ta_mmc_WriteTest+0x3c>

        f_write(&Fil, "It works!\r\n", 11, &bw);	/* Write data to the file */
     10e:	88 e2       	ldi	r24, 0x28	; 40
     110:	94 e0       	ldi	r25, 0x04	; 4
     112:	6d e0       	ldi	r22, 0x0D	; 13
     114:	71 e0       	ldi	r23, 0x01	; 1
     116:	4b e0       	ldi	r20, 0x0B	; 11
     118:	50 e0       	ldi	r21, 0x00	; 0
     11a:	26 e2       	ldi	r18, 0x26	; 38
     11c:	34 e0       	ldi	r19, 0x04	; 4
     11e:	0e 94 f6 07 	call	0xfec	; 0xfec <f_write>

        f_close(&Fil);								/* Close the file */
     122:	88 e2       	ldi	r24, 0x28	; 40
     124:	94 e0       	ldi	r25, 0x04	; 4
     126:	0e 94 4c 0c 	call	0x1898	; 0x1898 <f_close>
     12a:	08 95       	ret

0000012c <ld_dword>:
	rv = rv << 8 | ptr[0];
	return rv;
}

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
     12c:	fc 01       	movw	r30, r24
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
     12e:	23 81       	ldd	r18, Z+3	; 0x03
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	54 2f       	mov	r21, r20
     138:	43 2f       	mov	r20, r19
     13a:	32 2f       	mov	r19, r18
     13c:	22 27       	eor	r18, r18
     13e:	82 81       	ldd	r24, Z+2	; 0x02
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	a0 e0       	ldi	r26, 0x00	; 0
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	28 2b       	or	r18, r24
     148:	39 2b       	or	r19, r25
     14a:	4a 2b       	or	r20, r26
     14c:	5b 2b       	or	r21, r27
	rv = rv << 8 | ptr[1];
     14e:	54 2f       	mov	r21, r20
     150:	43 2f       	mov	r20, r19
     152:	32 2f       	mov	r19, r18
     154:	22 27       	eor	r18, r18
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	28 2b       	or	r18, r24
     160:	39 2b       	or	r19, r25
     162:	4a 2b       	or	r20, r26
     164:	5b 2b       	or	r21, r27
	rv = rv << 8 | ptr[0];
     166:	54 2f       	mov	r21, r20
     168:	43 2f       	mov	r20, r19
     16a:	32 2f       	mov	r19, r18
     16c:	22 27       	eor	r18, r18
     16e:	80 81       	ld	r24, Z
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	28 2b       	or	r18, r24
     178:	39 2b       	or	r19, r25
     17a:	4a 2b       	or	r20, r26
     17c:	5b 2b       	or	r21, r27
	return rv;
}
     17e:	b9 01       	movw	r22, r18
     180:	ca 01       	movw	r24, r20
     182:	08 95       	ret

00000184 <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	9c 01       	movw	r18, r24
	*ptr++ = (BYTE)val; val >>= 8;
     18a:	fc 01       	movw	r30, r24
     18c:	41 93       	st	Z+, r20
     18e:	bb 27       	eor	r27, r27
     190:	a7 2f       	mov	r26, r23
     192:	96 2f       	mov	r25, r22
     194:	85 2f       	mov	r24, r21
	*ptr++ = (BYTE)val; val >>= 8;
     196:	e9 01       	movw	r28, r18
     198:	89 83       	std	Y+1, r24	; 0x01
     19a:	cb 01       	movw	r24, r22
     19c:	aa 27       	eor	r26, r26
     19e:	bb 27       	eor	r27, r27
	*ptr++ = (BYTE)val; val >>= 8;
     1a0:	81 83       	std	Z+1, r24	; 0x01
	*ptr++ = (BYTE)val;
     1a2:	47 2f       	mov	r20, r23
     1a4:	55 27       	eor	r21, r21
     1a6:	66 27       	eor	r22, r22
     1a8:	77 27       	eor	r23, r23
     1aa:	42 83       	std	Z+2, r20	; 0x02
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
     1b2:	ef 92       	push	r14
     1b4:	ff 92       	push	r15
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	fc 01       	movw	r30, r24
     1bc:	db 01       	movw	r26, r22
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     1be:	5b 96       	adiw	r26, 0x1b	; 27
     1c0:	9c 91       	ld	r25, X
     1c2:	5b 97       	sbiw	r26, 0x1b	; 27
     1c4:	80 e0       	ldi	r24, 0x00	; 0
	const BYTE* dir		/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
     1c6:	5a 96       	adiw	r26, 0x1a	; 26
     1c8:	2c 91       	ld	r18, X
     1ca:	5a 97       	sbiw	r26, 0x1a	; 26
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	82 2b       	or	r24, r18
     1d0:	93 2b       	or	r25, r19
     1d2:	7c 01       	movw	r14, r24
     1d4:	00 e0       	ldi	r16, 0x00	; 0
     1d6:	10 e0       	ldi	r17, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
     1d8:	80 81       	ld	r24, Z
     1da:	83 30       	cpi	r24, 0x03	; 3
     1dc:	91 f4       	brne	.+36     	; 0x202 <ld_clust+0x50>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     1de:	55 96       	adiw	r26, 0x15	; 21
     1e0:	9c 91       	ld	r25, X
     1e2:	55 97       	sbiw	r26, 0x15	; 21
     1e4:	80 e0       	ldi	r24, 0x00	; 0
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
     1e6:	54 96       	adiw	r26, 0x14	; 20
     1e8:	2c 91       	ld	r18, X
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	82 2b       	or	r24, r18
     1ee:	93 2b       	or	r25, r19
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	dc 01       	movw	r26, r24
     1f6:	99 27       	eor	r25, r25
     1f8:	88 27       	eor	r24, r24
     1fa:	e8 2a       	or	r14, r24
     1fc:	f9 2a       	or	r15, r25
     1fe:	0a 2b       	or	r16, r26
     200:	1b 2b       	or	r17, r27
	}

	return cl;
}
     202:	b7 01       	movw	r22, r14
     204:	c8 01       	movw	r24, r16
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	08 95       	ret

00000210 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	ac 01       	movw	r20, r24
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
     216:	dc 01       	movw	r26, r24
     218:	ed 91       	ld	r30, X+
     21a:	fc 91       	ld	r31, X
	if (!tp) return vol;	/* Invalid path name? */
     21c:	30 97       	sbiw	r30, 0x00	; 0
     21e:	e1 f1       	breq	.+120    	; 0x298 <get_ldnumber+0x88>
     220:	df 01       	movw	r26, r30
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
     222:	8d 91       	ld	r24, X+
     224:	81 32       	cpi	r24, 0x21	; 33
     226:	18 f0       	brcs	.+6      	; 0x22e <get_ldnumber+0x1e>
     228:	8a 33       	cpi	r24, 0x3A	; 58
     22a:	d9 f7       	brne	.-10     	; 0x222 <get_ldnumber+0x12>
     22c:	05 c0       	rjmp	.+10     	; 0x238 <get_ldnumber+0x28>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
     22e:	8a 33       	cpi	r24, 0x3A	; 58
     230:	19 f0       	breq	.+6      	; 0x238 <get_ldnumber+0x28>
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	32 c0       	rjmp	.+100    	; 0x29c <get_ldnumber+0x8c>
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
     238:	20 81       	ld	r18, Z
     23a:	82 2f       	mov	r24, r18
     23c:	80 53       	subi	r24, 0x30	; 48
     23e:	8a 30       	cpi	r24, 0x0A	; 10
     240:	70 f4       	brcc	.+28     	; 0x25e <get_ldnumber+0x4e>
     242:	cf 01       	movw	r24, r30
     244:	02 96       	adiw	r24, 0x02	; 2
     246:	a8 17       	cp	r26, r24
     248:	b9 07       	cpc	r27, r25
     24a:	49 f4       	brne	.+18     	; 0x25e <get_ldnumber+0x4e>
			i = (int)*tp - '0';	/* Get the LD number */
     24c:	82 2f       	mov	r24, r18
     24e:	99 27       	eor	r25, r25
     250:	87 fd       	sbrc	r24, 7
     252:	90 95       	com	r25
     254:	c0 97       	sbiw	r24, 0x30	; 48
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
     256:	18 16       	cp	r1, r24
     258:	19 06       	cpc	r1, r25
     25a:	cc f4       	brge	.+50     	; 0x28e <get_ldnumber+0x7e>
     25c:	1d c0       	rjmp	.+58     	; 0x298 <get_ldnumber+0x88>
		}
#if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
		else {
			i = 0;
			do {
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
     25e:	c9 e1       	ldi	r28, 0x19	; 25
     260:	d1 e0       	ldi	r29, 0x01	; 1
				do {	/* Compare the volume ID with path name */
					c = *sp++; tc = *tp++;
     262:	99 91       	ld	r25, Y+
     264:	21 91       	ld	r18, Z+
					if (IsLower(c)) c -= 0x20;
     266:	89 2f       	mov	r24, r25
     268:	81 56       	subi	r24, 0x61	; 97
     26a:	8a 31       	cpi	r24, 0x1A	; 26
     26c:	08 f4       	brcc	.+2      	; 0x270 <get_ldnumber+0x60>
     26e:	90 52       	subi	r25, 0x20	; 32
					if (IsLower(tc)) tc -= 0x20;
     270:	82 2f       	mov	r24, r18
     272:	81 56       	subi	r24, 0x61	; 97
     274:	8a 31       	cpi	r24, 0x1A	; 26
     276:	08 f4       	brcc	.+2      	; 0x27a <get_ldnumber+0x6a>
     278:	20 52       	subi	r18, 0x20	; 32
				} while (c && (TCHAR)c == tc);
     27a:	99 23       	and	r25, r25
     27c:	19 f0       	breq	.+6      	; 0x284 <get_ldnumber+0x74>
     27e:	92 17       	cp	r25, r18
     280:	81 f3       	breq	.-32     	; 0x262 <get_ldnumber+0x52>
     282:	0a c0       	rjmp	.+20     	; 0x298 <get_ldnumber+0x88>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
     284:	ea 17       	cp	r30, r26
     286:	fb 07       	cpc	r31, r27
     288:	39 f4       	brne	.+14     	; 0x298 <get_ldnumber+0x88>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
     28e:	fa 01       	movw	r30, r20
     290:	b1 83       	std	Z+1, r27	; 0x01
     292:	a0 83       	st	Z, r26
     294:	9c 01       	movw	r18, r24
     296:	02 c0       	rjmp	.+4      	; 0x29c <get_ldnumber+0x8c>
     298:	2f ef       	ldi	r18, 0xFF	; 255
     29a:	3f ef       	ldi	r19, 0xFF	; 255
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
     29c:	c9 01       	movw	r24, r18
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	ec 01       	movw	r28, r24
     2ae:	8b 01       	movw	r16, r22
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
     2b0:	00 97       	sbiw	r24, 0x00	; 0
     2b2:	99 f0       	breq	.+38     	; 0x2da <validate+0x36>
     2b4:	e8 81       	ld	r30, Y
     2b6:	f9 81       	ldd	r31, Y+1	; 0x01
     2b8:	30 97       	sbiw	r30, 0x00	; 0
     2ba:	79 f0       	breq	.+30     	; 0x2da <validate+0x36>
     2bc:	80 81       	ld	r24, Z
     2be:	88 23       	and	r24, r24
     2c0:	61 f0       	breq	.+24     	; 0x2da <validate+0x36>
     2c2:	2a 81       	ldd	r18, Y+2	; 0x02
     2c4:	3b 81       	ldd	r19, Y+3	; 0x03
     2c6:	85 81       	ldd	r24, Z+5	; 0x05
     2c8:	96 81       	ldd	r25, Z+6	; 0x06
     2ca:	28 17       	cp	r18, r24
     2cc:	39 07       	cpc	r19, r25
     2ce:	29 f4       	brne	.+10     	; 0x2da <validate+0x36>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
     2d0:	81 81       	ldd	r24, Z+1	; 0x01
     2d2:	0e 94 ba 14 	call	0x2974	; 0x2974 <disk_status>
     2d6:	80 ff       	sbrs	r24, 0
     2d8:	0d c0       	rjmp	.+26     	; 0x2f4 <validate+0x50>
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	29 e0       	ldi	r18, 0x09	; 9
     2e0:	30 e0       	ldi	r19, 0x00	; 0
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     2e2:	f8 01       	movw	r30, r16
     2e4:	91 83       	std	Z+1, r25	; 0x01
     2e6:	80 83       	st	Z, r24
	return res;
}
     2e8:	c9 01       	movw	r24, r18
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	08 95       	ret
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     2f4:	88 81       	ld	r24, Y
     2f6:	99 81       	ldd	r25, Y+1	; 0x01
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	f2 cf       	rjmp	.-28     	; 0x2e2 <validate+0x3e>

000002fe <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
     2fe:	a0 e0       	ldi	r26, 0x00	; 0
     300:	b0 e0       	ldi	r27, 0x00	; 0
     302:	e5 e8       	ldi	r30, 0x85	; 133
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0xc>
     30a:	ec 01       	movw	r28, r24
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Is the disk access window dirty */
     30c:	8b 81       	ldd	r24, Y+3	; 0x03
     30e:	88 23       	and	r24, r24
     310:	c9 f1       	breq	.+114    	; 0x384 <sync_window+0x86>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
     312:	3f e2       	ldi	r19, 0x2F	; 47
     314:	c3 2e       	mov	r12, r19
     316:	d1 2c       	mov	r13, r1
     318:	cc 0e       	add	r12, r28
     31a:	dd 1e       	adc	r13, r29
     31c:	2b a5       	ldd	r18, Y+43	; 0x2b
     31e:	3c a5       	ldd	r19, Y+44	; 0x2c
     320:	4d a5       	ldd	r20, Y+45	; 0x2d
     322:	5e a5       	ldd	r21, Y+46	; 0x2e
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	b6 01       	movw	r22, r12
     328:	01 e0       	ldi	r16, 0x01	; 1
     32a:	10 e0       	ldi	r17, 0x00	; 0
     32c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <disk_write>
     330:	89 2b       	or	r24, r25
     332:	19 f0       	breq	.+6      	; 0x33a <sync_window+0x3c>
     334:	21 e0       	ldi	r18, 0x01	; 1
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	27 c0       	rjmp	.+78     	; 0x388 <sync_window+0x8a>
			fs->wflag = 0;	/* Clear window dirty flag */
     33a:	1b 82       	std	Y+3, r1	; 0x03
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
     33c:	eb a4       	ldd	r14, Y+43	; 0x2b
     33e:	fc a4       	ldd	r15, Y+44	; 0x2c
     340:	0d a5       	ldd	r16, Y+45	; 0x2d
     342:	1e a5       	ldd	r17, Y+46	; 0x2e
     344:	2f 89       	ldd	r18, Y+23	; 0x17
     346:	38 8d       	ldd	r19, Y+24	; 0x18
     348:	49 8d       	ldd	r20, Y+25	; 0x19
     34a:	5a 8d       	ldd	r21, Y+26	; 0x1a
     34c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     34e:	98 a1       	ldd	r25, Y+32	; 0x20
     350:	a9 a1       	ldd	r26, Y+33	; 0x21
     352:	ba a1       	ldd	r27, Y+34	; 0x22
     354:	47 01       	movw	r8, r14
     356:	58 01       	movw	r10, r16
     358:	88 1a       	sub	r8, r24
     35a:	99 0a       	sbc	r9, r25
     35c:	aa 0a       	sbc	r10, r26
     35e:	bb 0a       	sbc	r11, r27
     360:	82 16       	cp	r8, r18
     362:	93 06       	cpc	r9, r19
     364:	a4 06       	cpc	r10, r20
     366:	b5 06       	cpc	r11, r21
     368:	68 f4       	brcc	.+26     	; 0x384 <sync_window+0x86>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
     36a:	8a 81       	ldd	r24, Y+2	; 0x02
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	51 f4       	brne	.+20     	; 0x384 <sync_window+0x86>
     370:	2e 0d       	add	r18, r14
     372:	3f 1d       	adc	r19, r15
     374:	40 1f       	adc	r20, r16
     376:	51 1f       	adc	r21, r17
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	b6 01       	movw	r22, r12
     37c:	01 e0       	ldi	r16, 0x01	; 1
     37e:	10 e0       	ldi	r17, 0x00	; 0
     380:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <disk_write>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
		} else {
			res = FR_DISK_ERR;
		}
	}
	return res;
}
     388:	c9 01       	movw	r24, r18
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	ec e0       	ldi	r30, 0x0C	; 12
     390:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0xc>

00000394 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b0 e0       	ldi	r27, 0x00	; 0
     398:	e0 ed       	ldi	r30, 0xD0	; 208
     39a:	f1 e0       	ldi	r31, 0x01	; 1
     39c:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x10>
     3a0:	5c 01       	movw	r10, r24
     3a2:	6a 01       	movw	r12, r20
     3a4:	7b 01       	movw	r14, r22
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
     3a6:	fc 01       	movw	r30, r24
     3a8:	83 a5       	ldd	r24, Z+43	; 0x2b
     3aa:	94 a5       	ldd	r25, Z+44	; 0x2c
     3ac:	a5 a5       	ldd	r26, Z+45	; 0x2d
     3ae:	b6 a5       	ldd	r27, Z+46	; 0x2e
     3b0:	48 17       	cp	r20, r24
     3b2:	59 07       	cpc	r21, r25
     3b4:	6a 07       	cpc	r22, r26
     3b6:	7b 07       	cpc	r23, r27
     3b8:	19 f4       	brne	.+6      	; 0x3c0 <move_window+0x2c>
     3ba:	c0 e0       	ldi	r28, 0x00	; 0
     3bc:	d0 e0       	ldi	r29, 0x00	; 0
     3be:	1e c0       	rjmp	.+60     	; 0x3fc <move_window+0x68>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
     3c0:	c5 01       	movw	r24, r10
     3c2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <sync_window>
     3c6:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	c1 f4       	brne	.+48     	; 0x3fc <move_window+0x68>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
     3cc:	b5 01       	movw	r22, r10
     3ce:	61 5d       	subi	r22, 0xD1	; 209
     3d0:	7f 4f       	sbci	r23, 0xFF	; 255
     3d2:	f5 01       	movw	r30, r10
     3d4:	81 81       	ldd	r24, Z+1	; 0x01
     3d6:	a7 01       	movw	r20, r14
     3d8:	96 01       	movw	r18, r12
     3da:	01 e0       	ldi	r16, 0x01	; 1
     3dc:	10 e0       	ldi	r17, 0x00	; 0
     3de:	0e 94 76 15 	call	0x2aec	; 0x2aec <disk_read>
     3e2:	89 2b       	or	r24, r25
     3e4:	31 f0       	breq	.+12     	; 0x3f2 <move_window+0x5e>
     3e6:	cc 24       	eor	r12, r12
     3e8:	ca 94       	dec	r12
     3ea:	dc 2c       	mov	r13, r12
     3ec:	76 01       	movw	r14, r12
     3ee:	c1 e0       	ldi	r28, 0x01	; 1
     3f0:	d0 e0       	ldi	r29, 0x00	; 0
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
     3f2:	f5 01       	movw	r30, r10
     3f4:	c3 a6       	std	Z+43, r12	; 0x2b
     3f6:	d4 a6       	std	Z+44, r13	; 0x2c
     3f8:	e5 a6       	std	Z+45, r14	; 0x2d
     3fa:	f6 a6       	std	Z+46, r15	; 0x2e
		}
	}
	return res;
}
     3fc:	ce 01       	movw	r24, r28
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	ea e0       	ldi	r30, 0x0A	; 10
     404:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x10>

00000408 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	ea e0       	ldi	r30, 0x0A	; 10
     40e:	f2 e0       	ldi	r31, 0x02	; 2
     410:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <__prologue_saves__+0x12>
     414:	fc 01       	movw	r30, r24
     416:	7a 01       	movw	r14, r20
     418:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
     41a:	c0 81       	ld	r28, Z
     41c:	d1 81       	ldd	r29, Z+1	; 0x01


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
     41e:	42 30       	cpi	r20, 0x02	; 2
     420:	51 05       	cpc	r21, r1
     422:	61 05       	cpc	r22, r1
     424:	71 05       	cpc	r23, r1
     426:	08 f4       	brcc	.+2      	; 0x42a <get_fat+0x22>
     428:	b3 c0       	rjmp	.+358    	; 0x590 <get_fat+0x188>
     42a:	8b 89       	ldd	r24, Y+19	; 0x13
     42c:	9c 89       	ldd	r25, Y+20	; 0x14
     42e:	ad 89       	ldd	r26, Y+21	; 0x15
     430:	be 89       	ldd	r27, Y+22	; 0x16
     432:	48 17       	cp	r20, r24
     434:	59 07       	cpc	r21, r25
     436:	6a 07       	cpc	r22, r26
     438:	7b 07       	cpc	r23, r27
     43a:	08 f0       	brcs	.+2      	; 0x43e <get_fat+0x36>
     43c:	a9 c0       	rjmp	.+338    	; 0x590 <get_fat+0x188>
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
     43e:	88 81       	ld	r24, Y
     440:	82 30       	cpi	r24, 0x02	; 2
     442:	09 f4       	brne	.+2      	; 0x446 <get_fat+0x3e>
     444:	5a c0       	rjmp	.+180    	; 0x4fa <get_fat+0xf2>
     446:	83 30       	cpi	r24, 0x03	; 3
     448:	09 f4       	brne	.+2      	; 0x44c <get_fat+0x44>
     44a:	7c c0       	rjmp	.+248    	; 0x544 <get_fat+0x13c>
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	09 f0       	breq	.+2      	; 0x452 <get_fat+0x4a>
     450:	9f c0       	rjmp	.+318    	; 0x590 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
     452:	6a 01       	movw	r12, r20
     454:	d6 94       	lsr	r13
     456:	c7 94       	ror	r12
     458:	c4 0e       	add	r12, r20
     45a:	d5 1e       	adc	r13, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     45c:	a6 01       	movw	r20, r12
     45e:	45 2f       	mov	r20, r21
     460:	55 27       	eor	r21, r21
     462:	46 95       	lsr	r20
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	8f 8d       	ldd	r24, Y+31	; 0x1f
     46a:	98 a1       	ldd	r25, Y+32	; 0x20
     46c:	a9 a1       	ldd	r26, Y+33	; 0x21
     46e:	ba a1       	ldd	r27, Y+34	; 0x22
     470:	48 0f       	add	r20, r24
     472:	59 1f       	adc	r21, r25
     474:	6a 1f       	adc	r22, r26
     476:	7b 1f       	adc	r23, r27
     478:	ce 01       	movw	r24, r28
     47a:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
     47e:	89 2b       	or	r24, r25
     480:	09 f0       	breq	.+2      	; 0x484 <get_fat+0x7c>
     482:	8b c0       	rjmp	.+278    	; 0x59a <get_fat+0x192>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
     484:	f6 01       	movw	r30, r12
     486:	f1 70       	andi	r31, 0x01	; 1
     488:	ec 0f       	add	r30, r28
     48a:	fd 1f       	adc	r31, r29
     48c:	b7 a4       	ldd	r11, Z+47	; 0x2f
     48e:	08 94       	sec
     490:	c1 1c       	adc	r12, r1
     492:	d1 1c       	adc	r13, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     494:	a6 01       	movw	r20, r12
     496:	45 2f       	mov	r20, r21
     498:	55 27       	eor	r21, r21
     49a:	46 95       	lsr	r20
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4a2:	98 a1       	ldd	r25, Y+32	; 0x20
     4a4:	a9 a1       	ldd	r26, Y+33	; 0x21
     4a6:	ba a1       	ldd	r27, Y+34	; 0x22
     4a8:	48 0f       	add	r20, r24
     4aa:	59 1f       	adc	r21, r25
     4ac:	6a 1f       	adc	r22, r26
     4ae:	7b 1f       	adc	r23, r27
     4b0:	ce 01       	movw	r24, r28
     4b2:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
     4b6:	89 2b       	or	r24, r25
     4b8:	09 f0       	breq	.+2      	; 0x4bc <get_fat+0xb4>
     4ba:	6f c0       	rjmp	.+222    	; 0x59a <get_fat+0x192>

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
     4bc:	6b 2d       	mov	r22, r11
     4be:	70 e0       	ldi	r23, 0x00	; 0
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	c8 22       	and	r12, r24
     4c6:	d9 22       	and	r13, r25
     4c8:	cc 0d       	add	r28, r12
     4ca:	dd 1d       	adc	r29, r13
     4cc:	9f a5       	ldd	r25, Y+47	; 0x2f
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	68 2b       	or	r22, r24
     4d2:	79 2b       	or	r23, r25
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
     4d4:	c7 01       	movw	r24, r14
     4d6:	81 70       	andi	r24, 0x01	; 1
     4d8:	90 70       	andi	r25, 0x00	; 0
     4da:	89 2b       	or	r24, r25
     4dc:	39 f0       	breq	.+14     	; 0x4ec <get_fat+0xe4>
     4de:	b4 e0       	ldi	r27, 0x04	; 4
     4e0:	76 95       	lsr	r23
     4e2:	67 95       	ror	r22
     4e4:	ba 95       	dec	r27
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <get_fat+0xd8>
     4e8:	9b 01       	movw	r18, r22
     4ea:	29 c0       	rjmp	.+82     	; 0x53e <get_fat+0x136>
     4ec:	9b 01       	movw	r18, r22
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	3f 70       	andi	r19, 0x0F	; 15
     4f4:	40 70       	andi	r20, 0x00	; 0
     4f6:	50 70       	andi	r21, 0x00	; 0
     4f8:	54 c0       	rjmp	.+168    	; 0x5a2 <get_fat+0x19a>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
     4fa:	45 2f       	mov	r20, r21
     4fc:	56 2f       	mov	r21, r22
     4fe:	67 2f       	mov	r22, r23
     500:	77 27       	eor	r23, r23
     502:	8f 8d       	ldd	r24, Y+31	; 0x1f
     504:	98 a1       	ldd	r25, Y+32	; 0x20
     506:	a9 a1       	ldd	r26, Y+33	; 0x21
     508:	ba a1       	ldd	r27, Y+34	; 0x22
     50a:	48 0f       	add	r20, r24
     50c:	59 1f       	adc	r21, r25
     50e:	6a 1f       	adc	r22, r26
     510:	7b 1f       	adc	r23, r27
     512:	ce 01       	movw	r24, r28
     514:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
     518:	89 2b       	or	r24, r25
     51a:	09 f0       	breq	.+2      	; 0x51e <get_fat+0x116>
     51c:	3e c0       	rjmp	.+124    	; 0x59a <get_fat+0x192>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
     51e:	ee 0c       	add	r14, r14
     520:	ff 1c       	adc	r15, r15
     522:	00 1f       	adc	r16, r16
     524:	11 1f       	adc	r17, r17
     526:	c7 01       	movw	r24, r14
     528:	91 70       	andi	r25, 0x01	; 1
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     52a:	fe 01       	movw	r30, r28
     52c:	e8 0f       	add	r30, r24
     52e:	f9 1f       	adc	r31, r25
     530:	30 a9       	ldd	r19, Z+48	; 0x30
     532:	20 e0       	ldi	r18, 0x00	; 0
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
     534:	87 a5       	ldd	r24, Z+47	; 0x2f
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	82 2b       	or	r24, r18
     53a:	93 2b       	or	r25, r19
     53c:	9c 01       	movw	r18, r24
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	2f c0       	rjmp	.+94     	; 0x5a2 <get_fat+0x19a>
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
     544:	e7 e0       	ldi	r30, 0x07	; 7
     546:	76 95       	lsr	r23
     548:	67 95       	ror	r22
     54a:	57 95       	ror	r21
     54c:	47 95       	ror	r20
     54e:	ea 95       	dec	r30
     550:	d1 f7       	brne	.-12     	; 0x546 <get_fat+0x13e>
     552:	8f 8d       	ldd	r24, Y+31	; 0x1f
     554:	98 a1       	ldd	r25, Y+32	; 0x20
     556:	a9 a1       	ldd	r26, Y+33	; 0x21
     558:	ba a1       	ldd	r27, Y+34	; 0x22
     55a:	48 0f       	add	r20, r24
     55c:	59 1f       	adc	r21, r25
     55e:	6a 1f       	adc	r22, r26
     560:	7b 1f       	adc	r23, r27
     562:	ce 01       	movw	r24, r28
     564:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
     568:	89 2b       	or	r24, r25
     56a:	b9 f4       	brne	.+46     	; 0x59a <get_fat+0x192>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
     56c:	42 e0       	ldi	r20, 0x02	; 2
     56e:	ee 0c       	add	r14, r14
     570:	ff 1c       	adc	r15, r15
     572:	00 1f       	adc	r16, r16
     574:	11 1f       	adc	r17, r17
     576:	4a 95       	dec	r20
     578:	d1 f7       	brne	.-12     	; 0x56e <get_fat+0x166>
     57a:	c7 01       	movw	r24, r14
     57c:	91 70       	andi	r25, 0x01	; 1
     57e:	8f 96       	adiw	r24, 0x2f	; 47
     580:	8c 0f       	add	r24, r28
     582:	9d 1f       	adc	r25, r29
     584:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
     588:	9b 01       	movw	r18, r22
     58a:	ac 01       	movw	r20, r24
     58c:	5f 70       	andi	r21, 0x0F	; 15
     58e:	09 c0       	rjmp	.+18     	; 0x5a2 <get_fat+0x19a>
			break;
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	04 c0       	rjmp	.+8      	; 0x5a2 <get_fat+0x19a>
     59a:	2f ef       	ldi	r18, 0xFF	; 255
     59c:	3f ef       	ldi	r19, 0xFF	; 255
     59e:	4f ef       	ldi	r20, 0xFF	; 255
     5a0:	5f ef       	ldi	r21, 0xFF	; 255
			val = 1;	/* Internal error */
		}
	}

	return val;
}
     5a2:	b9 01       	movw	r22, r18
     5a4:	ca 01       	movw	r24, r20
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	e9 e0       	ldi	r30, 0x09	; 9
     5ac:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__epilogue_restores__+0x12>

000005b0 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
     5b0:	a0 e0       	ldi	r26, 0x00	; 0
     5b2:	b0 e0       	ldi	r27, 0x00	; 0
     5b4:	ee ed       	ldi	r30, 0xDE	; 222
     5b6:	f2 e0       	ldi	r31, 0x02	; 2
     5b8:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
     5bc:	2c 01       	movw	r4, r24
     5be:	3a 01       	movw	r6, r20
     5c0:	4b 01       	movw	r8, r22
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
     5c2:	fc 01       	movw	r30, r24
     5c4:	c0 81       	ld	r28, Z
     5c6:	d1 81       	ldd	r29, Z+1	; 0x01


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
     5c8:	40 30       	cpi	r20, 0x00	; 0
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	5f 07       	cpc	r21, r31
     5ce:	f0 e2       	ldi	r31, 0x20	; 32
     5d0:	6f 07       	cpc	r22, r31
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	7f 07       	cpc	r23, r31
     5d6:	08 f0       	brcs	.+2      	; 0x5da <dir_sdi+0x2a>
     5d8:	da c0       	rjmp	.+436    	; 0x78e <dir_sdi+0x1de>
     5da:	db 01       	movw	r26, r22
     5dc:	ca 01       	movw	r24, r20
     5de:	8f 71       	andi	r24, 0x1F	; 31
     5e0:	90 70       	andi	r25, 0x00	; 0
     5e2:	a0 70       	andi	r26, 0x00	; 0
     5e4:	b0 70       	andi	r27, 0x00	; 0
     5e6:	00 97       	sbiw	r24, 0x00	; 0
     5e8:	a1 05       	cpc	r26, r1
     5ea:	b1 05       	cpc	r27, r1
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <dir_sdi+0x40>
     5ee:	cf c0       	rjmp	.+414    	; 0x78e <dir_sdi+0x1de>
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
     5f0:	f2 01       	movw	r30, r4
     5f2:	46 87       	std	Z+14, r20	; 0x0e
     5f4:	57 87       	std	Z+15, r21	; 0x0f
     5f6:	60 8b       	std	Z+16, r22	; 0x10
     5f8:	71 8b       	std	Z+17, r23	; 0x11
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
     5fa:	e6 80       	ldd	r14, Z+6	; 0x06
     5fc:	f7 80       	ldd	r15, Z+7	; 0x07
     5fe:	00 85       	ldd	r16, Z+8	; 0x08
     600:	11 85       	ldd	r17, Z+9	; 0x09
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
     602:	e1 14       	cp	r14, r1
     604:	f1 04       	cpc	r15, r1
     606:	01 05       	cpc	r16, r1
     608:	11 05       	cpc	r17, r1
     60a:	51 f5       	brne	.+84     	; 0x660 <dir_sdi+0xb0>
     60c:	88 81       	ld	r24, Y
     60e:	83 30       	cpi	r24, 0x03	; 3
     610:	40 f0       	brcs	.+16     	; 0x622 <dir_sdi+0x72>
		clst = fs->dirbase;
     612:	8b a1       	ldd	r24, Y+35	; 0x23
     614:	9c a1       	ldd	r25, Y+36	; 0x24
     616:	ad a1       	ldd	r26, Y+37	; 0x25
     618:	be a1       	ldd	r27, Y+38	; 0x26
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	a1 05       	cpc	r26, r1
     61e:	b1 05       	cpc	r27, r1
     620:	e9 f4       	brne	.+58     	; 0x65c <dir_sdi+0xac>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
     622:	a4 01       	movw	r20, r8
     624:	93 01       	movw	r18, r6
     626:	f5 e0       	ldi	r31, 0x05	; 5
     628:	56 95       	lsr	r21
     62a:	47 95       	ror	r20
     62c:	37 95       	ror	r19
     62e:	27 95       	ror	r18
     630:	fa 95       	dec	r31
     632:	d1 f7       	brne	.-12     	; 0x628 <dir_sdi+0x78>
     634:	8f 81       	ldd	r24, Y+7	; 0x07
     636:	98 85       	ldd	r25, Y+8	; 0x08
     638:	a0 e0       	ldi	r26, 0x00	; 0
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	28 17       	cp	r18, r24
     63e:	39 07       	cpc	r19, r25
     640:	4a 07       	cpc	r20, r26
     642:	5b 07       	cpc	r21, r27
     644:	08 f0       	brcs	.+2      	; 0x648 <dir_sdi+0x98>
     646:	a3 c0       	rjmp	.+326    	; 0x78e <dir_sdi+0x1de>
		dp->sect = fs->dirbase;
     648:	8b a1       	ldd	r24, Y+35	; 0x23
     64a:	9c a1       	ldd	r25, Y+36	; 0x24
     64c:	ad a1       	ldd	r26, Y+37	; 0x25
     64e:	be a1       	ldd	r27, Y+38	; 0x26
     650:	f2 01       	movw	r30, r4
     652:	86 8b       	std	Z+22, r24	; 0x16
     654:	97 8b       	std	Z+23, r25	; 0x17
     656:	a0 8f       	std	Z+24, r26	; 0x18
     658:	b1 8f       	std	Z+25, r27	; 0x19
     65a:	70 c0       	rjmp	.+224    	; 0x73c <dir_sdi+0x18c>
     65c:	7c 01       	movw	r14, r24
     65e:	8d 01       	movw	r16, r26

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
     660:	89 85       	ldd	r24, Y+9	; 0x09
     662:	9a 85       	ldd	r25, Y+10	; 0x0a
     664:	5c 01       	movw	r10, r24
     666:	cc 24       	eor	r12, r12
     668:	dd 24       	eor	r13, r13
     66a:	e9 e0       	ldi	r30, 0x09	; 9
     66c:	aa 0c       	add	r10, r10
     66e:	bb 1c       	adc	r11, r11
     670:	cc 1c       	adc	r12, r12
     672:	dd 1c       	adc	r13, r13
     674:	ea 95       	dec	r30
     676:	d1 f7       	brne	.-12     	; 0x66c <dir_sdi+0xbc>
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
     678:	12 01       	movw	r2, r4
     67a:	27 c0       	rjmp	.+78     	; 0x6ca <dir_sdi+0x11a>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
     67c:	c1 01       	movw	r24, r2
     67e:	b8 01       	movw	r22, r16
     680:	a7 01       	movw	r20, r14
     682:	0e 94 04 02 	call	0x408	; 0x408 <get_fat>
     686:	7b 01       	movw	r14, r22
     688:	8c 01       	movw	r16, r24
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     68a:	6f 3f       	cpi	r22, 0xFF	; 255
     68c:	ff ef       	ldi	r31, 0xFF	; 255
     68e:	7f 07       	cpc	r23, r31
     690:	ff ef       	ldi	r31, 0xFF	; 255
     692:	8f 07       	cpc	r24, r31
     694:	ff ef       	ldi	r31, 0xFF	; 255
     696:	9f 07       	cpc	r25, r31
     698:	19 f4       	brne	.+6      	; 0x6a0 <dir_sdi+0xf0>
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	79 c0       	rjmp	.+242    	; 0x792 <dir_sdi+0x1e2>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
     6a0:	82 e0       	ldi	r24, 0x02	; 2
     6a2:	e8 16       	cp	r14, r24
     6a4:	f1 04       	cpc	r15, r1
     6a6:	01 05       	cpc	r16, r1
     6a8:	11 05       	cpc	r17, r1
     6aa:	08 f4       	brcc	.+2      	; 0x6ae <dir_sdi+0xfe>
     6ac:	70 c0       	rjmp	.+224    	; 0x78e <dir_sdi+0x1de>
     6ae:	8b 89       	ldd	r24, Y+19	; 0x13
     6b0:	9c 89       	ldd	r25, Y+20	; 0x14
     6b2:	ad 89       	ldd	r26, Y+21	; 0x15
     6b4:	be 89       	ldd	r27, Y+22	; 0x16
     6b6:	e8 16       	cp	r14, r24
     6b8:	f9 06       	cpc	r15, r25
     6ba:	0a 07       	cpc	r16, r26
     6bc:	1b 07       	cpc	r17, r27
     6be:	08 f0       	brcs	.+2      	; 0x6c2 <dir_sdi+0x112>
     6c0:	66 c0       	rjmp	.+204    	; 0x78e <dir_sdi+0x1de>
			ofs -= csz;
     6c2:	6a 18       	sub	r6, r10
     6c4:	7b 08       	sbc	r7, r11
     6c6:	8c 08       	sbc	r8, r12
     6c8:	9d 08       	sbc	r9, r13
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
     6ca:	6a 14       	cp	r6, r10
     6cc:	7b 04       	cpc	r7, r11
     6ce:	8c 04       	cpc	r8, r12
     6d0:	9d 04       	cpc	r9, r13
     6d2:	a0 f6       	brcc	.-88     	; 0x67c <dir_sdi+0xcc>
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
     6d4:	7e ef       	ldi	r23, 0xFE	; 254
     6d6:	a7 2e       	mov	r10, r23
     6d8:	7f ef       	ldi	r23, 0xFF	; 255
     6da:	b7 2e       	mov	r11, r23
     6dc:	7f ef       	ldi	r23, 0xFF	; 255
     6de:	c7 2e       	mov	r12, r23
     6e0:	7f ef       	ldi	r23, 0xFF	; 255
     6e2:	d7 2e       	mov	r13, r23
     6e4:	ae 0c       	add	r10, r14
     6e6:	bf 1c       	adc	r11, r15
     6e8:	c0 1e       	adc	r12, r16
     6ea:	d1 1e       	adc	r13, r17
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
     6ec:	8b 89       	ldd	r24, Y+19	; 0x13
     6ee:	9c 89       	ldd	r25, Y+20	; 0x14
     6f0:	ad 89       	ldd	r26, Y+21	; 0x15
     6f2:	be 89       	ldd	r27, Y+22	; 0x16
     6f4:	02 97       	sbiw	r24, 0x02	; 2
     6f6:	a1 09       	sbc	r26, r1
     6f8:	b1 09       	sbc	r27, r1
     6fa:	a8 16       	cp	r10, r24
     6fc:	b9 06       	cpc	r11, r25
     6fe:	ca 06       	cpc	r12, r26
     700:	db 06       	cpc	r13, r27
     702:	28 f0       	brcs	.+10     	; 0x70e <dir_sdi+0x15e>
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	12 c0       	rjmp	.+36     	; 0x732 <dir_sdi+0x182>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
     70e:	29 85       	ldd	r18, Y+9	; 0x09
     710:	3a 85       	ldd	r19, Y+10	; 0x0a
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	c6 01       	movw	r24, r12
     718:	b5 01       	movw	r22, r10
     71a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__mulsi3>
     71e:	9b 01       	movw	r18, r22
     720:	ac 01       	movw	r20, r24
     722:	8f a1       	ldd	r24, Y+39	; 0x27
     724:	98 a5       	ldd	r25, Y+40	; 0x28
     726:	a9 a5       	ldd	r26, Y+41	; 0x29
     728:	ba a5       	ldd	r27, Y+42	; 0x2a
     72a:	28 0f       	add	r18, r24
     72c:	39 1f       	adc	r19, r25
     72e:	4a 1f       	adc	r20, r26
     730:	5b 1f       	adc	r21, r27
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clst2sect(fs, clst);
     732:	f2 01       	movw	r30, r4
     734:	26 8b       	std	Z+22, r18	; 0x16
     736:	37 8b       	std	Z+23, r19	; 0x17
     738:	40 8f       	std	Z+24, r20	; 0x18
     73a:	51 8f       	std	Z+25, r21	; 0x19
	}
	dp->clust = clst;					/* Current cluster# */
     73c:	f2 01       	movw	r30, r4
     73e:	e2 8a       	std	Z+18, r14	; 0x12
     740:	f3 8a       	std	Z+19, r15	; 0x13
     742:	04 8b       	std	Z+20, r16	; 0x14
     744:	15 8b       	std	Z+21, r17	; 0x15
	if (dp->sect == 0) return FR_INT_ERR;
     746:	26 89       	ldd	r18, Z+22	; 0x16
     748:	37 89       	ldd	r19, Z+23	; 0x17
     74a:	40 8d       	ldd	r20, Z+24	; 0x18
     74c:	51 8d       	ldd	r21, Z+25	; 0x19
     74e:	21 15       	cp	r18, r1
     750:	31 05       	cpc	r19, r1
     752:	41 05       	cpc	r20, r1
     754:	51 05       	cpc	r21, r1
     756:	d9 f0       	breq	.+54     	; 0x78e <dir_sdi+0x1de>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
     758:	d4 01       	movw	r26, r8
     75a:	c3 01       	movw	r24, r6
     75c:	69 e0       	ldi	r22, 0x09	; 9
     75e:	b6 95       	lsr	r27
     760:	a7 95       	ror	r26
     762:	97 95       	ror	r25
     764:	87 95       	ror	r24
     766:	6a 95       	dec	r22
     768:	d1 f7       	brne	.-12     	; 0x75e <dir_sdi+0x1ae>
     76a:	82 0f       	add	r24, r18
     76c:	93 1f       	adc	r25, r19
     76e:	a4 1f       	adc	r26, r20
     770:	b5 1f       	adc	r27, r21
     772:	86 8b       	std	Z+22, r24	; 0x16
     774:	97 8b       	std	Z+23, r25	; 0x17
     776:	a0 8f       	std	Z+24, r26	; 0x18
     778:	b1 8f       	std	Z+25, r27	; 0x19
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
     77a:	c3 01       	movw	r24, r6
     77c:	91 70       	andi	r25, 0x01	; 1
     77e:	8f 96       	adiw	r24, 0x2f	; 47
     780:	c8 0f       	add	r28, r24
     782:	d9 1f       	adc	r29, r25
     784:	d3 8f       	std	Z+27, r29	; 0x1b
     786:	c2 8f       	std	Z+26, r28	; 0x1a
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	02 c0       	rjmp	.+4      	; 0x792 <dir_sdi+0x1e2>

	return FR_OK;
     78e:	22 e0       	ldi	r18, 0x02	; 2
     790:	30 e0       	ldi	r19, 0x00	; 0
}
     792:	c9 01       	movw	r24, r18
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	e2 e1       	ldi	r30, 0x12	; 18
     79a:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>

0000079e <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
     79e:	a0 e0       	ldi	r26, 0x00	; 0
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	e5 ed       	ldi	r30, 0xD5	; 213
     7a4:	f3 e0       	ldi	r31, 0x03	; 3
     7a6:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__prologue_saves__+0x8>
     7aa:	ec 01       	movw	r28, r24
     7ac:	6a 01       	movw	r12, r20
     7ae:	7b 01       	movw	r14, r22
     7b0:	48 01       	movw	r8, r16
     7b2:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
     7b4:	42 30       	cpi	r20, 0x02	; 2
     7b6:	51 05       	cpc	r21, r1
     7b8:	61 05       	cpc	r22, r1
     7ba:	71 05       	cpc	r23, r1
     7bc:	08 f4       	brcc	.+2      	; 0x7c0 <put_fat+0x22>
     7be:	e0 c0       	rjmp	.+448    	; 0x980 <put_fat+0x1e2>
     7c0:	8b 89       	ldd	r24, Y+19	; 0x13
     7c2:	9c 89       	ldd	r25, Y+20	; 0x14
     7c4:	ad 89       	ldd	r26, Y+21	; 0x15
     7c6:	be 89       	ldd	r27, Y+22	; 0x16
     7c8:	48 17       	cp	r20, r24
     7ca:	59 07       	cpc	r21, r25
     7cc:	6a 07       	cpc	r22, r26
     7ce:	7b 07       	cpc	r23, r27
     7d0:	08 f0       	brcs	.+2      	; 0x7d4 <put_fat+0x36>
     7d2:	d6 c0       	rjmp	.+428    	; 0x980 <put_fat+0x1e2>
		switch (fs->fs_type) {
     7d4:	88 81       	ld	r24, Y
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	09 f4       	brne	.+2      	; 0x7dc <put_fat+0x3e>
     7da:	73 c0       	rjmp	.+230    	; 0x8c2 <put_fat+0x124>
     7dc:	83 30       	cpi	r24, 0x03	; 3
     7de:	09 f4       	brne	.+2      	; 0x7e2 <put_fat+0x44>
     7e0:	92 c0       	rjmp	.+292    	; 0x906 <put_fat+0x168>
     7e2:	81 30       	cpi	r24, 0x01	; 1
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <put_fat+0x4a>
     7e6:	cc c0       	rjmp	.+408    	; 0x980 <put_fat+0x1e2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
     7e8:	8a 01       	movw	r16, r20
     7ea:	16 95       	lsr	r17
     7ec:	07 95       	ror	r16
     7ee:	04 0f       	add	r16, r20
     7f0:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     7f2:	a8 01       	movw	r20, r16
     7f4:	45 2f       	mov	r20, r21
     7f6:	55 27       	eor	r21, r21
     7f8:	46 95       	lsr	r20
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     800:	98 a1       	ldd	r25, Y+32	; 0x20
     802:	a9 a1       	ldd	r26, Y+33	; 0x21
     804:	ba a1       	ldd	r27, Y+34	; 0x22
     806:	48 0f       	add	r20, r24
     808:	59 1f       	adc	r21, r25
     80a:	6a 1f       	adc	r22, r26
     80c:	7b 1f       	adc	r23, r27
     80e:	ce 01       	movw	r24, r28
     810:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
     814:	3c 01       	movw	r6, r24
			if (res != FR_OK) break;
     816:	00 97       	sbiw	r24, 0x00	; 0
     818:	09 f0       	breq	.+2      	; 0x81c <put_fat+0x7e>
     81a:	b5 c0       	rjmp	.+362    	; 0x986 <put_fat+0x1e8>
			p = fs->win + bc++ % SS(fs);
     81c:	d8 01       	movw	r26, r16
     81e:	b1 70       	andi	r27, 0x01	; 1
     820:	0f 5f       	subi	r16, 0xFF	; 255
     822:	1f 4f       	sbci	r17, 0xFF	; 255
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	c9 22       	and	r12, r25
     828:	dd 24       	eor	r13, r13
     82a:	c1 14       	cp	r12, r1
     82c:	d1 04       	cpc	r13, r1
     82e:	51 f0       	breq	.+20     	; 0x844 <put_fat+0xa6>
     830:	fe 01       	movw	r30, r28
     832:	ea 0f       	add	r30, r26
     834:	fb 1f       	adc	r31, r27
     836:	87 a5       	ldd	r24, Z+47	; 0x2f
     838:	8f 70       	andi	r24, 0x0F	; 15
     83a:	98 2d       	mov	r25, r8
     83c:	92 95       	swap	r25
     83e:	90 7f       	andi	r25, 0xF0	; 240
     840:	98 2b       	or	r25, r24
     842:	01 c0       	rjmp	.+2      	; 0x846 <put_fat+0xa8>
     844:	98 2d       	mov	r25, r8
     846:	ac 0f       	add	r26, r28
     848:	bd 1f       	adc	r27, r29
     84a:	9f 96       	adiw	r26, 0x2f	; 47
     84c:	9c 93       	st	X, r25
			fs->wflag = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	8b 83       	std	Y+3, r24	; 0x03
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     852:	a8 01       	movw	r20, r16
     854:	45 2f       	mov	r20, r21
     856:	55 27       	eor	r21, r21
     858:	46 95       	lsr	r20
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     860:	98 a1       	ldd	r25, Y+32	; 0x20
     862:	a9 a1       	ldd	r26, Y+33	; 0x21
     864:	ba a1       	ldd	r27, Y+34	; 0x22
     866:	48 0f       	add	r20, r24
     868:	59 1f       	adc	r21, r25
     86a:	6a 1f       	adc	r22, r26
     86c:	7b 1f       	adc	r23, r27
     86e:	ce 01       	movw	r24, r28
     870:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
     874:	3c 01       	movw	r6, r24
			if (res != FR_OK) break;
     876:	00 97       	sbiw	r24, 0x00	; 0
     878:	09 f0       	breq	.+2      	; 0x87c <put_fat+0xde>
     87a:	85 c0       	rjmp	.+266    	; 0x986 <put_fat+0x1e8>
			p = fs->win + bc % SS(fs);
     87c:	5f ef       	ldi	r21, 0xFF	; 255
     87e:	e5 2e       	mov	r14, r21
     880:	51 e0       	ldi	r21, 0x01	; 1
     882:	f5 2e       	mov	r15, r21
     884:	e0 22       	and	r14, r16
     886:	f1 22       	and	r15, r17
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
     888:	c1 14       	cp	r12, r1
     88a:	d1 04       	cpc	r13, r1
     88c:	49 f0       	breq	.+18     	; 0x8a0 <put_fat+0x102>
     88e:	44 e0       	ldi	r20, 0x04	; 4
     890:	b6 94       	lsr	r11
     892:	a7 94       	ror	r10
     894:	97 94       	ror	r9
     896:	87 94       	ror	r8
     898:	4a 95       	dec	r20
     89a:	d1 f7       	brne	.-12     	; 0x890 <put_fat+0xf2>
     89c:	e8 2d       	mov	r30, r8
     89e:	0b c0       	rjmp	.+22     	; 0x8b6 <put_fat+0x118>
     8a0:	fe 01       	movw	r30, r28
     8a2:	ee 0d       	add	r30, r14
     8a4:	ff 1d       	adc	r31, r15
     8a6:	e7 a5       	ldd	r30, Z+47	; 0x2f
     8a8:	e0 7f       	andi	r30, 0xF0	; 240
     8aa:	bb 27       	eor	r27, r27
     8ac:	ab 2d       	mov	r26, r11
     8ae:	9a 2d       	mov	r25, r10
     8b0:	89 2d       	mov	r24, r9
     8b2:	8f 70       	andi	r24, 0x0F	; 15
     8b4:	e8 2b       	or	r30, r24
     8b6:	ec 0e       	add	r14, r28
     8b8:	fd 1e       	adc	r15, r29
     8ba:	d7 01       	movw	r26, r14
     8bc:	9f 96       	adiw	r26, 0x2f	; 47
     8be:	ec 93       	st	X, r30
     8c0:	5c c0       	rjmp	.+184    	; 0x97a <put_fat+0x1dc>
			fs->wflag = 1;
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
     8c2:	45 2f       	mov	r20, r21
     8c4:	56 2f       	mov	r21, r22
     8c6:	67 2f       	mov	r22, r23
     8c8:	77 27       	eor	r23, r23
     8ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8cc:	98 a1       	ldd	r25, Y+32	; 0x20
     8ce:	a9 a1       	ldd	r26, Y+33	; 0x21
     8d0:	ba a1       	ldd	r27, Y+34	; 0x22
     8d2:	48 0f       	add	r20, r24
     8d4:	59 1f       	adc	r21, r25
     8d6:	6a 1f       	adc	r22, r26
     8d8:	7b 1f       	adc	r23, r27
     8da:	ce 01       	movw	r24, r28
     8dc:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
     8e0:	3c 01       	movw	r6, r24
			if (res != FR_OK) break;
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <put_fat+0x14a>
     8e6:	4f c0       	rjmp	.+158    	; 0x986 <put_fat+0x1e8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
     8e8:	cc 0c       	add	r12, r12
     8ea:	dd 1c       	adc	r13, r13
     8ec:	ee 1c       	adc	r14, r14
     8ee:	ff 1c       	adc	r15, r15
     8f0:	f6 01       	movw	r30, r12
     8f2:	f1 70       	andi	r31, 0x01	; 1
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     8f4:	de 01       	movw	r26, r28
     8f6:	ae 0f       	add	r26, r30
     8f8:	bf 1f       	adc	r27, r31
     8fa:	9f 96       	adiw	r26, 0x2f	; 47
     8fc:	8c 92       	st	X, r8
     8fe:	9f 97       	sbiw	r26, 0x2f	; 47
	*ptr++ = (BYTE)val;
     900:	fd 01       	movw	r30, r26
     902:	90 aa       	std	Z+48, r9	; 0x30
     904:	3a c0       	rjmp	.+116    	; 0x97a <put_fat+0x1dc>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
     906:	87 e0       	ldi	r24, 0x07	; 7
     908:	76 95       	lsr	r23
     90a:	67 95       	ror	r22
     90c:	57 95       	ror	r21
     90e:	47 95       	ror	r20
     910:	8a 95       	dec	r24
     912:	d1 f7       	brne	.-12     	; 0x908 <put_fat+0x16a>
     914:	8f 8d       	ldd	r24, Y+31	; 0x1f
     916:	98 a1       	ldd	r25, Y+32	; 0x20
     918:	a9 a1       	ldd	r26, Y+33	; 0x21
     91a:	ba a1       	ldd	r27, Y+34	; 0x22
     91c:	48 0f       	add	r20, r24
     91e:	59 1f       	adc	r21, r25
     920:	6a 1f       	adc	r22, r26
     922:	7b 1f       	adc	r23, r27
     924:	ce 01       	movw	r24, r28
     926:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
     92a:	3c 01       	movw	r6, r24
			if (res != FR_OK) break;
     92c:	00 97       	sbiw	r24, 0x00	; 0
     92e:	59 f5       	brne	.+86     	; 0x986 <put_fat+0x1e8>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	9f ef       	ldi	r25, 0xFF	; 255
     934:	af ef       	ldi	r26, 0xFF	; 255
     936:	bf e0       	ldi	r27, 0x0F	; 15
     938:	88 22       	and	r8, r24
     93a:	99 22       	and	r9, r25
     93c:	aa 22       	and	r10, r26
     93e:	bb 22       	and	r11, r27
     940:	b2 e0       	ldi	r27, 0x02	; 2
     942:	cc 0c       	add	r12, r12
     944:	dd 1c       	adc	r13, r13
     946:	ee 1c       	adc	r14, r14
     948:	ff 1c       	adc	r15, r15
     94a:	ba 95       	dec	r27
     94c:	d1 f7       	brne	.-12     	; 0x942 <put_fat+0x1a4>
     94e:	86 01       	movw	r16, r12
     950:	11 70       	andi	r17, 0x01	; 1
     952:	01 5d       	subi	r16, 0xD1	; 209
     954:	1f 4f       	sbci	r17, 0xFF	; 255
     956:	0c 0f       	add	r16, r28
     958:	1d 1f       	adc	r17, r29
     95a:	c8 01       	movw	r24, r16
     95c:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
     960:	60 70       	andi	r22, 0x00	; 0
     962:	70 70       	andi	r23, 0x00	; 0
     964:	80 70       	andi	r24, 0x00	; 0
     966:	90 7f       	andi	r25, 0xF0	; 240
     968:	86 2a       	or	r8, r22
     96a:	97 2a       	or	r9, r23
     96c:	a8 2a       	or	r10, r24
     96e:	b9 2a       	or	r11, r25
     970:	c8 01       	movw	r24, r16
     972:	b5 01       	movw	r22, r10
     974:	a4 01       	movw	r20, r8
     976:	0e 94 c2 00 	call	0x184	; 0x184 <st_dword>
			fs->wflag = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	8b 83       	std	Y+3, r24	; 0x03
     97e:	03 c0       	rjmp	.+6      	; 0x986 <put_fat+0x1e8>
     980:	a2 e0       	ldi	r26, 0x02	; 2
     982:	6a 2e       	mov	r6, r26
     984:	71 2c       	mov	r7, r1
			break;
		}
	}
	return res;
}
     986:	c3 01       	movw	r24, r6
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	ee e0       	ldi	r30, 0x0E	; 14
     98e:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__epilogue_restores__+0x8>

00000992 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	ef ec       	ldi	r30, 0xCF	; 207
     998:	f4 e0       	ldi	r31, 0x04	; 4
     99a:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x4>
     99e:	8c 01       	movw	r16, r24
     9a0:	2a 01       	movw	r4, r20
     9a2:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
     9a4:	fc 01       	movw	r30, r24
     9a6:	c0 81       	ld	r28, Z
     9a8:	d1 81       	ldd	r29, Z+1	; 0x01


	if (clst == 0) {	/* Create a new chain */
     9aa:	41 15       	cp	r20, r1
     9ac:	51 05       	cpc	r21, r1
     9ae:	61 05       	cpc	r22, r1
     9b0:	71 05       	cpc	r23, r1
     9b2:	99 f4       	brne	.+38     	; 0x9da <create_chain+0x48>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
     9b4:	8b 84       	ldd	r8, Y+11	; 0x0b
     9b6:	9c 84       	ldd	r9, Y+12	; 0x0c
     9b8:	ad 84       	ldd	r10, Y+13	; 0x0d
     9ba:	be 84       	ldd	r11, Y+14	; 0x0e
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
     9bc:	81 14       	cp	r8, r1
     9be:	91 04       	cpc	r9, r1
     9c0:	a1 04       	cpc	r10, r1
     9c2:	b1 04       	cpc	r11, r1
     9c4:	51 f1       	breq	.+84     	; 0xa1a <create_chain+0x88>
     9c6:	8b 89       	ldd	r24, Y+19	; 0x13
     9c8:	9c 89       	ldd	r25, Y+20	; 0x14
     9ca:	ad 89       	ldd	r26, Y+21	; 0x15
     9cc:	be 89       	ldd	r27, Y+22	; 0x16
     9ce:	88 16       	cp	r8, r24
     9d0:	99 06       	cpc	r9, r25
     9d2:	aa 06       	cpc	r10, r26
     9d4:	bb 06       	cpc	r11, r27
     9d6:	08 f5       	brcc	.+66     	; 0xa1a <create_chain+0x88>
     9d8:	25 c0       	rjmp	.+74     	; 0xa24 <create_chain+0x92>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
     9da:	0e 94 04 02 	call	0x408	; 0x408 <get_fat>
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;				/* Test for insanity */
     9e2:	62 30       	cpi	r22, 0x02	; 2
     9e4:	71 05       	cpc	r23, r1
     9e6:	81 05       	cpc	r24, r1
     9e8:	91 05       	cpc	r25, r1
     9ea:	08 f4       	brcc	.+2      	; 0x9ee <create_chain+0x5c>
     9ec:	ee c0       	rjmp	.+476    	; 0xbca <create_chain+0x238>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
     9ee:	6f 3f       	cpi	r22, 0xFF	; 255
     9f0:	ff ef       	ldi	r31, 0xFF	; 255
     9f2:	7f 07       	cpc	r23, r31
     9f4:	ff ef       	ldi	r31, 0xFF	; 255
     9f6:	8f 07       	cpc	r24, r31
     9f8:	ff ef       	ldi	r31, 0xFF	; 255
     9fa:	9f 07       	cpc	r25, r31
     9fc:	09 f4       	brne	.+2      	; 0xa00 <create_chain+0x6e>
     9fe:	f3 c0       	rjmp	.+486    	; 0xbe6 <create_chain+0x254>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
     a00:	8b 89       	ldd	r24, Y+19	; 0x13
     a02:	9c 89       	ldd	r25, Y+20	; 0x14
     a04:	ad 89       	ldd	r26, Y+21	; 0x15
     a06:	be 89       	ldd	r27, Y+22	; 0x16
     a08:	28 17       	cp	r18, r24
     a0a:	39 07       	cpc	r19, r25
     a0c:	4a 07       	cpc	r20, r26
     a0e:	5b 07       	cpc	r21, r27
     a10:	08 f4       	brcc	.+2      	; 0xa14 <create_chain+0x82>
     a12:	e9 c0       	rjmp	.+466    	; 0xbe6 <create_chain+0x254>
     a14:	53 01       	movw	r10, r6
     a16:	42 01       	movw	r8, r4
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <create_chain+0x92>
     a1a:	b1 e0       	ldi	r27, 0x01	; 1
     a1c:	8b 2e       	mov	r8, r27
     a1e:	91 2c       	mov	r9, r1
     a20:	a1 2c       	mov	r10, r1
     a22:	b1 2c       	mov	r11, r1
		scl = clst;							/* Cluster to start to find */
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
     a24:	8f 85       	ldd	r24, Y+15	; 0x0f
     a26:	98 89       	ldd	r25, Y+16	; 0x10
     a28:	a9 89       	ldd	r26, Y+17	; 0x11
     a2a:	ba 89       	ldd	r27, Y+18	; 0x12
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	09 f4       	brne	.+2      	; 0xa36 <create_chain+0xa4>
     a34:	d4 c0       	rjmp	.+424    	; 0xbde <create_chain+0x24c>
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
		if (scl == clst) {						/* Stretching an existing chain? */
     a36:	84 14       	cp	r8, r4
     a38:	95 04       	cpc	r9, r5
     a3a:	a6 04       	cpc	r10, r6
     a3c:	b7 04       	cpc	r11, r7
     a3e:	09 f0       	breq	.+2      	; 0xa42 <create_chain+0xb0>
     a40:	4a c0       	rjmp	.+148    	; 0xad6 <create_chain+0x144>
			ncl = scl + 1;						/* Test if next cluster is free */
     a42:	75 01       	movw	r14, r10
     a44:	64 01       	movw	r12, r8
     a46:	08 94       	sec
     a48:	c1 1c       	adc	r12, r1
     a4a:	d1 1c       	adc	r13, r1
     a4c:	e1 1c       	adc	r14, r1
     a4e:	f1 1c       	adc	r15, r1
			if (ncl >= fs->n_fatent) ncl = 2;
     a50:	8b 89       	ldd	r24, Y+19	; 0x13
     a52:	9c 89       	ldd	r25, Y+20	; 0x14
     a54:	ad 89       	ldd	r26, Y+21	; 0x15
     a56:	be 89       	ldd	r27, Y+22	; 0x16
     a58:	c8 16       	cp	r12, r24
     a5a:	d9 06       	cpc	r13, r25
     a5c:	ea 06       	cpc	r14, r26
     a5e:	fb 06       	cpc	r15, r27
     a60:	28 f0       	brcs	.+10     	; 0xa6c <create_chain+0xda>
     a62:	a2 e0       	ldi	r26, 0x02	; 2
     a64:	ca 2e       	mov	r12, r26
     a66:	d1 2c       	mov	r13, r1
     a68:	e1 2c       	mov	r14, r1
     a6a:	f1 2c       	mov	r15, r1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
     a6c:	c8 01       	movw	r24, r16
     a6e:	b7 01       	movw	r22, r14
     a70:	a6 01       	movw	r20, r12
     a72:	0e 94 04 02 	call	0x408	; 0x408 <get_fat>
     a76:	9b 01       	movw	r18, r22
     a78:	ac 01       	movw	r20, r24
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
     a7a:	61 30       	cpi	r22, 0x01	; 1
     a7c:	71 05       	cpc	r23, r1
     a7e:	81 05       	cpc	r24, r1
     a80:	91 05       	cpc	r25, r1
     a82:	09 f4       	brne	.+2      	; 0xa86 <create_chain+0xf4>
     a84:	b0 c0       	rjmp	.+352    	; 0xbe6 <create_chain+0x254>
     a86:	2f 3f       	cpi	r18, 0xFF	; 255
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	38 07       	cpc	r19, r24
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	48 07       	cpc	r20, r24
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	58 07       	cpc	r21, r24
     a94:	09 f4       	brne	.+2      	; 0xa98 <create_chain+0x106>
     a96:	a7 c0       	rjmp	.+334    	; 0xbe6 <create_chain+0x254>
			if (cs != 0) {						/* Not free? */
     a98:	21 15       	cp	r18, r1
     a9a:	31 05       	cpc	r19, r1
     a9c:	41 05       	cpc	r20, r1
     a9e:	51 05       	cpc	r21, r1
     aa0:	a9 f0       	breq	.+42     	; 0xacc <create_chain+0x13a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
     aa2:	2b 85       	ldd	r18, Y+11	; 0x0b
     aa4:	3c 85       	ldd	r19, Y+12	; 0x0c
     aa6:	4d 85       	ldd	r20, Y+13	; 0x0d
     aa8:	5e 85       	ldd	r21, Y+14	; 0x0e
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
     aaa:	22 30       	cpi	r18, 0x02	; 2
     aac:	31 05       	cpc	r19, r1
     aae:	41 05       	cpc	r20, r1
     ab0:	51 05       	cpc	r21, r1
     ab2:	88 f0       	brcs	.+34     	; 0xad6 <create_chain+0x144>
     ab4:	8b 89       	ldd	r24, Y+19	; 0x13
     ab6:	9c 89       	ldd	r25, Y+20	; 0x14
     ab8:	ad 89       	ldd	r26, Y+21	; 0x15
     aba:	be 89       	ldd	r27, Y+22	; 0x16
     abc:	28 17       	cp	r18, r24
     abe:	39 07       	cpc	r19, r25
     ac0:	4a 07       	cpc	r20, r26
     ac2:	5b 07       	cpc	r21, r27
     ac4:	40 f4       	brcc	.+16     	; 0xad6 <create_chain+0x144>
     ac6:	49 01       	movw	r8, r18
     ac8:	5a 01       	movw	r10, r20
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <create_chain+0x144>
				ncl = 0;
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
     acc:	c1 14       	cp	r12, r1
     ace:	d1 04       	cpc	r13, r1
     ad0:	e1 04       	cpc	r14, r1
     ad2:	f1 04       	cpc	r15, r1
     ad4:	e9 f5       	brne	.+122    	; 0xb50 <create_chain+0x1be>
     ad6:	75 01       	movw	r14, r10
     ad8:	64 01       	movw	r12, r8
			ncl = scl;	/* Start cluster */
			for (;;) {
				ncl++;							/* Next cluster */
     ada:	08 94       	sec
     adc:	c1 1c       	adc	r12, r1
     ade:	d1 1c       	adc	r13, r1
     ae0:	e1 1c       	adc	r14, r1
     ae2:	f1 1c       	adc	r15, r1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
     ae4:	8b 89       	ldd	r24, Y+19	; 0x13
     ae6:	9c 89       	ldd	r25, Y+20	; 0x14
     ae8:	ad 89       	ldd	r26, Y+21	; 0x15
     aea:	be 89       	ldd	r27, Y+22	; 0x16
     aec:	c8 16       	cp	r12, r24
     aee:	d9 06       	cpc	r13, r25
     af0:	ea 06       	cpc	r14, r26
     af2:	fb 06       	cpc	r15, r27
     af4:	60 f0       	brcs	.+24     	; 0xb0e <create_chain+0x17c>
					ncl = 2;
					if (ncl > scl) return 0;	/* No free cluster found? */
     af6:	e2 e0       	ldi	r30, 0x02	; 2
     af8:	8e 16       	cp	r8, r30
     afa:	91 04       	cpc	r9, r1
     afc:	a1 04       	cpc	r10, r1
     afe:	b1 04       	cpc	r11, r1
     b00:	08 f4       	brcc	.+2      	; 0xb04 <create_chain+0x172>
     b02:	6d c0       	rjmp	.+218    	; 0xbde <create_chain+0x24c>
     b04:	f2 e0       	ldi	r31, 0x02	; 2
     b06:	cf 2e       	mov	r12, r31
     b08:	d1 2c       	mov	r13, r1
     b0a:	e1 2c       	mov	r14, r1
     b0c:	f1 2c       	mov	r15, r1
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
     b0e:	c8 01       	movw	r24, r16
     b10:	b7 01       	movw	r22, r14
     b12:	a6 01       	movw	r20, r12
     b14:	0e 94 04 02 	call	0x408	; 0x408 <get_fat>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
				if (cs == 0) break;				/* Found a free cluster? */
     b1c:	61 15       	cp	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	81 05       	cpc	r24, r1
     b22:	91 05       	cpc	r25, r1
     b24:	a9 f0       	breq	.+42     	; 0xb50 <create_chain+0x1be>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
     b26:	61 30       	cpi	r22, 0x01	; 1
     b28:	71 05       	cpc	r23, r1
     b2a:	81 05       	cpc	r24, r1
     b2c:	91 05       	cpc	r25, r1
     b2e:	09 f4       	brne	.+2      	; 0xb32 <create_chain+0x1a0>
     b30:	5a c0       	rjmp	.+180    	; 0xbe6 <create_chain+0x254>
     b32:	6f 3f       	cpi	r22, 0xFF	; 255
     b34:	ff ef       	ldi	r31, 0xFF	; 255
     b36:	7f 07       	cpc	r23, r31
     b38:	ff ef       	ldi	r31, 0xFF	; 255
     b3a:	8f 07       	cpc	r24, r31
     b3c:	ff ef       	ldi	r31, 0xFF	; 255
     b3e:	9f 07       	cpc	r25, r31
     b40:	09 f4       	brne	.+2      	; 0xb44 <create_chain+0x1b2>
     b42:	51 c0       	rjmp	.+162    	; 0xbe6 <create_chain+0x254>
				if (ncl == scl) return 0;		/* No free cluster found? */
     b44:	c8 14       	cp	r12, r8
     b46:	d9 04       	cpc	r13, r9
     b48:	ea 04       	cpc	r14, r10
     b4a:	fb 04       	cpc	r15, r11
     b4c:	31 f6       	brne	.-116    	; 0xada <create_chain+0x148>
     b4e:	47 c0       	rjmp	.+142    	; 0xbde <create_chain+0x24c>
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
     b50:	ce 01       	movw	r24, r28
     b52:	b7 01       	movw	r22, r14
     b54:	a6 01       	movw	r20, r12
     b56:	0f ef       	ldi	r16, 0xFF	; 255
     b58:	1f ef       	ldi	r17, 0xFF	; 255
     b5a:	2f ef       	ldi	r18, 0xFF	; 255
     b5c:	3f ef       	ldi	r19, 0xFF	; 255
     b5e:	0e 94 cf 03 	call	0x79e	; 0x79e <put_fat>
		if (res == FR_OK && clst != 0) {
     b62:	00 97       	sbiw	r24, 0x00	; 0
     b64:	81 f5       	brne	.+96     	; 0xbc6 <create_chain+0x234>
     b66:	41 14       	cp	r4, r1
     b68:	51 04       	cpc	r5, r1
     b6a:	61 04       	cpc	r6, r1
     b6c:	71 04       	cpc	r7, r1
     b6e:	49 f0       	breq	.+18     	; 0xb82 <create_chain+0x1f0>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
     b70:	ce 01       	movw	r24, r28
     b72:	b3 01       	movw	r22, r6
     b74:	a2 01       	movw	r20, r4
     b76:	97 01       	movw	r18, r14
     b78:	86 01       	movw	r16, r12
     b7a:	0e 94 cf 03 	call	0x79e	; 0x79e <put_fat>
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	11 f5       	brne	.+68     	; 0xbc6 <create_chain+0x234>
		fs->last_clst = ncl;
     b82:	cb 86       	std	Y+11, r12	; 0x0b
     b84:	dc 86       	std	Y+12, r13	; 0x0c
     b86:	ed 86       	std	Y+13, r14	; 0x0d
     b88:	fe 86       	std	Y+14, r15	; 0x0e
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
     b8a:	2f 85       	ldd	r18, Y+15	; 0x0f
     b8c:	38 89       	ldd	r19, Y+16	; 0x10
     b8e:	49 89       	ldd	r20, Y+17	; 0x11
     b90:	5a 89       	ldd	r21, Y+18	; 0x12
     b92:	8b 89       	ldd	r24, Y+19	; 0x13
     b94:	9c 89       	ldd	r25, Y+20	; 0x14
     b96:	ad 89       	ldd	r26, Y+21	; 0x15
     b98:	be 89       	ldd	r27, Y+22	; 0x16
     b9a:	02 97       	sbiw	r24, 0x02	; 2
     b9c:	a1 09       	sbc	r26, r1
     b9e:	b1 09       	sbc	r27, r1
     ba0:	82 17       	cp	r24, r18
     ba2:	93 07       	cpc	r25, r19
     ba4:	a4 07       	cpc	r26, r20
     ba6:	b5 07       	cpc	r27, r21
     ba8:	40 f0       	brcs	.+16     	; 0xbba <create_chain+0x228>
     baa:	21 50       	subi	r18, 0x01	; 1
     bac:	30 40       	sbci	r19, 0x00	; 0
     bae:	40 40       	sbci	r20, 0x00	; 0
     bb0:	50 40       	sbci	r21, 0x00	; 0
     bb2:	2f 87       	std	Y+15, r18	; 0x0f
     bb4:	38 8b       	std	Y+16, r19	; 0x10
     bb6:	49 8b       	std	Y+17, r20	; 0x11
     bb8:	5a 8b       	std	Y+18, r21	; 0x12
		fs->fsi_flag |= 1;
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	81 60       	ori	r24, 0x01	; 1
     bbe:	8c 83       	std	Y+4, r24	; 0x04
     bc0:	a7 01       	movw	r20, r14
     bc2:	96 01       	movw	r18, r12
     bc4:	10 c0       	rjmp	.+32     	; 0xbe6 <create_chain+0x254>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	29 f0       	breq	.+10     	; 0xbd4 <create_chain+0x242>
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	09 c0       	rjmp	.+18     	; 0xbe6 <create_chain+0x254>
     bd4:	2f ef       	ldi	r18, 0xFF	; 255
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f ef       	ldi	r20, 0xFF	; 255
     bda:	5f ef       	ldi	r21, 0xFF	; 255
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <create_chain+0x254>
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error status */
}
     be6:	b9 01       	movw	r22, r18
     be8:	ca 01       	movw	r24, r20
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	e0 e1       	ldi	r30, 0x10	; 16
     bf0:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x4>

00000bf4 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
     bf4:	a6 e0       	ldi	r26, 0x06	; 6
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e0 e0       	ldi	r30, 0x00	; 0
     bfa:	f6 e0       	ldi	r31, 0x06	; 6
     bfc:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
     c00:	2c 01       	movw	r4, r24
     c02:	5b 01       	movw	r10, r22
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
     c04:	dc 01       	movw	r26, r24
     c06:	6d 90       	ld	r6, X+
     c08:	7c 90       	ld	r7, X
     c0a:	11 97       	sbiw	r26, 0x01	; 1


	ofs = dp->dptr + SZDIRE;	/* Next entry */
     c0c:	1e 96       	adiw	r26, 0x0e	; 14
     c0e:	ed 90       	ld	r14, X+
     c10:	fd 90       	ld	r15, X+
     c12:	0d 91       	ld	r16, X+
     c14:	1c 91       	ld	r17, X
     c16:	51 97       	sbiw	r26, 0x11	; 17
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
     c18:	56 96       	adiw	r26, 0x16	; 22
     c1a:	2d 91       	ld	r18, X+
     c1c:	3d 91       	ld	r19, X+
     c1e:	4d 91       	ld	r20, X+
     c20:	5c 91       	ld	r21, X
     c22:	59 97       	sbiw	r26, 0x19	; 25
     c24:	21 15       	cp	r18, r1
     c26:	31 05       	cpc	r19, r1
     c28:	41 05       	cpc	r20, r1
     c2a:	51 05       	cpc	r21, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <dir_next+0x3c>
     c2e:	7a c1       	rjmp	.+756    	; 0xf24 <dir_next+0x330>
{
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;


	ofs = dp->dptr + SZDIRE;	/* Next entry */
     c30:	d8 01       	movw	r26, r16
     c32:	c7 01       	movw	r24, r14
     c34:	80 96       	adiw	r24, 0x20	; 32
     c36:	a1 1d       	adc	r26, r1
     c38:	b1 1d       	adc	r27, r1
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	9a 83       	std	Y+2, r25	; 0x02
     c3e:	ab 83       	std	Y+3, r26	; 0x03
     c40:	bc 83       	std	Y+4, r27	; 0x04
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
     c42:	80 30       	cpi	r24, 0x00	; 0
     c44:	e0 e0       	ldi	r30, 0x00	; 0
     c46:	9e 07       	cpc	r25, r30
     c48:	e0 e2       	ldi	r30, 0x20	; 32
     c4a:	ae 07       	cpc	r26, r30
     c4c:	e0 e0       	ldi	r30, 0x00	; 0
     c4e:	be 07       	cpc	r27, r30
     c50:	08 f0       	brcs	.+2      	; 0xc54 <dir_next+0x60>
     c52:	68 c1       	rjmp	.+720    	; 0xf24 <dir_next+0x330>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
     c54:	91 70       	andi	r25, 0x01	; 1
     c56:	a0 70       	andi	r26, 0x00	; 0
     c58:	b0 70       	andi	r27, 0x00	; 0
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	a1 05       	cpc	r26, r1
     c5e:	b1 05       	cpc	r27, r1
     c60:	09 f0       	breq	.+2      	; 0xc64 <dir_next+0x70>
     c62:	4c c1       	rjmp	.+664    	; 0xefc <dir_next+0x308>
		dp->sect++;				/* Next sector */
     c64:	2f 5f       	subi	r18, 0xFF	; 255
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	4f 4f       	sbci	r20, 0xFF	; 255
     c6a:	5f 4f       	sbci	r21, 0xFF	; 255
     c6c:	d2 01       	movw	r26, r4
     c6e:	56 96       	adiw	r26, 0x16	; 22
     c70:	2d 93       	st	X+, r18
     c72:	3d 93       	st	X+, r19
     c74:	4d 93       	st	X+, r20
     c76:	5c 93       	st	X, r21
     c78:	59 97       	sbiw	r26, 0x19	; 25

		if (dp->clust == 0) {	/* Static table */
     c7a:	52 96       	adiw	r26, 0x12	; 18
     c7c:	ed 90       	ld	r14, X+
     c7e:	fd 90       	ld	r15, X+
     c80:	0d 91       	ld	r16, X+
     c82:	1c 91       	ld	r17, X
     c84:	55 97       	sbiw	r26, 0x15	; 21
     c86:	e1 14       	cp	r14, r1
     c88:	f1 04       	cpc	r15, r1
     c8a:	01 05       	cpc	r16, r1
     c8c:	11 05       	cpc	r17, r1
     c8e:	b9 f4       	brne	.+46     	; 0xcbe <dir_next+0xca>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
     c90:	29 81       	ldd	r18, Y+1	; 0x01
     c92:	3a 81       	ldd	r19, Y+2	; 0x02
     c94:	4b 81       	ldd	r20, Y+3	; 0x03
     c96:	5c 81       	ldd	r21, Y+4	; 0x04
     c98:	75 e0       	ldi	r23, 0x05	; 5
     c9a:	56 95       	lsr	r21
     c9c:	47 95       	ror	r20
     c9e:	37 95       	ror	r19
     ca0:	27 95       	ror	r18
     ca2:	7a 95       	dec	r23
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <dir_next+0xa6>
     ca6:	f3 01       	movw	r30, r6
     ca8:	87 81       	ldd	r24, Z+7	; 0x07
     caa:	90 85       	ldd	r25, Z+8	; 0x08
     cac:	a0 e0       	ldi	r26, 0x00	; 0
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	4a 07       	cpc	r20, r26
     cb6:	5b 07       	cpc	r21, r27
     cb8:	08 f0       	brcs	.+2      	; 0xcbc <dir_next+0xc8>
     cba:	3f c0       	rjmp	.+126    	; 0xd3a <dir_next+0x146>
     cbc:	1f c1       	rjmp	.+574    	; 0xefc <dir_next+0x308>
				dp->sect = 0; return FR_NO_FILE;
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
     cbe:	f3 01       	movw	r30, r6
     cc0:	81 85       	ldd	r24, Z+9	; 0x09
     cc2:	92 85       	ldd	r25, Z+10	; 0x0a
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	a0 e0       	ldi	r26, 0x00	; 0
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	29 81       	ldd	r18, Y+1	; 0x01
     ccc:	3a 81       	ldd	r19, Y+2	; 0x02
     cce:	4b 81       	ldd	r20, Y+3	; 0x03
     cd0:	5c 81       	ldd	r21, Y+4	; 0x04
     cd2:	69 e0       	ldi	r22, 0x09	; 9
     cd4:	56 95       	lsr	r21
     cd6:	47 95       	ror	r20
     cd8:	37 95       	ror	r19
     cda:	27 95       	ror	r18
     cdc:	6a 95       	dec	r22
     cde:	d1 f7       	brne	.-12     	; 0xcd4 <dir_next+0xe0>
     ce0:	82 23       	and	r24, r18
     ce2:	93 23       	and	r25, r19
     ce4:	a4 23       	and	r26, r20
     ce6:	b5 23       	and	r27, r21
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	a1 05       	cpc	r26, r1
     cec:	b1 05       	cpc	r27, r1
     cee:	09 f0       	breq	.+2      	; 0xcf2 <dir_next+0xfe>
     cf0:	05 c1       	rjmp	.+522    	; 0xefc <dir_next+0x308>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
     cf2:	c2 01       	movw	r24, r4
     cf4:	b8 01       	movw	r22, r16
     cf6:	a7 01       	movw	r20, r14
     cf8:	0e 94 04 02 	call	0x408	; 0x408 <get_fat>
     cfc:	6b 01       	movw	r12, r22
     cfe:	7c 01       	movw	r14, r24
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
     d00:	62 30       	cpi	r22, 0x02	; 2
     d02:	71 05       	cpc	r23, r1
     d04:	81 05       	cpc	r24, r1
     d06:	91 05       	cpc	r25, r1
     d08:	08 f4       	brcc	.+2      	; 0xd0c <dir_next+0x118>
     d0a:	0f c1       	rjmp	.+542    	; 0xf2a <dir_next+0x336>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     d0c:	6f 3f       	cpi	r22, 0xFF	; 255
     d0e:	2f ef       	ldi	r18, 0xFF	; 255
     d10:	72 07       	cpc	r23, r18
     d12:	2f ef       	ldi	r18, 0xFF	; 255
     d14:	82 07       	cpc	r24, r18
     d16:	2f ef       	ldi	r18, 0xFF	; 255
     d18:	92 07       	cpc	r25, r18
     d1a:	09 f4       	brne	.+2      	; 0xd1e <dir_next+0x12a>
     d1c:	09 c1       	rjmp	.+530    	; 0xf30 <dir_next+0x33c>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
     d1e:	f3 01       	movw	r30, r6
     d20:	83 89       	ldd	r24, Z+19	; 0x13
     d22:	94 89       	ldd	r25, Z+20	; 0x14
     d24:	a5 89       	ldd	r26, Z+21	; 0x15
     d26:	b6 89       	ldd	r27, Z+22	; 0x16
     d28:	c8 16       	cp	r12, r24
     d2a:	d9 06       	cpc	r13, r25
     d2c:	ea 06       	cpc	r14, r26
     d2e:	fb 06       	cpc	r15, r27
     d30:	08 f4       	brcc	.+2      	; 0xd34 <dir_next+0x140>
     d32:	a4 c0       	rjmp	.+328    	; 0xe7c <dir_next+0x288>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
     d34:	a1 14       	cp	r10, r1
     d36:	b1 04       	cpc	r11, r1
     d38:	41 f4       	brne	.+16     	; 0xd4a <dir_next+0x156>
						dp->sect = 0; return FR_NO_FILE;
     d3a:	d2 01       	movw	r26, r4
     d3c:	56 96       	adiw	r26, 0x16	; 22
     d3e:	1d 92       	st	X+, r1
     d40:	1d 92       	st	X+, r1
     d42:	1d 92       	st	X+, r1
     d44:	1c 92       	st	X, r1
     d46:	59 97       	sbiw	r26, 0x19	; 25
     d48:	ed c0       	rjmp	.+474    	; 0xf24 <dir_next+0x330>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
     d4a:	f2 01       	movw	r30, r4
     d4c:	42 89       	ldd	r20, Z+18	; 0x12
     d4e:	53 89       	ldd	r21, Z+19	; 0x13
     d50:	64 89       	ldd	r22, Z+20	; 0x14
     d52:	75 89       	ldd	r23, Z+21	; 0x15
     d54:	c2 01       	movw	r24, r4
     d56:	0e 94 c9 04 	call	0x992	; 0x992 <create_chain>
     d5a:	6b 01       	movw	r12, r22
     d5c:	7c 01       	movw	r14, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
     d5e:	61 15       	cp	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	81 05       	cpc	r24, r1
     d64:	91 05       	cpc	r25, r1
     d66:	19 f4       	brne	.+6      	; 0xd6e <dir_next+0x17a>
     d68:	27 e0       	ldi	r18, 0x07	; 7
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	e3 c0       	rjmp	.+454    	; 0xf34 <dir_next+0x340>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
     d6e:	61 30       	cpi	r22, 0x01	; 1
     d70:	71 05       	cpc	r23, r1
     d72:	81 05       	cpc	r24, r1
     d74:	91 05       	cpc	r25, r1
     d76:	09 f4       	brne	.+2      	; 0xd7a <dir_next+0x186>
     d78:	d8 c0       	rjmp	.+432    	; 0xf2a <dir_next+0x336>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     d7a:	6f 3f       	cpi	r22, 0xFF	; 255
     d7c:	2f ef       	ldi	r18, 0xFF	; 255
     d7e:	72 07       	cpc	r23, r18
     d80:	2f ef       	ldi	r18, 0xFF	; 255
     d82:	82 07       	cpc	r24, r18
     d84:	2f ef       	ldi	r18, 0xFF	; 255
     d86:	92 07       	cpc	r25, r18
     d88:	09 f4       	brne	.+2      	; 0xd8c <dir_next+0x198>
     d8a:	d2 c0       	rjmp	.+420    	; 0xf30 <dir_next+0x33c>
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
     d8c:	c3 01       	movw	r24, r6
     d8e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <sync_window>
     d92:	89 2b       	or	r24, r25
     d94:	09 f0       	breq	.+2      	; 0xd98 <dir_next+0x1a4>
     d96:	cc c0       	rjmp	.+408    	; 0xf30 <dir_next+0x33c>
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
     d98:	9e ef       	ldi	r25, 0xFE	; 254
     d9a:	89 2e       	mov	r8, r25
     d9c:	9f ef       	ldi	r25, 0xFF	; 255
     d9e:	99 2e       	mov	r9, r25
     da0:	9f ef       	ldi	r25, 0xFF	; 255
     da2:	a9 2e       	mov	r10, r25
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	b9 2e       	mov	r11, r25
     da8:	8c 0c       	add	r8, r12
     daa:	9d 1c       	adc	r9, r13
     dac:	ae 1c       	adc	r10, r14
     dae:	bf 1c       	adc	r11, r15
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
     db0:	f3 01       	movw	r30, r6
     db2:	83 89       	ldd	r24, Z+19	; 0x13
     db4:	94 89       	ldd	r25, Z+20	; 0x14
     db6:	a5 89       	ldd	r26, Z+21	; 0x15
     db8:	b6 89       	ldd	r27, Z+22	; 0x16
     dba:	02 97       	sbiw	r24, 0x02	; 2
     dbc:	a1 09       	sbc	r26, r1
     dbe:	b1 09       	sbc	r27, r1
     dc0:	88 16       	cp	r8, r24
     dc2:	99 06       	cpc	r9, r25
     dc4:	aa 06       	cpc	r10, r26
     dc6:	bb 06       	cpc	r11, r27
     dc8:	20 f0       	brcs	.+8      	; 0xdd2 <dir_next+0x1de>
     dca:	88 24       	eor	r8, r8
     dcc:	99 24       	eor	r9, r9
     dce:	54 01       	movw	r10, r8
     dd0:	16 c0       	rjmp	.+44     	; 0xdfe <dir_next+0x20a>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
     dd2:	d3 01       	movw	r26, r6
     dd4:	19 96       	adiw	r26, 0x09	; 9
     dd6:	2d 91       	ld	r18, X+
     dd8:	3c 91       	ld	r19, X
     dda:	1a 97       	sbiw	r26, 0x0a	; 10
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	c5 01       	movw	r24, r10
     de2:	b4 01       	movw	r22, r8
     de4:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__mulsi3>
     de8:	4b 01       	movw	r8, r22
     dea:	5c 01       	movw	r10, r24
     dec:	f3 01       	movw	r30, r6
     dee:	87 a1       	ldd	r24, Z+39	; 0x27
     df0:	90 a5       	ldd	r25, Z+40	; 0x28
     df2:	a1 a5       	ldd	r26, Z+41	; 0x29
     df4:	b2 a5       	ldd	r27, Z+42	; 0x2a
     df6:	88 0e       	add	r8, r24
     df8:	99 1e       	adc	r9, r25
     dfa:	aa 1e       	adc	r10, r26
     dfc:	bb 1e       	adc	r11, r27
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
	sect = clst2sect(fs, clst);		/* Top of the cluster */
	fs->winsect = sect;				/* Set window to top of the cluster */
     dfe:	d3 01       	movw	r26, r6
     e00:	9b 96       	adiw	r26, 0x2b	; 43
     e02:	8d 92       	st	X+, r8
     e04:	9d 92       	st	X+, r9
     e06:	ad 92       	st	X+, r10
     e08:	bc 92       	st	X, r11
     e0a:	9e 97       	sbiw	r26, 0x2e	; 46


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
     e0c:	8f e2       	ldi	r24, 0x2F	; 47
     e0e:	28 2e       	mov	r2, r24
     e10:	31 2c       	mov	r3, r1
     e12:	26 0c       	add	r2, r6
     e14:	37 1c       	adc	r3, r7
     e16:	f1 01       	movw	r30, r2
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	92 e0       	ldi	r25, 0x02	; 2

	do {
		*d++ = (BYTE)val;
     e1c:	11 92       	st	Z+, r1
	} while (--cnt);
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	e9 f7       	brne	.-6      	; 0xe1c <dir_next+0x228>
     e22:	1e 82       	std	Y+6, r1	; 0x06
     e24:	1d 82       	std	Y+5, r1	; 0x05
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <dir_next+0x23e>
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
     e28:	ed 81       	ldd	r30, Y+5	; 0x05
     e2a:	fe 81       	ldd	r31, Y+6	; 0x06
     e2c:	31 96       	adiw	r30, 0x01	; 1
     e2e:	fe 83       	std	Y+6, r31	; 0x06
     e30:	ed 83       	std	Y+5, r30	; 0x05
     e32:	d3 01       	movw	r26, r6
     e34:	19 96       	adiw	r26, 0x09	; 9
     e36:	8d 91       	ld	r24, X+
     e38:	9c 91       	ld	r25, X
     e3a:	1a 97       	sbiw	r26, 0x0a	; 10
     e3c:	ed 81       	ldd	r30, Y+5	; 0x05
     e3e:	fe 81       	ldd	r31, Y+6	; 0x06
     e40:	e8 17       	cp	r30, r24
     e42:	f9 07       	cpc	r31, r25
     e44:	80 f4       	brcc	.+32     	; 0xe66 <dir_next+0x272>
     e46:	9f 01       	movw	r18, r30
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	28 0d       	add	r18, r8
     e4e:	39 1d       	adc	r19, r9
     e50:	4a 1d       	adc	r20, r10
     e52:	5b 1d       	adc	r21, r11
     e54:	11 96       	adiw	r26, 0x01	; 1
     e56:	8c 91       	ld	r24, X
     e58:	b1 01       	movw	r22, r2
     e5a:	01 e0       	ldi	r16, 0x01	; 1
     e5c:	10 e0       	ldi	r17, 0x00	; 0
     e5e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <disk_write>
     e62:	89 2b       	or	r24, r25
     e64:	09 f3       	breq	.-62     	; 0xe28 <dir_next+0x234>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
     e66:	d3 01       	movw	r26, r6
     e68:	19 96       	adiw	r26, 0x09	; 9
     e6a:	8d 91       	ld	r24, X+
     e6c:	9c 91       	ld	r25, X
     e6e:	1a 97       	sbiw	r26, 0x0a	; 10
     e70:	ed 81       	ldd	r30, Y+5	; 0x05
     e72:	fe 81       	ldd	r31, Y+6	; 0x06
     e74:	e8 17       	cp	r30, r24
     e76:	f9 07       	cpc	r31, r25
     e78:	09 f0       	breq	.+2      	; 0xe7c <dir_next+0x288>
     e7a:	5a c0       	rjmp	.+180    	; 0xf30 <dir_next+0x33c>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
     e7c:	d2 01       	movw	r26, r4
     e7e:	52 96       	adiw	r26, 0x12	; 18
     e80:	cd 92       	st	X+, r12
     e82:	dd 92       	st	X+, r13
     e84:	ed 92       	st	X+, r14
     e86:	fc 92       	st	X, r15
     e88:	55 97       	sbiw	r26, 0x15	; 21
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
     e8a:	8e ef       	ldi	r24, 0xFE	; 254
     e8c:	9f ef       	ldi	r25, 0xFF	; 255
     e8e:	af ef       	ldi	r26, 0xFF	; 255
     e90:	bf ef       	ldi	r27, 0xFF	; 255
     e92:	8c 0d       	add	r24, r12
     e94:	9d 1d       	adc	r25, r13
     e96:	ae 1d       	adc	r26, r14
     e98:	bf 1d       	adc	r27, r15
     e9a:	7c 01       	movw	r14, r24
     e9c:	8d 01       	movw	r16, r26
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
     e9e:	f3 01       	movw	r30, r6
     ea0:	83 89       	ldd	r24, Z+19	; 0x13
     ea2:	94 89       	ldd	r25, Z+20	; 0x14
     ea4:	a5 89       	ldd	r26, Z+21	; 0x15
     ea6:	b6 89       	ldd	r27, Z+22	; 0x16
     ea8:	02 97       	sbiw	r24, 0x02	; 2
     eaa:	a1 09       	sbc	r26, r1
     eac:	b1 09       	sbc	r27, r1
     eae:	e8 16       	cp	r14, r24
     eb0:	f9 06       	cpc	r15, r25
     eb2:	0a 07       	cpc	r16, r26
     eb4:	1b 07       	cpc	r17, r27
     eb6:	28 f0       	brcs	.+10     	; 0xec2 <dir_next+0x2ce>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	16 c0       	rjmp	.+44     	; 0xeee <dir_next+0x2fa>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
     ec2:	d3 01       	movw	r26, r6
     ec4:	19 96       	adiw	r26, 0x09	; 9
     ec6:	2d 91       	ld	r18, X+
     ec8:	3c 91       	ld	r19, X
     eca:	1a 97       	sbiw	r26, 0x0a	; 10
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	c8 01       	movw	r24, r16
     ed2:	b7 01       	movw	r22, r14
     ed4:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__mulsi3>
     ed8:	9b 01       	movw	r18, r22
     eda:	ac 01       	movw	r20, r24
     edc:	f3 01       	movw	r30, r6
     ede:	87 a1       	ldd	r24, Z+39	; 0x27
     ee0:	90 a5       	ldd	r25, Z+40	; 0x28
     ee2:	a1 a5       	ldd	r26, Z+41	; 0x29
     ee4:	b2 a5       	ldd	r27, Z+42	; 0x2a
     ee6:	28 0f       	add	r18, r24
     ee8:	39 1f       	adc	r19, r25
     eea:	4a 1f       	adc	r20, r26
     eec:	5b 1f       	adc	r21, r27
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
				dp->sect = clst2sect(fs, clst);
     eee:	d2 01       	movw	r26, r4
     ef0:	56 96       	adiw	r26, 0x16	; 22
     ef2:	2d 93       	st	X+, r18
     ef4:	3d 93       	st	X+, r19
     ef6:	4d 93       	st	X+, r20
     ef8:	5c 93       	st	X, r21
     efa:	59 97       	sbiw	r26, 0x19	; 25
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	ab 81       	ldd	r26, Y+3	; 0x03
     f02:	bc 81       	ldd	r27, Y+4	; 0x04
     f04:	f2 01       	movw	r30, r4
     f06:	86 87       	std	Z+14, r24	; 0x0e
     f08:	97 87       	std	Z+15, r25	; 0x0f
     f0a:	a0 8b       	std	Z+16, r26	; 0x10
     f0c:	b1 8b       	std	Z+17, r27	; 0x11
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	91 70       	andi	r25, 0x01	; 1
     f14:	8f 96       	adiw	r24, 0x2f	; 47
     f16:	68 0e       	add	r6, r24
     f18:	79 1e       	adc	r7, r25
     f1a:	73 8e       	std	Z+27, r7	; 0x1b
     f1c:	62 8e       	std	Z+26, r6	; 0x1a
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	08 c0       	rjmp	.+16     	; 0xf34 <dir_next+0x340>

	return FR_OK;
     f24:	24 e0       	ldi	r18, 0x04	; 4
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <dir_next+0x340>
     f2a:	22 e0       	ldi	r18, 0x02	; 2
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <dir_next+0x340>
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	30 e0       	ldi	r19, 0x00	; 0
}
     f34:	c9 01       	movw	r24, r18
     f36:	26 96       	adiw	r28, 0x06	; 6
     f38:	e2 e1       	ldi	r30, 0x12	; 18
     f3a:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>

00000f3e <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
     f44:	1b 82       	std	Y+3, r1	; 0x03
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	9f ef       	ldi	r25, 0xFF	; 255
     f4a:	af ef       	ldi	r26, 0xFF	; 255
     f4c:	bf ef       	ldi	r27, 0xFF	; 255
     f4e:	8b a7       	std	Y+43, r24	; 0x2b
     f50:	9c a7       	std	Y+44, r25	; 0x2c
     f52:	ad a7       	std	Y+45, r26	; 0x2d
     f54:	be a7       	std	Y+46, r27	; 0x2e
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
     f56:	ce 01       	movw	r24, r28
     f58:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
     f5c:	89 2b       	or	r24, r25
     f5e:	11 f0       	breq	.+4      	; 0xf64 <check_fs+0x26>
     f60:	84 e0       	ldi	r24, 0x04	; 4
     f62:	41 c0       	rjmp	.+130    	; 0xfe6 <check_fs+0xa8>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     f64:	c2 5d       	subi	r28, 0xD2	; 210
     f66:	dd 4f       	sbci	r29, 0xFD	; 253
     f68:	98 81       	ld	r25, Y
     f6a:	80 e0       	ldi	r24, 0x00	; 0
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
     f6c:	2a 91       	ld	r18, -Y
     f6e:	cd 52       	subi	r28, 0x2D	; 45
     f70:	d2 40       	sbci	r29, 0x02	; 2
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	82 2b       	or	r24, r18
     f76:	93 2b       	or	r25, r19
     f78:	85 55       	subi	r24, 0x55	; 85
     f7a:	9a 4a       	sbci	r25, 0xAA	; 170
     f7c:	11 f0       	breq	.+4      	; 0xf82 <check_fs+0x44>
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	32 c0       	rjmp	.+100    	; 0xfe6 <check_fs+0xa8>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
     f82:	8f a5       	ldd	r24, Y+47	; 0x2f
     f84:	89 3e       	cpi	r24, 0xE9	; 233
     f86:	21 f0       	breq	.+8      	; 0xf90 <check_fs+0x52>
     f88:	8b 3e       	cpi	r24, 0xEB	; 235
     f8a:	11 f0       	breq	.+4      	; 0xf90 <check_fs+0x52>
     f8c:	88 3e       	cpi	r24, 0xE8	; 232
     f8e:	51 f5       	brne	.+84     	; 0xfe4 <check_fs+0xa6>


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
     f90:	de 01       	movw	r26, r28
     f92:	ab 59       	subi	r26, 0x9B	; 155
     f94:	bf 4f       	sbci	r27, 0xFF	; 255
     f96:	ed e1       	ldi	r30, 0x1D	; 29
     f98:	f1 e0       	ldi	r31, 0x01	; 1
	int r = 0;

	do {
		r = *d++ - *s++;
     f9a:	8d 91       	ld	r24, X+
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 91       	ld	r24, Z+
     fa2:	28 1b       	sub	r18, r24
     fa4:	31 09       	sbc	r19, r1
	} while (--cnt && r == 0);
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	e0 32       	cpi	r30, 0x20	; 32
     faa:	f8 07       	cpc	r31, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <check_fs+0x76>
     fae:	23 2b       	or	r18, r19
     fb0:	a1 f3       	breq	.-24     	; 0xf9a <check_fs+0x5c>
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <check_fs+0x7a>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
     fb4:	23 2b       	or	r18, r19
     fb6:	a1 f0       	breq	.+40     	; 0xfe0 <check_fs+0xa2>


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
     fb8:	de 01       	movw	r26, r28
     fba:	af 57       	subi	r26, 0x7F	; 127
     fbc:	bf 4f       	sbci	r27, 0xFF	; 255
     fbe:	e1 e2       	ldi	r30, 0x21	; 33
     fc0:	f1 e0       	ldi	r31, 0x01	; 1
	int r = 0;

	do {
		r = *d++ - *s++;
     fc2:	8d 91       	ld	r24, X+
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 91       	ld	r24, Z+
     fca:	28 1b       	sub	r18, r24
     fcc:	31 09       	sbc	r19, r1
	} while (--cnt && r == 0);
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	e6 32       	cpi	r30, 0x26	; 38
     fd2:	f8 07       	cpc	r31, r24
     fd4:	19 f0       	breq	.+6      	; 0xfdc <check_fs+0x9e>
     fd6:	23 2b       	or	r18, r19
     fd8:	a1 f3       	breq	.-24     	; 0xfc2 <check_fs+0x84>
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <check_fs+0xa6>
#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
     fdc:	23 2b       	or	r18, r19
     fde:	11 f4       	brne	.+4      	; 0xfe4 <check_fs+0xa6>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <check_fs+0xa8>
     fe4:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 2;	/* Valid BS but not FAT */
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
     fec:	ac e0       	ldi	r26, 0x0C	; 12
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ec ef       	ldi	r30, 0xFC	; 252
     ff2:	f7 e0       	ldi	r31, 0x07	; 7
     ff4:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
     ff8:	7c 01       	movw	r14, r24
     ffa:	16 2f       	mov	r17, r22
     ffc:	07 2f       	mov	r16, r23
     ffe:	58 87       	std	Y+8, r21	; 0x08
    1000:	4f 83       	std	Y+7, r20	; 0x07
    1002:	3a 87       	std	Y+10, r19	; 0x0a
    1004:	29 87       	std	Y+9, r18	; 0x09
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    1006:	d9 01       	movw	r26, r18
    1008:	1d 92       	st	X+, r1
    100a:	1c 92       	st	X, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    100c:	8b 87       	std	Y+11, r24	; 0x0b
    100e:	fc 86       	std	Y+12, r15	; 0x0c
    1010:	be 01       	movw	r22, r28
    1012:	6f 5f       	subi	r22, 0xFF	; 255
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	0e 94 52 01 	call	0x2a4	; 0x2a4 <validate>
    101a:	1c 01       	movw	r2, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	09 f0       	breq	.+2      	; 0x1022 <f_write+0x36>
    1020:	c3 c1       	rjmp	.+902    	; 0x13a8 <__stack+0x2a9>
    1022:	f7 01       	movw	r30, r14
    1024:	87 85       	ldd	r24, Z+15	; 0x0f
    1026:	28 2e       	mov	r2, r24
    1028:	33 24       	eor	r3, r3
    102a:	21 14       	cp	r2, r1
    102c:	31 04       	cpc	r3, r1
    102e:	09 f0       	breq	.+2      	; 0x1032 <f_write+0x46>
    1030:	bb c1       	rjmp	.+886    	; 0x13a8 <__stack+0x2a9>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    1032:	86 85       	ldd	r24, Z+14	; 0x0e
    1034:	81 fd       	sbrc	r24, 1
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <f_write+0x54>
    1038:	77 e0       	ldi	r23, 0x07	; 7
    103a:	27 2e       	mov	r2, r23
    103c:	31 2c       	mov	r3, r1
    103e:	b4 c1       	rjmp	.+872    	; 0x13a8 <__stack+0x2a9>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    1040:	d7 01       	movw	r26, r14
    1042:	50 96       	adiw	r26, 0x10	; 16
    1044:	2d 91       	ld	r18, X+
    1046:	3d 91       	ld	r19, X+
    1048:	4d 91       	ld	r20, X+
    104a:	5c 91       	ld	r21, X
    104c:	53 97       	sbiw	r26, 0x13	; 19
    104e:	ef 81       	ldd	r30, Y+7	; 0x07
    1050:	f8 85       	ldd	r31, Y+8	; 0x08
    1052:	cf 01       	movw	r24, r30
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	82 0f       	add	r24, r18
    105a:	93 1f       	adc	r25, r19
    105c:	a4 1f       	adc	r26, r20
    105e:	b5 1f       	adc	r27, r21
    1060:	82 17       	cp	r24, r18
    1062:	93 07       	cpc	r25, r19
    1064:	a4 07       	cpc	r26, r20
    1066:	b5 07       	cpc	r27, r21
    1068:	28 f4       	brcc	.+10     	; 0x1074 <f_write+0x88>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    106a:	b9 01       	movw	r22, r18
    106c:	60 95       	com	r22
    106e:	70 95       	com	r23
    1070:	78 87       	std	Y+8, r23	; 0x08
    1072:	6f 83       	std	Y+7, r22	; 0x07
{
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
    1074:	81 2f       	mov	r24, r17
    1076:	90 2f       	mov	r25, r16
    1078:	9c 01       	movw	r18, r24
    107a:	3c 83       	std	Y+4, r19	; 0x04
    107c:	2b 83       	std	Y+3, r18	; 0x03
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    107e:	c7 01       	movw	r24, r14
    1080:	82 96       	adiw	r24, 0x22	; 34
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	84 c1       	rjmp	.+776    	; 0x1390 <__stack+0x291>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    1088:	d7 01       	movw	r26, r14
    108a:	50 96       	adiw	r26, 0x10	; 16
    108c:	2d 91       	ld	r18, X+
    108e:	3d 91       	ld	r19, X+
    1090:	4d 91       	ld	r20, X+
    1092:	5c 91       	ld	r21, X
    1094:	53 97       	sbiw	r26, 0x13	; 19
    1096:	da 01       	movw	r26, r20
    1098:	c9 01       	movw	r24, r18
    109a:	91 70       	andi	r25, 0x01	; 1
    109c:	a0 70       	andi	r26, 0x00	; 0
    109e:	b0 70       	andi	r27, 0x00	; 0
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	a1 05       	cpc	r26, r1
    10a4:	b1 05       	cpc	r27, r1
    10a6:	09 f0       	breq	.+2      	; 0x10aa <f_write+0xbe>
    10a8:	19 c1       	rjmp	.+562    	; 0x12dc <__stack+0x1dd>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    10aa:	da 01       	movw	r26, r20
    10ac:	c9 01       	movw	r24, r18
    10ae:	69 e0       	ldi	r22, 0x09	; 9
    10b0:	b6 95       	lsr	r27
    10b2:	a7 95       	ror	r26
    10b4:	97 95       	ror	r25
    10b6:	87 95       	ror	r24
    10b8:	6a 95       	dec	r22
    10ba:	d1 f7       	brne	.-12     	; 0x10b0 <f_write+0xc4>
    10bc:	e9 81       	ldd	r30, Y+1	; 0x01
    10be:	fa 81       	ldd	r31, Y+2	; 0x02
    10c0:	61 84       	ldd	r6, Z+9	; 0x09
    10c2:	72 84       	ldd	r7, Z+10	; 0x0a
    10c4:	08 94       	sec
    10c6:	61 08       	sbc	r6, r1
    10c8:	71 08       	sbc	r7, r1
    10ca:	68 22       	and	r6, r24
    10cc:	79 22       	and	r7, r25
			if (csect == 0) {				/* On the cluster boundary? */
    10ce:	61 14       	cp	r6, r1
    10d0:	71 04       	cpc	r7, r1
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <f_write+0xea>
    10d4:	4f c0       	rjmp	.+158    	; 0x1174 <__stack+0x75>
				if (fp->fptr == 0) {		/* On the top of the file? */
    10d6:	21 15       	cp	r18, r1
    10d8:	31 05       	cpc	r19, r1
    10da:	41 05       	cpc	r20, r1
    10dc:	51 05       	cpc	r21, r1
    10de:	89 f4       	brne	.+34     	; 0x1102 <__stack+0x3>
					clst = fp->obj.sclust;	/* Follow from the origin */
    10e0:	f7 01       	movw	r30, r14
    10e2:	26 81       	ldd	r18, Z+6	; 0x06
    10e4:	37 81       	ldd	r19, Z+7	; 0x07
    10e6:	40 85       	ldd	r20, Z+8	; 0x08
    10e8:	51 85       	ldd	r21, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    10ea:	21 15       	cp	r18, r1
    10ec:	31 05       	cpc	r19, r1
    10ee:	41 05       	cpc	r20, r1
    10f0:	51 05       	cpc	r21, r1
    10f2:	d1 f4       	brne	.+52     	; 0x1128 <__stack+0x29>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    10f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	09 c0       	rjmp	.+18     	; 0x1114 <__stack+0x15>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    1102:	d7 01       	movw	r26, r14
    1104:	54 96       	adiw	r26, 0x14	; 20
    1106:	4d 91       	ld	r20, X+
    1108:	5d 91       	ld	r21, X+
    110a:	6d 91       	ld	r22, X+
    110c:	7c 91       	ld	r23, X
    110e:	57 97       	sbiw	r26, 0x17	; 23
    1110:	8b 85       	ldd	r24, Y+11	; 0x0b
    1112:	9c 85       	ldd	r25, Y+12	; 0x0c
    1114:	0e 94 c9 04 	call	0x992	; 0x992 <create_chain>
    1118:	9b 01       	movw	r18, r22
    111a:	ac 01       	movw	r20, r24
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    111c:	61 15       	cp	r22, r1
    111e:	71 05       	cpc	r23, r1
    1120:	81 05       	cpc	r24, r1
    1122:	91 05       	cpc	r25, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <__stack+0x29>
    1126:	39 c1       	rjmp	.+626    	; 0x139a <__stack+0x29b>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    1128:	21 30       	cpi	r18, 0x01	; 1
    112a:	31 05       	cpc	r19, r1
    112c:	41 05       	cpc	r20, r1
    112e:	51 05       	cpc	r21, r1
    1130:	21 f4       	brne	.+8      	; 0x113a <__stack+0x3b>
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	f7 01       	movw	r30, r14
    1136:	87 87       	std	Z+15, r24	; 0x0f
    1138:	6e c0       	rjmp	.+220    	; 0x1216 <__stack+0x117>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    113a:	2f 3f       	cpi	r18, 0xFF	; 255
    113c:	ff ef       	ldi	r31, 0xFF	; 255
    113e:	3f 07       	cpc	r19, r31
    1140:	ff ef       	ldi	r31, 0xFF	; 255
    1142:	4f 07       	cpc	r20, r31
    1144:	ff ef       	ldi	r31, 0xFF	; 255
    1146:	5f 07       	cpc	r21, r31
    1148:	09 f4       	brne	.+2      	; 0x114c <__stack+0x4d>
    114a:	8c c0       	rjmp	.+280    	; 0x1264 <__stack+0x165>
				fp->clust = clst;			/* Update current cluster */
    114c:	f7 01       	movw	r30, r14
    114e:	24 8b       	std	Z+20, r18	; 0x14
    1150:	35 8b       	std	Z+21, r19	; 0x15
    1152:	46 8b       	std	Z+22, r20	; 0x16
    1154:	57 8b       	std	Z+23, r21	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    1156:	86 81       	ldd	r24, Z+6	; 0x06
    1158:	97 81       	ldd	r25, Z+7	; 0x07
    115a:	a0 85       	ldd	r26, Z+8	; 0x08
    115c:	b1 85       	ldd	r27, Z+9	; 0x09
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	a1 05       	cpc	r26, r1
    1162:	b1 05       	cpc	r27, r1
    1164:	39 f4       	brne	.+14     	; 0x1174 <__stack+0x75>
    1166:	d7 01       	movw	r26, r14
    1168:	16 96       	adiw	r26, 0x06	; 6
    116a:	2d 93       	st	X+, r18
    116c:	3d 93       	st	X+, r19
    116e:	4d 93       	st	X+, r20
    1170:	5c 93       	st	X, r21
    1172:	19 97       	sbiw	r26, 0x09	; 9
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
    1174:	f7 01       	movw	r30, r14
    1176:	86 85       	ldd	r24, Z+14	; 0x0e
    1178:	87 ff       	sbrs	r24, 7
    117a:	1a c0       	rjmp	.+52     	; 0x11b0 <__stack+0xb1>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	d7 01       	movw	r26, r14
    1182:	58 96       	adiw	r26, 0x18	; 24
    1184:	2d 91       	ld	r18, X+
    1186:	3d 91       	ld	r19, X+
    1188:	4d 91       	ld	r20, X+
    118a:	5c 91       	ld	r21, X
    118c:	5b 97       	sbiw	r26, 0x1b	; 27
    118e:	81 81       	ldd	r24, Z+1	; 0x01
    1190:	6d 81       	ldd	r22, Y+5	; 0x05
    1192:	7e 81       	ldd	r23, Y+6	; 0x06
    1194:	01 e0       	ldi	r16, 0x01	; 1
    1196:	10 e0       	ldi	r17, 0x00	; 0
    1198:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <disk_write>
    119c:	89 2b       	or	r24, r25
    119e:	09 f0       	breq	.+2      	; 0x11a2 <__stack+0xa3>
    11a0:	8f c0       	rjmp	.+286    	; 0x12c0 <__stack+0x1c1>
				fp->flag &= (BYTE)~FA_DIRTY;
    11a2:	d7 01       	movw	r26, r14
    11a4:	1e 96       	adiw	r26, 0x0e	; 14
    11a6:	8c 91       	ld	r24, X
    11a8:	1e 97       	sbiw	r26, 0x0e	; 14
    11aa:	8f 77       	andi	r24, 0x7F	; 127
    11ac:	1e 96       	adiw	r26, 0x0e	; 14
    11ae:	8c 93       	st	X, r24
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    11b0:	49 80       	ldd	r4, Y+1	; 0x01
    11b2:	5a 80       	ldd	r5, Y+2	; 0x02
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
    11b4:	f7 01       	movw	r30, r14
    11b6:	24 89       	ldd	r18, Z+20	; 0x14
    11b8:	35 89       	ldd	r19, Z+21	; 0x15
    11ba:	46 89       	ldd	r20, Z+22	; 0x16
    11bc:	57 89       	ldd	r21, Z+23	; 0x17
    11be:	22 50       	subi	r18, 0x02	; 2
    11c0:	30 40       	sbci	r19, 0x00	; 0
    11c2:	40 40       	sbci	r20, 0x00	; 0
    11c4:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    11c6:	f2 01       	movw	r30, r4
    11c8:	83 89       	ldd	r24, Z+19	; 0x13
    11ca:	94 89       	ldd	r25, Z+20	; 0x14
    11cc:	a5 89       	ldd	r26, Z+21	; 0x15
    11ce:	b6 89       	ldd	r27, Z+22	; 0x16
    11d0:	02 97       	sbiw	r24, 0x02	; 2
    11d2:	a1 09       	sbc	r26, r1
    11d4:	b1 09       	sbc	r27, r1
    11d6:	28 17       	cp	r18, r24
    11d8:	39 07       	cpc	r19, r25
    11da:	4a 07       	cpc	r20, r26
    11dc:	5b 07       	cpc	r21, r27
    11de:	b8 f4       	brcc	.+46     	; 0x120e <__stack+0x10f>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
    11e0:	01 85       	ldd	r16, Z+9	; 0x09
    11e2:	12 85       	ldd	r17, Z+10	; 0x0a
    11e4:	b8 01       	movw	r22, r16
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__mulsi3>
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	f2 01       	movw	r30, r4
    11f4:	87 a1       	ldd	r24, Z+39	; 0x27
    11f6:	90 a5       	ldd	r25, Z+40	; 0x28
    11f8:	a1 a5       	ldd	r26, Z+41	; 0x29
    11fa:	b2 a5       	ldd	r27, Z+42	; 0x2a
    11fc:	28 0f       	add	r18, r24
    11fe:	39 1f       	adc	r19, r25
    1200:	4a 1f       	adc	r20, r26
    1202:	5b 1f       	adc	r21, r27
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    1204:	21 15       	cp	r18, r1
    1206:	31 05       	cpc	r19, r1
    1208:	41 05       	cpc	r20, r1
    120a:	51 05       	cpc	r21, r1
    120c:	41 f4       	brne	.+16     	; 0x121e <__stack+0x11f>
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	d7 01       	movw	r26, r14
    1212:	1f 96       	adiw	r26, 0x0f	; 15
    1214:	8c 93       	st	X, r24
    1216:	b2 e0       	ldi	r27, 0x02	; 2
    1218:	2b 2e       	mov	r2, r27
    121a:	31 2c       	mov	r3, r1
    121c:	c5 c0       	rjmp	.+394    	; 0x13a8 <__stack+0x2a9>
			sect += csect;
    121e:	53 01       	movw	r10, r6
    1220:	cc 24       	eor	r12, r12
    1222:	dd 24       	eor	r13, r13
    1224:	a2 0e       	add	r10, r18
    1226:	b3 1e       	adc	r11, r19
    1228:	c4 1e       	adc	r12, r20
    122a:	d5 1e       	adc	r13, r21
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    122c:	8f 80       	ldd	r8, Y+7	; 0x07
    122e:	98 84       	ldd	r9, Y+8	; 0x08
    1230:	89 2c       	mov	r8, r9
    1232:	99 24       	eor	r9, r9
    1234:	86 94       	lsr	r8
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    1236:	81 14       	cp	r8, r1
    1238:	91 04       	cpc	r9, r1
    123a:	f1 f0       	breq	.+60     	; 0x1278 <__stack+0x179>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    123c:	c4 01       	movw	r24, r8
    123e:	86 0d       	add	r24, r6
    1240:	97 1d       	adc	r25, r7
    1242:	08 17       	cp	r16, r24
    1244:	19 07       	cpc	r17, r25
    1246:	18 f4       	brcc	.+6      	; 0x124e <__stack+0x14f>
					cc = fs->csize - csect;
    1248:	48 01       	movw	r8, r16
    124a:	86 18       	sub	r8, r6
    124c:	97 08       	sbc	r9, r7
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    124e:	f2 01       	movw	r30, r4
    1250:	81 81       	ldd	r24, Z+1	; 0x01
    1252:	6b 81       	ldd	r22, Y+3	; 0x03
    1254:	7c 81       	ldd	r23, Y+4	; 0x04
    1256:	a6 01       	movw	r20, r12
    1258:	95 01       	movw	r18, r10
    125a:	84 01       	movw	r16, r8
    125c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <disk_write>
    1260:	89 2b       	or	r24, r25
    1262:	29 f0       	breq	.+10     	; 0x126e <__stack+0x16f>
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	d7 01       	movw	r26, r14
    1268:	1f 96       	adiw	r26, 0x0f	; 15
    126a:	8c 93       	st	X, r24
    126c:	2c c0       	rjmp	.+88     	; 0x12c6 <__stack+0x1c7>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    126e:	84 01       	movw	r16, r8
    1270:	10 2f       	mov	r17, r16
    1272:	00 27       	eor	r16, r16
    1274:	11 0f       	add	r17, r17
    1276:	57 c0       	rjmp	.+174    	; 0x1326 <__stack+0x227>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    1278:	f7 01       	movw	r30, r14
    127a:	80 8d       	ldd	r24, Z+24	; 0x18
    127c:	91 8d       	ldd	r25, Z+25	; 0x19
    127e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1280:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1282:	8a 15       	cp	r24, r10
    1284:	9b 05       	cpc	r25, r11
    1286:	ac 05       	cpc	r26, r12
    1288:	bd 05       	cpc	r27, r13
    128a:	09 f1       	breq	.+66     	; 0x12ce <__stack+0x1cf>
    128c:	20 89       	ldd	r18, Z+16	; 0x10
    128e:	31 89       	ldd	r19, Z+17	; 0x11
    1290:	42 89       	ldd	r20, Z+18	; 0x12
    1292:	53 89       	ldd	r21, Z+19	; 0x13
    1294:	82 85       	ldd	r24, Z+10	; 0x0a
    1296:	93 85       	ldd	r25, Z+11	; 0x0b
    1298:	a4 85       	ldd	r26, Z+12	; 0x0c
    129a:	b5 85       	ldd	r27, Z+13	; 0x0d
    129c:	28 17       	cp	r18, r24
    129e:	39 07       	cpc	r19, r25
    12a0:	4a 07       	cpc	r20, r26
    12a2:	5b 07       	cpc	r21, r27
    12a4:	a0 f4       	brcc	.+40     	; 0x12ce <__stack+0x1cf>
    12a6:	d2 01       	movw	r26, r4
    12a8:	11 96       	adiw	r26, 0x01	; 1
    12aa:	8c 91       	ld	r24, X
    12ac:	6d 81       	ldd	r22, Y+5	; 0x05
    12ae:	7e 81       	ldd	r23, Y+6	; 0x06
    12b0:	a6 01       	movw	r20, r12
    12b2:	95 01       	movw	r18, r10
    12b4:	01 e0       	ldi	r16, 0x01	; 1
    12b6:	10 e0       	ldi	r17, 0x00	; 0
    12b8:	0e 94 76 15 	call	0x2aec	; 0x2aec <disk_read>
    12bc:	89 2b       	or	r24, r25
    12be:	39 f0       	breq	.+14     	; 0x12ce <__stack+0x1cf>
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	f7 01       	movw	r30, r14
    12c4:	87 87       	std	Z+15, r24	; 0x0f
    12c6:	e1 e0       	ldi	r30, 0x01	; 1
    12c8:	2e 2e       	mov	r2, r30
    12ca:	31 2c       	mov	r3, r1
    12cc:	6d c0       	rjmp	.+218    	; 0x13a8 <__stack+0x2a9>
			}
#endif
			fp->sect = sect;
    12ce:	d7 01       	movw	r26, r14
    12d0:	58 96       	adiw	r26, 0x18	; 24
    12d2:	ad 92       	st	X+, r10
    12d4:	bd 92       	st	X+, r11
    12d6:	cd 92       	st	X+, r12
    12d8:	dc 92       	st	X, r13
    12da:	5b 97       	sbiw	r26, 0x1b	; 27
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    12dc:	f7 01       	movw	r30, r14
    12de:	20 89       	ldd	r18, Z+16	; 0x10
    12e0:	31 89       	ldd	r19, Z+17	; 0x11
    12e2:	42 89       	ldd	r20, Z+18	; 0x12
    12e4:	53 89       	ldd	r21, Z+19	; 0x13
    12e6:	c9 01       	movw	r24, r18
    12e8:	91 70       	andi	r25, 0x01	; 1
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	72 e0       	ldi	r23, 0x02	; 2
    12ee:	68 1b       	sub	r22, r24
    12f0:	79 0b       	sbc	r23, r25
    12f2:	0f 81       	ldd	r16, Y+7	; 0x07
    12f4:	18 85       	ldd	r17, Y+8	; 0x08
    12f6:	60 17       	cp	r22, r16
    12f8:	71 07       	cpc	r23, r17
    12fa:	08 f4       	brcc	.+2      	; 0x12fe <__stack+0x1ff>
    12fc:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
    12fe:	f9 01       	movw	r30, r18
    1300:	f1 70       	andi	r31, 0x01	; 1
    1302:	b2 96       	adiw	r30, 0x22	; 34
    1304:	ee 0d       	add	r30, r14
    1306:	ff 1d       	adc	r31, r15
    1308:	ab 81       	ldd	r26, Y+3	; 0x03
    130a:	bc 81       	ldd	r27, Y+4	; 0x04
    130c:	98 01       	movw	r18, r16
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
		do {
			*d++ = *s++;
    130e:	8d 91       	ld	r24, X+
    1310:	81 93       	st	Z+, r24
		} while (--cnt);
    1312:	21 50       	subi	r18, 0x01	; 1
    1314:	30 40       	sbci	r19, 0x00	; 0
    1316:	d9 f7       	brne	.-10     	; 0x130e <__stack+0x20f>
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
    1318:	d7 01       	movw	r26, r14
    131a:	1e 96       	adiw	r26, 0x0e	; 14
    131c:	8c 91       	ld	r24, X
    131e:	1e 97       	sbiw	r26, 0x0e	; 14
    1320:	80 68       	ori	r24, 0x80	; 128
    1322:	1e 96       	adiw	r26, 0x0e	; 14
    1324:	8c 93       	st	X, r24
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
    1326:	ef 81       	ldd	r30, Y+7	; 0x07
    1328:	f8 85       	ldd	r31, Y+8	; 0x08
    132a:	e0 1b       	sub	r30, r16
    132c:	f1 0b       	sbc	r31, r17
    132e:	f8 87       	std	Y+8, r31	; 0x08
    1330:	ef 83       	std	Y+7, r30	; 0x07
    1332:	a9 85       	ldd	r26, Y+9	; 0x09
    1334:	ba 85       	ldd	r27, Y+10	; 0x0a
    1336:	8d 91       	ld	r24, X+
    1338:	9c 91       	ld	r25, X
    133a:	11 97       	sbiw	r26, 0x01	; 1
    133c:	80 0f       	add	r24, r16
    133e:	91 1f       	adc	r25, r17
    1340:	8d 93       	st	X+, r24
    1342:	9c 93       	st	X, r25
    1344:	eb 81       	ldd	r30, Y+3	; 0x03
    1346:	fc 81       	ldd	r31, Y+4	; 0x04
    1348:	e0 0f       	add	r30, r16
    134a:	f1 1f       	adc	r31, r17
    134c:	fc 83       	std	Y+4, r31	; 0x04
    134e:	eb 83       	std	Y+3, r30	; 0x03
    1350:	c8 01       	movw	r24, r16
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	f7 01       	movw	r30, r14
    1358:	20 89       	ldd	r18, Z+16	; 0x10
    135a:	31 89       	ldd	r19, Z+17	; 0x11
    135c:	42 89       	ldd	r20, Z+18	; 0x12
    135e:	53 89       	ldd	r21, Z+19	; 0x13
    1360:	82 0f       	add	r24, r18
    1362:	93 1f       	adc	r25, r19
    1364:	a4 1f       	adc	r26, r20
    1366:	b5 1f       	adc	r27, r21
    1368:	80 8b       	std	Z+16, r24	; 0x10
    136a:	91 8b       	std	Z+17, r25	; 0x11
    136c:	a2 8b       	std	Z+18, r26	; 0x12
    136e:	b3 8b       	std	Z+19, r27	; 0x13
    1370:	22 85       	ldd	r18, Z+10	; 0x0a
    1372:	33 85       	ldd	r19, Z+11	; 0x0b
    1374:	44 85       	ldd	r20, Z+12	; 0x0c
    1376:	55 85       	ldd	r21, Z+13	; 0x0d
    1378:	82 17       	cp	r24, r18
    137a:	93 07       	cpc	r25, r19
    137c:	a4 07       	cpc	r26, r20
    137e:	b5 07       	cpc	r27, r21
    1380:	10 f4       	brcc	.+4      	; 0x1386 <__stack+0x287>
    1382:	da 01       	movw	r26, r20
    1384:	c9 01       	movw	r24, r18
    1386:	f7 01       	movw	r30, r14
    1388:	82 87       	std	Z+10, r24	; 0x0a
    138a:	93 87       	std	Z+11, r25	; 0x0b
    138c:	a4 87       	std	Z+12, r26	; 0x0c
    138e:	b5 87       	std	Z+13, r27	; 0x0d
	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
    1390:	6f 81       	ldd	r22, Y+7	; 0x07
    1392:	78 85       	ldd	r23, Y+8	; 0x08
    1394:	67 2b       	or	r22, r23
    1396:	09 f0       	breq	.+2      	; 0x139a <__stack+0x29b>
    1398:	77 ce       	rjmp	.-786    	; 0x1088 <f_write+0x9c>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    139a:	d7 01       	movw	r26, r14
    139c:	1e 96       	adiw	r26, 0x0e	; 14
    139e:	8c 91       	ld	r24, X
    13a0:	1e 97       	sbiw	r26, 0x0e	; 14
    13a2:	80 64       	ori	r24, 0x40	; 64
    13a4:	1e 96       	adiw	r26, 0x0e	; 14
    13a6:	8c 93       	st	X, r24

	LEAVE_FF(fs, FR_OK);
}
    13a8:	c1 01       	movw	r24, r2
    13aa:	2c 96       	adiw	r28, 0x0c	; 12
    13ac:	e2 e1       	ldi	r30, 0x12	; 18
    13ae:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>

000013b2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    13b2:	ac e0       	ldi	r26, 0x0C	; 12
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	ef ed       	ldi	r30, 0xDF	; 223
    13b8:	f9 e0       	ldi	r31, 0x09	; 9
    13ba:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
    13be:	4c 01       	movw	r8, r24
    13c0:	16 2f       	mov	r17, r22
    13c2:	07 2f       	mov	r16, r23
    13c4:	58 87       	std	Y+8, r21	; 0x08
    13c6:	4f 83       	std	Y+7, r20	; 0x07
    13c8:	3a 87       	std	Y+10, r19	; 0x0a
    13ca:	29 87       	std	Y+9, r18	; 0x09
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    13cc:	f9 01       	movw	r30, r18
    13ce:	11 82       	std	Z+1, r1	; 0x01
    13d0:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
    13d2:	8b 87       	std	Y+11, r24	; 0x0b
    13d4:	9c 86       	std	Y+12, r9	; 0x0c
    13d6:	be 01       	movw	r22, r28
    13d8:	6f 5f       	subi	r22, 0xFF	; 255
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <validate>
    13e0:	1c 01       	movw	r2, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <f_read+0x36>
    13e6:	55 c1       	rjmp	.+682    	; 0x1692 <f_read+0x2e0>
    13e8:	f4 01       	movw	r30, r8
    13ea:	87 85       	ldd	r24, Z+15	; 0x0f
    13ec:	28 2e       	mov	r2, r24
    13ee:	33 24       	eor	r3, r3
    13f0:	21 14       	cp	r2, r1
    13f2:	31 04       	cpc	r3, r1
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <f_read+0x46>
    13f6:	4d c1       	rjmp	.+666    	; 0x1692 <f_read+0x2e0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    13f8:	86 85       	ldd	r24, Z+14	; 0x0e
    13fa:	80 fd       	sbrc	r24, 0
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <f_read+0x54>
    13fe:	87 e0       	ldi	r24, 0x07	; 7
    1400:	28 2e       	mov	r2, r24
    1402:	31 2c       	mov	r3, r1
    1404:	46 c1       	rjmp	.+652    	; 0x1692 <f_read+0x2e0>
	remain = fp->obj.objsize - fp->fptr;
    1406:	f4 01       	movw	r30, r8
    1408:	22 85       	ldd	r18, Z+10	; 0x0a
    140a:	33 85       	ldd	r19, Z+11	; 0x0b
    140c:	44 85       	ldd	r20, Z+12	; 0x0c
    140e:	55 85       	ldd	r21, Z+13	; 0x0d
    1410:	80 89       	ldd	r24, Z+16	; 0x10
    1412:	91 89       	ldd	r25, Z+17	; 0x11
    1414:	a2 89       	ldd	r26, Z+18	; 0x12
    1416:	b3 89       	ldd	r27, Z+19	; 0x13
    1418:	28 1b       	sub	r18, r24
    141a:	39 0b       	sbc	r19, r25
    141c:	4a 0b       	sbc	r20, r26
    141e:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    1420:	6f 81       	ldd	r22, Y+7	; 0x07
    1422:	78 85       	ldd	r23, Y+8	; 0x08
    1424:	cb 01       	movw	r24, r22
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	28 17       	cp	r18, r24
    142c:	39 07       	cpc	r19, r25
    142e:	4a 07       	cpc	r20, r26
    1430:	5b 07       	cpc	r21, r27
    1432:	10 f4       	brcc	.+4      	; 0x1438 <f_read+0x86>
    1434:	38 87       	std	Y+8, r19	; 0x08
    1436:	2f 83       	std	Y+7, r18	; 0x07
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
    1438:	81 2f       	mov	r24, r17
    143a:	90 2f       	mov	r25, r16
    143c:	9c 01       	movw	r18, r24
    143e:	3c 83       	std	Y+4, r19	; 0x04
    1440:	2b 83       	std	Y+3, r18	; 0x03
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    1442:	c4 01       	movw	r24, r8
    1444:	82 96       	adiw	r24, 0x22	; 34
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	1e c1       	rjmp	.+572    	; 0x1688 <f_read+0x2d6>
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    144c:	f4 01       	movw	r30, r8
    144e:	20 89       	ldd	r18, Z+16	; 0x10
    1450:	31 89       	ldd	r19, Z+17	; 0x11
    1452:	42 89       	ldd	r20, Z+18	; 0x12
    1454:	53 89       	ldd	r21, Z+19	; 0x13
    1456:	da 01       	movw	r26, r20
    1458:	c9 01       	movw	r24, r18
    145a:	91 70       	andi	r25, 0x01	; 1
    145c:	a0 70       	andi	r26, 0x00	; 0
    145e:	b0 70       	andi	r27, 0x00	; 0
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	a1 05       	cpc	r26, r1
    1464:	b1 05       	cpc	r27, r1
    1466:	09 f0       	breq	.+2      	; 0x146a <f_read+0xb8>
    1468:	cd c0       	rjmp	.+410    	; 0x1604 <f_read+0x252>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    146a:	da 01       	movw	r26, r20
    146c:	c9 01       	movw	r24, r18
    146e:	19 e0       	ldi	r17, 0x09	; 9
    1470:	b6 95       	lsr	r27
    1472:	a7 95       	ror	r26
    1474:	97 95       	ror	r25
    1476:	87 95       	ror	r24
    1478:	1a 95       	dec	r17
    147a:	d1 f7       	brne	.-12     	; 0x1470 <f_read+0xbe>
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	01 85       	ldd	r16, Z+9	; 0x09
    1482:	12 85       	ldd	r17, Z+10	; 0x0a
    1484:	01 50       	subi	r16, 0x01	; 1
    1486:	10 40       	sbci	r17, 0x00	; 0
    1488:	08 23       	and	r16, r24
    148a:	19 23       	and	r17, r25
			if (csect == 0) {					/* On the cluster boundary? */
    148c:	01 15       	cp	r16, r1
    148e:	11 05       	cpc	r17, r1
    1490:	39 f5       	brne	.+78     	; 0x14e0 <f_read+0x12e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    1492:	21 15       	cp	r18, r1
    1494:	31 05       	cpc	r19, r1
    1496:	41 05       	cpc	r20, r1
    1498:	51 05       	cpc	r21, r1
    149a:	31 f4       	brne	.+12     	; 0x14a8 <f_read+0xf6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    149c:	f4 01       	movw	r30, r8
    149e:	66 81       	ldd	r22, Z+6	; 0x06
    14a0:	77 81       	ldd	r23, Z+7	; 0x07
    14a2:	80 85       	ldd	r24, Z+8	; 0x08
    14a4:	91 85       	ldd	r25, Z+9	; 0x09
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <f_read+0x108>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    14a8:	f4 01       	movw	r30, r8
    14aa:	44 89       	ldd	r20, Z+20	; 0x14
    14ac:	55 89       	ldd	r21, Z+21	; 0x15
    14ae:	66 89       	ldd	r22, Z+22	; 0x16
    14b0:	77 89       	ldd	r23, Z+23	; 0x17
    14b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b6:	0e 94 04 02 	call	0x408	; 0x408 <get_fat>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    14ba:	62 30       	cpi	r22, 0x02	; 2
    14bc:	71 05       	cpc	r23, r1
    14be:	81 05       	cpc	r24, r1
    14c0:	91 05       	cpc	r25, r1
    14c2:	e8 f1       	brcs	.+122    	; 0x153e <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    14c4:	6f 3f       	cpi	r22, 0xFF	; 255
    14c6:	ff ef       	ldi	r31, 0xFF	; 255
    14c8:	7f 07       	cpc	r23, r31
    14ca:	ff ef       	ldi	r31, 0xFF	; 255
    14cc:	8f 07       	cpc	r24, r31
    14ce:	ff ef       	ldi	r31, 0xFF	; 255
    14d0:	9f 07       	cpc	r25, r31
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <f_read+0x124>
    14d4:	8b c0       	rjmp	.+278    	; 0x15ec <f_read+0x23a>
				fp->clust = clst;				/* Update current cluster */
    14d6:	f4 01       	movw	r30, r8
    14d8:	64 8b       	std	Z+20, r22	; 0x14
    14da:	75 8b       	std	Z+21, r23	; 0x15
    14dc:	86 8b       	std	Z+22, r24	; 0x16
    14de:	97 8b       	std	Z+23, r25	; 0x17
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    14e0:	49 80       	ldd	r4, Y+1	; 0x01
    14e2:	5a 80       	ldd	r5, Y+2	; 0x02
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
    14e4:	f4 01       	movw	r30, r8
    14e6:	24 89       	ldd	r18, Z+20	; 0x14
    14e8:	35 89       	ldd	r19, Z+21	; 0x15
    14ea:	46 89       	ldd	r20, Z+22	; 0x16
    14ec:	57 89       	ldd	r21, Z+23	; 0x17
    14ee:	22 50       	subi	r18, 0x02	; 2
    14f0:	30 40       	sbci	r19, 0x00	; 0
    14f2:	40 40       	sbci	r20, 0x00	; 0
    14f4:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    14f6:	f2 01       	movw	r30, r4
    14f8:	83 89       	ldd	r24, Z+19	; 0x13
    14fa:	94 89       	ldd	r25, Z+20	; 0x14
    14fc:	a5 89       	ldd	r26, Z+21	; 0x15
    14fe:	b6 89       	ldd	r27, Z+22	; 0x16
    1500:	02 97       	sbiw	r24, 0x02	; 2
    1502:	a1 09       	sbc	r26, r1
    1504:	b1 09       	sbc	r27, r1
    1506:	28 17       	cp	r18, r24
    1508:	39 07       	cpc	r19, r25
    150a:	4a 07       	cpc	r20, r26
    150c:	5b 07       	cpc	r21, r27
    150e:	b8 f4       	brcc	.+46     	; 0x153e <f_read+0x18c>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
    1510:	61 84       	ldd	r6, Z+9	; 0x09
    1512:	72 84       	ldd	r7, Z+10	; 0x0a
    1514:	b3 01       	movw	r22, r6
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__mulsi3>
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	f2 01       	movw	r30, r4
    1524:	87 a1       	ldd	r24, Z+39	; 0x27
    1526:	90 a5       	ldd	r25, Z+40	; 0x28
    1528:	a1 a5       	ldd	r26, Z+41	; 0x29
    152a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    152c:	28 0f       	add	r18, r24
    152e:	39 1f       	adc	r19, r25
    1530:	4a 1f       	adc	r20, r26
    1532:	5b 1f       	adc	r21, r27
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    1534:	21 15       	cp	r18, r1
    1536:	31 05       	cpc	r19, r1
    1538:	41 05       	cpc	r20, r1
    153a:	51 05       	cpc	r21, r1
    153c:	39 f4       	brne	.+14     	; 0x154c <f_read+0x19a>
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	f4 01       	movw	r30, r8
    1542:	87 87       	std	Z+15, r24	; 0x0f
    1544:	b2 e0       	ldi	r27, 0x02	; 2
    1546:	2b 2e       	mov	r2, r27
    1548:	31 2c       	mov	r3, r1
    154a:	a3 c0       	rjmp	.+326    	; 0x1692 <f_read+0x2e0>
			sect += csect;
    154c:	58 01       	movw	r10, r16
    154e:	cc 24       	eor	r12, r12
    1550:	dd 24       	eor	r13, r13
    1552:	a2 0e       	add	r10, r18
    1554:	b3 1e       	adc	r11, r19
    1556:	c4 1e       	adc	r12, r20
    1558:	d5 1e       	adc	r13, r21
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    155a:	ef 80       	ldd	r14, Y+7	; 0x07
    155c:	f8 84       	ldd	r15, Y+8	; 0x08
    155e:	ef 2c       	mov	r14, r15
    1560:	ff 24       	eor	r15, r15
    1562:	e6 94       	lsr	r14
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
    1564:	e1 14       	cp	r14, r1
    1566:	f1 04       	cpc	r15, r1
    1568:	c9 f0       	breq	.+50     	; 0x159c <f_read+0x1ea>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    156a:	c7 01       	movw	r24, r14
    156c:	80 0f       	add	r24, r16
    156e:	91 1f       	adc	r25, r17
    1570:	68 16       	cp	r6, r24
    1572:	79 06       	cpc	r7, r25
    1574:	18 f4       	brcc	.+6      	; 0x157c <f_read+0x1ca>
					cc = fs->csize - csect;
    1576:	73 01       	movw	r14, r6
    1578:	e0 1a       	sub	r14, r16
    157a:	f1 0a       	sbc	r15, r17
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    157c:	f2 01       	movw	r30, r4
    157e:	81 81       	ldd	r24, Z+1	; 0x01
    1580:	6b 81       	ldd	r22, Y+3	; 0x03
    1582:	7c 81       	ldd	r23, Y+4	; 0x04
    1584:	a6 01       	movw	r20, r12
    1586:	95 01       	movw	r18, r10
    1588:	87 01       	movw	r16, r14
    158a:	0e 94 76 15 	call	0x2aec	; 0x2aec <disk_read>
    158e:	89 2b       	or	r24, r25
    1590:	69 f5       	brne	.+90     	; 0x15ec <f_read+0x23a>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    1592:	87 01       	movw	r16, r14
    1594:	10 2f       	mov	r17, r16
    1596:	00 27       	eor	r16, r16
    1598:	11 0f       	add	r17, r17
    159a:	52 c0       	rjmp	.+164    	; 0x1640 <f_read+0x28e>
				continue;
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
    159c:	f4 01       	movw	r30, r8
    159e:	20 8d       	ldd	r18, Z+24	; 0x18
    15a0:	31 8d       	ldd	r19, Z+25	; 0x19
    15a2:	42 8d       	ldd	r20, Z+26	; 0x1a
    15a4:	53 8d       	ldd	r21, Z+27	; 0x1b
    15a6:	2a 15       	cp	r18, r10
    15a8:	3b 05       	cpc	r19, r11
    15aa:	4c 05       	cpc	r20, r12
    15ac:	5d 05       	cpc	r21, r13
    15ae:	29 f1       	breq	.+74     	; 0x15fa <f_read+0x248>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
    15b0:	86 85       	ldd	r24, Z+14	; 0x0e
    15b2:	87 ff       	sbrs	r24, 7
    15b4:	0e c0       	rjmp	.+28     	; 0x15d2 <f_read+0x220>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    15b6:	f2 01       	movw	r30, r4
    15b8:	81 81       	ldd	r24, Z+1	; 0x01
    15ba:	6d 81       	ldd	r22, Y+5	; 0x05
    15bc:	7e 81       	ldd	r23, Y+6	; 0x06
    15be:	01 e0       	ldi	r16, 0x01	; 1
    15c0:	10 e0       	ldi	r17, 0x00	; 0
    15c2:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <disk_write>
    15c6:	89 2b       	or	r24, r25
    15c8:	89 f4       	brne	.+34     	; 0x15ec <f_read+0x23a>
					fp->flag &= (BYTE)~FA_DIRTY;
    15ca:	f4 01       	movw	r30, r8
    15cc:	86 85       	ldd	r24, Z+14	; 0x0e
    15ce:	8f 77       	andi	r24, 0x7F	; 127
    15d0:	86 87       	std	Z+14, r24	; 0x0e
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    15d2:	e9 81       	ldd	r30, Y+1	; 0x01
    15d4:	fa 81       	ldd	r31, Y+2	; 0x02
    15d6:	81 81       	ldd	r24, Z+1	; 0x01
    15d8:	6d 81       	ldd	r22, Y+5	; 0x05
    15da:	7e 81       	ldd	r23, Y+6	; 0x06
    15dc:	a6 01       	movw	r20, r12
    15de:	95 01       	movw	r18, r10
    15e0:	01 e0       	ldi	r16, 0x01	; 1
    15e2:	10 e0       	ldi	r17, 0x00	; 0
    15e4:	0e 94 76 15 	call	0x2aec	; 0x2aec <disk_read>
    15e8:	89 2b       	or	r24, r25
    15ea:	39 f0       	breq	.+14     	; 0x15fa <f_read+0x248>
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	f4 01       	movw	r30, r8
    15f0:	87 87       	std	Z+15, r24	; 0x0f
    15f2:	e1 e0       	ldi	r30, 0x01	; 1
    15f4:	2e 2e       	mov	r2, r30
    15f6:	31 2c       	mov	r3, r1
    15f8:	4c c0       	rjmp	.+152    	; 0x1692 <f_read+0x2e0>
			}
#endif
			fp->sect = sect;
    15fa:	f4 01       	movw	r30, r8
    15fc:	a0 8e       	std	Z+24, r10	; 0x18
    15fe:	b1 8e       	std	Z+25, r11	; 0x19
    1600:	c2 8e       	std	Z+26, r12	; 0x1a
    1602:	d3 8e       	std	Z+27, r13	; 0x1b
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    1604:	f4 01       	movw	r30, r8
    1606:	20 89       	ldd	r18, Z+16	; 0x10
    1608:	31 89       	ldd	r19, Z+17	; 0x11
    160a:	42 89       	ldd	r20, Z+18	; 0x12
    160c:	53 89       	ldd	r21, Z+19	; 0x13
    160e:	c9 01       	movw	r24, r18
    1610:	91 70       	andi	r25, 0x01	; 1
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	72 e0       	ldi	r23, 0x02	; 2
    1616:	68 1b       	sub	r22, r24
    1618:	79 0b       	sbc	r23, r25
    161a:	0f 81       	ldd	r16, Y+7	; 0x07
    161c:	18 85       	ldd	r17, Y+8	; 0x08
    161e:	60 17       	cp	r22, r16
    1620:	71 07       	cpc	r23, r17
    1622:	08 f4       	brcc	.+2      	; 0x1626 <f_read+0x274>
    1624:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    1626:	f9 01       	movw	r30, r18
    1628:	f1 70       	andi	r31, 0x01	; 1
    162a:	b2 96       	adiw	r30, 0x22	; 34
    162c:	e8 0d       	add	r30, r8
    162e:	f9 1d       	adc	r31, r9
    1630:	ab 81       	ldd	r26, Y+3	; 0x03
    1632:	bc 81       	ldd	r27, Y+4	; 0x04
    1634:	b8 01       	movw	r22, r16

	if (cnt != 0) {
		do {
			*d++ = *s++;
    1636:	81 91       	ld	r24, Z+
    1638:	8d 93       	st	X+, r24
		} while (--cnt);
    163a:	61 50       	subi	r22, 0x01	; 1
    163c:	70 40       	sbci	r23, 0x00	; 0
    163e:	d9 f7       	brne	.-10     	; 0x1636 <f_read+0x284>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
    1640:	8f 81       	ldd	r24, Y+7	; 0x07
    1642:	98 85       	ldd	r25, Y+8	; 0x08
    1644:	80 1b       	sub	r24, r16
    1646:	91 0b       	sbc	r25, r17
    1648:	98 87       	std	Y+8, r25	; 0x08
    164a:	8f 83       	std	Y+7, r24	; 0x07
    164c:	e9 85       	ldd	r30, Y+9	; 0x09
    164e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	80 0f       	add	r24, r16
    1656:	91 1f       	adc	r25, r17
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
    165c:	6b 81       	ldd	r22, Y+3	; 0x03
    165e:	7c 81       	ldd	r23, Y+4	; 0x04
    1660:	60 0f       	add	r22, r16
    1662:	71 1f       	adc	r23, r17
    1664:	7c 83       	std	Y+4, r23	; 0x04
    1666:	6b 83       	std	Y+3, r22	; 0x03
    1668:	98 01       	movw	r18, r16
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	f4 01       	movw	r30, r8
    1670:	80 89       	ldd	r24, Z+16	; 0x10
    1672:	91 89       	ldd	r25, Z+17	; 0x11
    1674:	a2 89       	ldd	r26, Z+18	; 0x12
    1676:	b3 89       	ldd	r27, Z+19	; 0x13
    1678:	82 0f       	add	r24, r18
    167a:	93 1f       	adc	r25, r19
    167c:	a4 1f       	adc	r26, r20
    167e:	b5 1f       	adc	r27, r21
    1680:	80 8b       	std	Z+16, r24	; 0x10
    1682:	91 8b       	std	Z+17, r25	; 0x11
    1684:	a2 8b       	std	Z+18, r26	; 0x12
    1686:	b3 8b       	std	Z+19, r27	; 0x13
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
    1688:	6f 81       	ldd	r22, Y+7	; 0x07
    168a:	78 85       	ldd	r23, Y+8	; 0x08
    168c:	67 2b       	or	r22, r23
    168e:	09 f0       	breq	.+2      	; 0x1692 <f_read+0x2e0>
    1690:	dd ce       	rjmp	.-582    	; 0x144c <f_read+0x9a>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
    1692:	c1 01       	movw	r24, r2
    1694:	2c 96       	adiw	r28, 0x0c	; 12
    1696:	e2 e1       	ldi	r30, 0x12	; 18
    1698:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>

0000169c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    169c:	a2 e0       	ldi	r26, 0x02	; 2
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e4 e5       	ldi	r30, 0x54	; 84
    16a2:	fb e0       	ldi	r31, 0x0B	; 11
    16a4:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x10>
    16a8:	5c 01       	movw	r10, r24
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    16aa:	be 01       	movw	r22, r28
    16ac:	6f 5f       	subi	r22, 0xFF	; 255
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <validate>
    16b4:	6c 01       	movw	r12, r24
	if (res == FR_OK) {
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	09 f0       	breq	.+2      	; 0x16bc <f_sync+0x20>
    16ba:	e9 c0       	rjmp	.+466    	; 0x188e <f_sync+0x1f2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    16bc:	d5 01       	movw	r26, r10
    16be:	1e 96       	adiw	r26, 0x0e	; 14
    16c0:	8c 91       	ld	r24, X
    16c2:	1e 97       	sbiw	r26, 0x0e	; 14
    16c4:	86 ff       	sbrs	r24, 6
    16c6:	e3 c0       	rjmp	.+454    	; 0x188e <f_sync+0x1f2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
    16c8:	87 ff       	sbrs	r24, 7
    16ca:	1a c0       	rjmp	.+52     	; 0x1700 <f_sync+0x64>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    16cc:	e9 81       	ldd	r30, Y+1	; 0x01
    16ce:	fa 81       	ldd	r31, Y+2	; 0x02
    16d0:	b5 01       	movw	r22, r10
    16d2:	6e 5d       	subi	r22, 0xDE	; 222
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	58 96       	adiw	r26, 0x18	; 24
    16d8:	2d 91       	ld	r18, X+
    16da:	3d 91       	ld	r19, X+
    16dc:	4d 91       	ld	r20, X+
    16de:	5c 91       	ld	r21, X
    16e0:	5b 97       	sbiw	r26, 0x1b	; 27
    16e2:	81 81       	ldd	r24, Z+1	; 0x01
    16e4:	01 e0       	ldi	r16, 0x01	; 1
    16e6:	10 e0       	ldi	r17, 0x00	; 0
    16e8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <disk_write>
    16ec:	89 2b       	or	r24, r25
    16ee:	21 f0       	breq	.+8      	; 0x16f8 <f_sync+0x5c>
    16f0:	71 e0       	ldi	r23, 0x01	; 1
    16f2:	c7 2e       	mov	r12, r23
    16f4:	d1 2c       	mov	r13, r1
    16f6:	cb c0       	rjmp	.+406    	; 0x188e <f_sync+0x1f2>
				fp->flag &= (BYTE)~FA_DIRTY;
    16f8:	f5 01       	movw	r30, r10
    16fa:	86 85       	ldd	r24, Z+14	; 0x0e
    16fc:	8f 77       	andi	r24, 0x7F	; 127
    16fe:	86 87       	std	Z+14, r24	; 0x0e
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    1700:	d5 01       	movw	r26, r10
    1702:	5c 96       	adiw	r26, 0x1c	; 28
    1704:	4d 91       	ld	r20, X+
    1706:	5d 91       	ld	r21, X+
    1708:	6d 91       	ld	r22, X+
    170a:	7c 91       	ld	r23, X
    170c:	5f 97       	sbiw	r26, 0x1f	; 31
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
    1716:	6c 01       	movw	r12, r24
				if (res == FR_OK) {
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	09 f0       	breq	.+2      	; 0x171e <f_sync+0x82>
    171c:	b8 c0       	rjmp	.+368    	; 0x188e <f_sync+0x1f2>
					dir = fp->dir_ptr;
    171e:	f5 01       	movw	r30, r10
    1720:	00 a1       	ldd	r16, Z+32	; 0x20
    1722:	11 a1       	ldd	r17, Z+33	; 0x21
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    1724:	d8 01       	movw	r26, r16
    1726:	1b 96       	adiw	r26, 0x0b	; 11
    1728:	8c 91       	ld	r24, X
    172a:	1b 97       	sbiw	r26, 0x0b	; 11
    172c:	80 62       	ori	r24, 0x20	; 32
    172e:	1b 96       	adiw	r26, 0x0b	; 11
    1730:	8c 93       	st	X, r24
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    1732:	01 90       	ld	r0, Z+
    1734:	f0 81       	ld	r31, Z
    1736:	e0 2d       	mov	r30, r0
    1738:	d5 01       	movw	r26, r10
    173a:	16 96       	adiw	r26, 0x06	; 6
    173c:	2d 91       	ld	r18, X+
    173e:	3d 91       	ld	r19, X+
    1740:	4d 91       	ld	r20, X+
    1742:	5c 91       	ld	r21, X
    1744:	19 97       	sbiw	r26, 0x09	; 9
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1746:	d8 01       	movw	r26, r16
    1748:	5a 96       	adiw	r26, 0x1a	; 26
    174a:	2c 93       	st	X, r18
    174c:	5a 97       	sbiw	r26, 0x1a	; 26
	*ptr++ = (BYTE)val;
    174e:	5b 96       	adiw	r26, 0x1b	; 27
    1750:	3c 93       	st	X, r19
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    1752:	80 81       	ld	r24, Z
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	31 f4       	brne	.+12     	; 0x1764 <f_sync+0xc8>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    1758:	ca 01       	movw	r24, r20
    175a:	aa 27       	eor	r26, r26
    175c:	bb 27       	eor	r27, r27
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    175e:	f8 01       	movw	r30, r16
    1760:	84 8b       	std	Z+20, r24	; 0x14
	*ptr++ = (BYTE)val;
    1762:	95 8b       	std	Z+21, r25	; 0x15
				res = move_window(fs, fp->dir_sect);
				if (res == FR_OK) {
					dir = fp->dir_ptr;
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    1764:	d5 01       	movw	r26, r10
    1766:	1a 96       	adiw	r26, 0x0a	; 10
    1768:	4d 91       	ld	r20, X+
    176a:	5d 91       	ld	r21, X+
    176c:	6d 91       	ld	r22, X+
    176e:	7c 91       	ld	r23, X
    1770:	1d 97       	sbiw	r26, 0x0d	; 13
    1772:	c8 01       	movw	r24, r16
    1774:	4c 96       	adiw	r24, 0x1c	; 28
    1776:	0e 94 c2 00 	call	0x184	; 0x184 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
    177a:	c8 01       	movw	r24, r16
    177c:	46 96       	adiw	r24, 0x16	; 22
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	61 e2       	ldi	r22, 0x21	; 33
    1784:	7c e4       	ldi	r23, 0x4C	; 76
    1786:	0e 94 c2 00 	call	0x184	; 0x184 <st_dword>
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    178a:	f8 01       	movw	r30, r16
    178c:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    178e:	13 8a       	std	Z+19, r1	; 0x13
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    1790:	e9 80       	ldd	r14, Y+1	; 0x01
    1792:	fa 80       	ldd	r15, Y+2	; 0x02
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	d7 01       	movw	r26, r14
    1798:	13 96       	adiw	r26, 0x03	; 3
    179a:	8c 93       	st	X, r24
)
{
	FRESULT res;


	res = sync_window(fs);
    179c:	c7 01       	movw	r24, r14
    179e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <sync_window>
    17a2:	6c 01       	movw	r12, r24
	if (res == FR_OK) {
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	09 f0       	breq	.+2      	; 0x17aa <f_sync+0x10e>
    17a8:	6b c0       	rjmp	.+214    	; 0x1880 <f_sync+0x1e4>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    17aa:	f7 01       	movw	r30, r14
    17ac:	80 81       	ld	r24, Z
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <f_sync+0x118>
    17b2:	5a c0       	rjmp	.+180    	; 0x1868 <f_sync+0x1cc>
    17b4:	84 81       	ldd	r24, Z+4	; 0x04
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	09 f0       	breq	.+2      	; 0x17bc <f_sync+0x120>
    17ba:	56 c0       	rjmp	.+172    	; 0x1868 <f_sync+0x1cc>


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
    17bc:	87 01       	movw	r16, r14
    17be:	01 5d       	subi	r16, 0xD1	; 209
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	f8 01       	movw	r30, r16
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	92 e0       	ldi	r25, 0x02	; 2

	do {
		*d++ = (BYTE)val;
    17c8:	11 92       	st	Z+, r1
	} while (--cnt);
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	e9 f7       	brne	.-6      	; 0x17c8 <f_sync+0x12c>
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    17ce:	8d e2       	ldi	r24, 0x2D	; 45
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	e8 0e       	add	r14, r24
    17d4:	f9 1e       	adc	r15, r25
    17d6:	85 e5       	ldi	r24, 0x55	; 85
    17d8:	d7 01       	movw	r26, r14
    17da:	8d 93       	st	X+, r24
    17dc:	7d 01       	movw	r14, r26
	*ptr++ = (BYTE)val;
    17de:	8a ea       	ldi	r24, 0xAA	; 170
    17e0:	8c 93       	st	X, r24
    17e2:	e2 ed       	ldi	r30, 0xD2	; 210
    17e4:	fd ef       	ldi	r31, 0xFD	; 253
    17e6:	ee 0e       	add	r14, r30
    17e8:	ff 1e       	adc	r15, r31
	if (res == FR_OK) {
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
			st_word(fs->win + BS_55AA, 0xAA55);
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
    17ea:	c8 01       	movw	r24, r16
    17ec:	42 e5       	ldi	r20, 0x52	; 82
    17ee:	52 e5       	ldi	r21, 0x52	; 82
    17f0:	61 e6       	ldi	r22, 0x61	; 97
    17f2:	71 e4       	ldi	r23, 0x41	; 65
    17f4:	0e 94 c2 00 	call	0x184	; 0x184 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
    17f8:	c7 01       	movw	r24, r14
    17fa:	8d 5e       	subi	r24, 0xED	; 237
    17fc:	9d 4f       	sbci	r25, 0xFD	; 253
    17fe:	42 e7       	ldi	r20, 0x72	; 114
    1800:	52 e7       	ldi	r21, 0x72	; 114
    1802:	61 e4       	ldi	r22, 0x41	; 65
    1804:	71 e6       	ldi	r23, 0x61	; 97
    1806:	0e 94 c2 00 	call	0x184	; 0x184 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
    180a:	d7 01       	movw	r26, r14
    180c:	1f 96       	adiw	r26, 0x0f	; 15
    180e:	4d 91       	ld	r20, X+
    1810:	5d 91       	ld	r21, X+
    1812:	6d 91       	ld	r22, X+
    1814:	7c 91       	ld	r23, X
    1816:	52 97       	sbiw	r26, 0x12	; 18
    1818:	c7 01       	movw	r24, r14
    181a:	89 5e       	subi	r24, 0xE9	; 233
    181c:	9d 4f       	sbci	r25, 0xFD	; 253
    181e:	0e 94 c2 00 	call	0x184	; 0x184 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
    1822:	f7 01       	movw	r30, r14
    1824:	43 85       	ldd	r20, Z+11	; 0x0b
    1826:	54 85       	ldd	r21, Z+12	; 0x0c
    1828:	65 85       	ldd	r22, Z+13	; 0x0d
    182a:	76 85       	ldd	r23, Z+14	; 0x0e
    182c:	c7 01       	movw	r24, r14
    182e:	85 5e       	subi	r24, 0xE5	; 229
    1830:	9d 4f       	sbci	r25, 0xFD	; 253
    1832:	0e 94 c2 00 	call	0x184	; 0x184 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
    1836:	d7 01       	movw	r26, r14
    1838:	5b 96       	adiw	r26, 0x1b	; 27
    183a:	2d 91       	ld	r18, X+
    183c:	3d 91       	ld	r19, X+
    183e:	4d 91       	ld	r20, X+
    1840:	5c 91       	ld	r21, X
    1842:	5e 97       	sbiw	r26, 0x1e	; 30
    1844:	2f 5f       	subi	r18, 0xFF	; 255
    1846:	3f 4f       	sbci	r19, 0xFF	; 255
    1848:	4f 4f       	sbci	r20, 0xFF	; 255
    184a:	5f 4f       	sbci	r21, 0xFF	; 255
    184c:	f7 01       	movw	r30, r14
    184e:	23 a7       	std	Z+43, r18	; 0x2b
    1850:	34 a7       	std	Z+44, r19	; 0x2c
    1852:	45 a7       	std	Z+45, r20	; 0x2d
    1854:	56 a7       	std	Z+46, r21	; 0x2e
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    1856:	81 81       	ldd	r24, Z+1	; 0x01
    1858:	b8 01       	movw	r22, r16
    185a:	01 e0       	ldi	r16, 0x01	; 1
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <disk_write>
			fs->fsi_flag = 0;
    1862:	d7 01       	movw	r26, r14
    1864:	14 96       	adiw	r26, 0x04	; 4
    1866:	1c 92       	st	X, r1
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    1868:	f7 01       	movw	r30, r14
    186a:	81 81       	ldd	r24, Z+1	; 0x01
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <disk_ioctl>
    1876:	89 2b       	or	r24, r25
    1878:	19 f0       	breq	.+6      	; 0x1880 <f_sync+0x1e4>
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	c9 2e       	mov	r12, r25
    187e:	d1 2c       	mov	r13, r1
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
					res = sync_fs(fs);					/* Restore it to the directory */
					fp->flag &= (BYTE)~FA_MODIFIED;
    1880:	d5 01       	movw	r26, r10
    1882:	1e 96       	adiw	r26, 0x0e	; 14
    1884:	8c 91       	ld	r24, X
    1886:	1e 97       	sbiw	r26, 0x0e	; 14
    1888:	8f 7b       	andi	r24, 0xBF	; 191
    188a:	1e 96       	adiw	r26, 0x0e	; 14
    188c:	8c 93       	st	X, r24
			}
		}
	}

	LEAVE_FF(fs, res);
}
    188e:	c6 01       	movw	r24, r12
    1890:	22 96       	adiw	r28, 0x02	; 2
    1892:	ea e0       	ldi	r30, 0x0A	; 10
    1894:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x10>

00001898 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    1898:	a2 e0       	ldi	r26, 0x02	; 2
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e2 e5       	ldi	r30, 0x52	; 82
    189e:	fc e0       	ldi	r31, 0x0C	; 12
    18a0:	0c 94 f8 17 	jmp	0x2ff0	; 0x2ff0 <__prologue_saves__+0x1c>
    18a4:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    18a6:	0e 94 4e 0b 	call	0x169c	; 0x169c <f_sync>
    18aa:	9c 01       	movw	r18, r24
	if (res == FR_OK)
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	61 f4       	brne	.+24     	; 0x18c8 <f_close+0x30>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
    18b0:	c8 01       	movw	r24, r16
    18b2:	be 01       	movw	r22, r28
    18b4:	6f 5f       	subi	r22, 0xFF	; 255
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <validate>
    18bc:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	19 f4       	brne	.+6      	; 0x18c8 <f_close+0x30>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
    18c2:	f8 01       	movw	r30, r16
    18c4:	11 82       	std	Z+1, r1	; 0x01
    18c6:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    18c8:	c9 01       	movw	r24, r18
    18ca:	22 96       	adiw	r28, 0x02	; 2
    18cc:	e4 e0       	ldi	r30, 0x04	; 4
    18ce:	0c 94 14 18 	jmp	0x3028	; 0x3028 <__epilogue_restores__+0x1c>

000018d2 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
    18d2:	a8 e1       	ldi	r26, 0x18	; 24
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ef e6       	ldi	r30, 0x6F	; 111
    18d8:	fc e0       	ldi	r31, 0x0C	; 12
    18da:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x2>
    18de:	6b 01       	movw	r12, r22
    18e0:	b4 2e       	mov	r11, r20
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
    18e2:	db 01       	movw	r26, r22
    18e4:	1d 92       	st	X+, r1
    18e6:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
    18e8:	0e 94 08 01 	call	0x210	; 0x210 <get_ldnumber>
    18ec:	7c 01       	movw	r14, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    18ee:	97 ff       	sbrs	r25, 7
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <find_volume+0x26>
    18f2:	2b e0       	ldi	r18, 0x0B	; 11
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	ba c2       	rjmp	.+1396   	; 0x1e6c <find_volume+0x59a>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    18f8:	fc 01       	movw	r30, r24
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	ee 50       	subi	r30, 0x0E	; 14
    1900:	fe 4f       	sbci	r31, 0xFE	; 254
    1902:	00 81       	ld	r16, Z
    1904:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    1906:	01 15       	cp	r16, r1
    1908:	11 05       	cpc	r17, r1
    190a:	19 f4       	brne	.+6      	; 0x1912 <find_volume+0x40>
    190c:	2c e0       	ldi	r18, 0x0C	; 12
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	ad c2       	rjmp	.+1370   	; 0x1e6c <find_volume+0x59a>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
    1912:	f6 01       	movw	r30, r12
    1914:	11 83       	std	Z+1, r17	; 0x01
    1916:	00 83       	st	Z, r16

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    1918:	9e ef       	ldi	r25, 0xFE	; 254
    191a:	d9 2e       	mov	r13, r25
    191c:	db 20       	and	r13, r11
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    191e:	d8 01       	movw	r26, r16
    1920:	8c 91       	ld	r24, X
    1922:	88 23       	and	r24, r24
    1924:	61 f0       	breq	.+24     	; 0x193e <find_volume+0x6c>
		stat = disk_status(fs->pdrv);
    1926:	11 96       	adiw	r26, 0x01	; 1
    1928:	8c 91       	ld	r24, X
    192a:	0e 94 ba 14 	call	0x2974	; 0x2974 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    192e:	80 fd       	sbrc	r24, 0
    1930:	06 c0       	rjmp	.+12     	; 0x193e <find_volume+0x6c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    1932:	dd 20       	and	r13, r13
    1934:	09 f4       	brne	.+2      	; 0x1938 <find_volume+0x66>
    1936:	95 c2       	rjmp	.+1322   	; 0x1e62 <find_volume+0x590>
    1938:	82 fd       	sbrc	r24, 2
    193a:	90 c2       	rjmp	.+1312   	; 0x1e5c <find_volume+0x58a>
    193c:	92 c2       	rjmp	.+1316   	; 0x1e62 <find_volume+0x590>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
    193e:	f8 01       	movw	r30, r16
    1940:	10 82       	st	Z, r1
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    1942:	e1 82       	std	Z+1, r14	; 0x01
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
    1944:	8e 2d       	mov	r24, r14
    1946:	0e 94 c1 14 	call	0x2982	; 0x2982 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    194a:	80 ff       	sbrs	r24, 0
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <find_volume+0x82>
    194e:	23 e0       	ldi	r18, 0x03	; 3
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	8c c2       	rjmp	.+1304   	; 0x1e6c <find_volume+0x59a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    1954:	dd 20       	and	r13, r13
    1956:	11 f0       	breq	.+4      	; 0x195c <find_volume+0x8a>
    1958:	82 fd       	sbrc	r24, 2
    195a:	80 c2       	rjmp	.+1280   	; 0x1e5c <find_volume+0x58a>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
    195c:	c8 01       	movw	r24, r16
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	0e 94 9f 07 	call	0xf3e	; 0xf3e <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	29 f0       	breq	.+10     	; 0x1978 <find_volume+0xa6>
    196e:	1d 8a       	std	Y+21, r1	; 0x15
    1970:	1e 8a       	std	Y+22, r1	; 0x16
    1972:	1f 8a       	std	Y+23, r1	; 0x17
    1974:	18 8e       	std	Y+24, r1	; 0x18
    1976:	54 c0       	rjmp	.+168    	; 0x1a20 <find_volume+0x14e>
    1978:	6e 01       	movw	r12, r28
    197a:	08 94       	sec
    197c:	c1 1c       	adc	r12, r1
    197e:	d1 1c       	adc	r13, r1
    1980:	56 01       	movw	r10, r12
    1982:	8e eb       	ldi	r24, 0xBE	; 190
    1984:	e8 2e       	mov	r14, r24
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	f8 2e       	mov	r15, r24
		for (i = 0; i < 4; i++) {		/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
    198a:	2f e2       	ldi	r18, 0x2F	; 47
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	e2 0e       	add	r14, r18
    1990:	f3 1e       	adc	r15, r19
    1992:	f8 01       	movw	r30, r16
    1994:	ee 0d       	add	r30, r14
    1996:	ff 1d       	adc	r31, r15
    1998:	81 ed       	ldi	r24, 0xD1	; 209
    199a:	9f ef       	ldi	r25, 0xFF	; 255
    199c:	e8 0e       	add	r14, r24
    199e:	f9 1e       	adc	r15, r25
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    19a0:	84 81       	ldd	r24, Z+4	; 0x04
    19a2:	88 23       	and	r24, r24
    19a4:	29 f4       	brne	.+10     	; 0x19b0 <find_volume+0xde>
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	04 c0       	rjmp	.+8      	; 0x19b8 <find_volume+0xe6>
    19b0:	cf 01       	movw	r24, r30
    19b2:	08 96       	adiw	r24, 0x08	; 8
    19b4:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
    19b8:	d5 01       	movw	r26, r10
    19ba:	6d 93       	st	X+, r22
    19bc:	7d 93       	st	X+, r23
    19be:	8d 93       	st	X+, r24
    19c0:	9d 93       	st	X+, r25
    19c2:	5d 01       	movw	r10, r26
    19c4:	e0 e1       	ldi	r30, 0x10	; 16
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	ee 0e       	add	r14, r30
    19ca:	ff 1e       	adc	r15, r31

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {		/* Get partition offset */
    19cc:	fe ef       	ldi	r31, 0xFE	; 254
    19ce:	ef 16       	cp	r14, r31
    19d0:	f1 e0       	ldi	r31, 0x01	; 1
    19d2:	ff 06       	cpc	r15, r31
    19d4:	d1 f6       	brne	.-76     	; 0x198a <find_volume+0xb8>
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
		if (i != 0) i--;
		do {							/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
    19d6:	b1 e1       	ldi	r27, 0x11	; 17
    19d8:	eb 2e       	mov	r14, r27
    19da:	f1 2c       	mov	r15, r1
    19dc:	ec 0e       	add	r14, r28
    19de:	fd 1e       	adc	r15, r29
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
		if (i != 0) i--;
		do {							/* Find an FAT volume */
			bsect = br[i];
    19e0:	d6 01       	movw	r26, r12
    19e2:	8d 91       	ld	r24, X+
    19e4:	9d 91       	ld	r25, X+
    19e6:	0d 90       	ld	r0, X+
    19e8:	bc 91       	ld	r27, X
    19ea:	a0 2d       	mov	r26, r0
    19ec:	8d 8b       	std	Y+21, r24	; 0x15
    19ee:	9e 8b       	std	Y+22, r25	; 0x16
    19f0:	af 8b       	std	Y+23, r26	; 0x17
    19f2:	b8 8f       	std	Y+24, r27	; 0x18
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	a1 05       	cpc	r26, r1
    19f8:	b1 05       	cpc	r27, r1
    19fa:	11 f4       	brne	.+4      	; 0x1a00 <find_volume+0x12e>
    19fc:	83 e0       	ldi	r24, 0x03	; 3
    19fe:	09 c0       	rjmp	.+18     	; 0x1a12 <find_volume+0x140>
    1a00:	c8 01       	movw	r24, r16
    1a02:	4d 89       	ldd	r20, Y+21	; 0x15
    1a04:	5e 89       	ldd	r21, Y+22	; 0x16
    1a06:	6f 89       	ldd	r22, Y+23	; 0x17
    1a08:	78 8d       	ldd	r23, Y+24	; 0x18
    1a0a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	78 f0       	brcs	.+30     	; 0x1a30 <find_volume+0x15e>
    1a12:	e4 e0       	ldi	r30, 0x04	; 4
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	ce 0e       	add	r12, r30
    1a18:	df 1e       	adc	r13, r31
    1a1a:	ce 14       	cp	r12, r14
    1a1c:	df 04       	cpc	r13, r15
    1a1e:	01 f7       	brne	.-64     	; 0x19e0 <find_volume+0x10e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    1a20:	84 30       	cpi	r24, 0x04	; 4
    1a22:	19 f4       	brne	.+6      	; 0x1a2a <find_volume+0x158>
    1a24:	21 e0       	ldi	r18, 0x01	; 1
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	21 c2       	rjmp	.+1090   	; 0x1e6c <find_volume+0x59a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    1a2a:	82 30       	cpi	r24, 0x02	; 2
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <find_volume+0x15e>
    1a2e:	1c c2       	rjmp	.+1080   	; 0x1e68 <find_volume+0x596>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1a30:	d8 01       	movw	r26, r16
    1a32:	db 96       	adiw	r26, 0x3b	; 59
    1a34:	9c 91       	ld	r25, X
    1a36:	db 97       	sbiw	r26, 0x3b	; 59
    1a38:	80 e0       	ldi	r24, 0x00	; 0
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    1a3a:	da 96       	adiw	r26, 0x3a	; 58
    1a3c:	2c 91       	ld	r18, X
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	82 2b       	or	r24, r18
    1a42:	93 2b       	or	r25, r19
    1a44:	80 50       	subi	r24, 0x00	; 0
    1a46:	92 40       	sbci	r25, 0x02	; 2
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <find_volume+0x17a>
    1a4a:	0e c2       	rjmp	.+1052   	; 0x1e68 <find_volume+0x596>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1a4c:	0a 5b       	subi	r16, 0xBA	; 186
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	f8 01       	movw	r30, r16
    1a52:	90 81       	ld	r25, Z
    1a54:	80 e0       	ldi	r24, 0x00	; 0
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
    1a56:	d8 01       	movw	r26, r16
    1a58:	2e 91       	ld	r18, -X
    1a5a:	8d 01       	movw	r16, r26
    1a5c:	05 54       	subi	r16, 0x45	; 69
    1a5e:	10 40       	sbci	r17, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	82 2b       	or	r24, r18
    1a64:	93 2b       	or	r25, r19
    1a66:	2c 01       	movw	r4, r24
    1a68:	66 24       	eor	r6, r6
    1a6a:	77 24       	eor	r7, r7
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    1a6c:	41 14       	cp	r4, r1
    1a6e:	51 04       	cpc	r5, r1
    1a70:	61 04       	cpc	r6, r1
    1a72:	71 04       	cpc	r7, r1
    1a74:	39 f4       	brne	.+14     	; 0x1a84 <find_volume+0x1b2>
    1a76:	c8 01       	movw	r24, r16
    1a78:	8d 5a       	subi	r24, 0xAD	; 173
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
    1a80:	2b 01       	movw	r4, r22
    1a82:	3c 01       	movw	r6, r24
		fs->fsize = fasize;
    1a84:	f8 01       	movw	r30, r16
    1a86:	47 8a       	std	Z+23, r4	; 0x17
    1a88:	50 8e       	std	Z+24, r5	; 0x18
    1a8a:	61 8e       	std	Z+25, r6	; 0x19
    1a8c:	72 8e       	std	Z+26, r7	; 0x1a

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    1a8e:	37 ac       	ldd	r3, Z+63	; 0x3f
    1a90:	32 82       	std	Z+2, r3	; 0x02
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    1a92:	83 2d       	mov	r24, r3
    1a94:	81 50       	subi	r24, 0x01	; 1
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	08 f0       	brcs	.+2      	; 0x1a9c <find_volume+0x1ca>
    1a9a:	e6 c1       	rjmp	.+972    	; 0x1e68 <find_volume+0x596>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    1a9c:	84 ad       	ldd	r24, Z+60	; 0x3c
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	32 87       	std	Z+10, r19	; 0x0a
    1aa4:	21 87       	std	Z+9, r18	; 0x09
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1aa6:	21 15       	cp	r18, r1
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <find_volume+0x1dc>
    1aac:	dd c1       	rjmp	.+954    	; 0x1e68 <find_volume+0x596>
    1aae:	c9 01       	movw	r24, r18
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	82 23       	and	r24, r18
    1ab4:	93 23       	and	r25, r19
    1ab6:	89 2b       	or	r24, r25
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <find_volume+0x1ea>
    1aba:	d6 c1       	rjmp	.+940    	; 0x1e68 <find_volume+0x596>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1abc:	0f 5b       	subi	r16, 0xBF	; 191
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	d8 01       	movw	r26, r16
    1ac2:	9c 91       	ld	r25, X
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	22 91       	ld	r18, -Z
    1aca:	8f 01       	movw	r16, r30
    1acc:	00 54       	subi	r16, 0x40	; 64
    1ace:	10 40       	sbci	r17, 0x00	; 0
    1ad0:	c2 2e       	mov	r12, r18
    1ad2:	dd 24       	eor	r13, r13
    1ad4:	c8 2a       	or	r12, r24
    1ad6:	d9 2a       	or	r13, r25
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    1ad8:	d8 01       	movw	r26, r16
    1ada:	18 96       	adiw	r26, 0x08	; 8
    1adc:	dc 92       	st	X, r13
    1ade:	ce 92       	st	-X, r12
    1ae0:	17 97       	sbiw	r26, 0x07	; 7
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    1ae2:	c6 01       	movw	r24, r12
    1ae4:	8f 70       	andi	r24, 0x0F	; 15
    1ae6:	90 70       	andi	r25, 0x00	; 0
    1ae8:	89 2b       	or	r24, r25
    1aea:	09 f0       	breq	.+2      	; 0x1aee <find_volume+0x21c>
    1aec:	bd c1       	rjmp	.+890    	; 0x1e68 <find_volume+0x596>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1aee:	0d 5b       	subi	r16, 0xBD	; 189
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	f8 01       	movw	r30, r16
    1af4:	90 81       	ld	r25, Z
    1af6:	80 e0       	ldi	r24, 0x00	; 0
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
    1af8:	d8 01       	movw	r26, r16
    1afa:	2e 91       	ld	r18, -X
    1afc:	8d 01       	movw	r16, r26
    1afe:	02 54       	subi	r16, 0x42	; 66
    1b00:	10 40       	sbci	r17, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	82 2b       	or	r24, r18
    1b06:	93 2b       	or	r25, r19
    1b08:	4c 01       	movw	r8, r24
    1b0a:	aa 24       	eor	r10, r10
    1b0c:	bb 24       	eor	r11, r11
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    1b0e:	81 14       	cp	r8, r1
    1b10:	91 04       	cpc	r9, r1
    1b12:	a1 04       	cpc	r10, r1
    1b14:	b1 04       	cpc	r11, r1
    1b16:	39 f4       	brne	.+14     	; 0x1b26 <find_volume+0x254>
    1b18:	c8 01       	movw	r24, r16
    1b1a:	81 5b       	subi	r24, 0xB1	; 177
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
    1b22:	4b 01       	movw	r8, r22
    1b24:	5c 01       	movw	r10, r24
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1b26:	f8 01       	movw	r30, r16
    1b28:	96 ad       	ldd	r25, Z+62	; 0x3e
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	25 ad       	ldd	r18, Z+61	; 0x3d
    1b2e:	e2 2e       	mov	r14, r18
    1b30:	ff 24       	eor	r15, r15
    1b32:	e8 2a       	or	r14, r24
    1b34:	f9 2a       	or	r15, r25

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    1b36:	e1 14       	cp	r14, r1
    1b38:	f1 04       	cpc	r15, r1
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <find_volume+0x26c>
    1b3c:	95 c1       	rjmp	.+810    	; 0x1e68 <find_volume+0x596>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    1b3e:	23 2d       	mov	r18, r3
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	c3 01       	movw	r24, r6
    1b48:	b2 01       	movw	r22, r4
    1b4a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__mulsi3>
    1b4e:	69 8b       	std	Y+17, r22	; 0x11
    1b50:	7a 8b       	std	Y+18, r23	; 0x12
    1b52:	8b 8b       	std	Y+19, r24	; 0x13
    1b54:	9c 8b       	std	Y+20, r25	; 0x14

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    1b56:	27 01       	movw	r4, r14
    1b58:	66 24       	eor	r6, r6
    1b5a:	77 24       	eor	r7, r7
    1b5c:	a4 e0       	ldi	r26, 0x04	; 4
    1b5e:	d6 94       	lsr	r13
    1b60:	c7 94       	ror	r12
    1b62:	aa 95       	dec	r26
    1b64:	e1 f7       	brne	.-8      	; 0x1b5e <find_volume+0x28c>
    1b66:	ee 24       	eor	r14, r14
    1b68:	ff 24       	eor	r15, r15
    1b6a:	c4 0c       	add	r12, r4
    1b6c:	d5 1c       	adc	r13, r5
    1b6e:	e6 1c       	adc	r14, r6
    1b70:	f7 1c       	adc	r15, r7
    1b72:	c6 0e       	add	r12, r22
    1b74:	d7 1e       	adc	r13, r23
    1b76:	e8 1e       	adc	r14, r24
    1b78:	f9 1e       	adc	r15, r25
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    1b7a:	8c 14       	cp	r8, r12
    1b7c:	9d 04       	cpc	r9, r13
    1b7e:	ae 04       	cpc	r10, r14
    1b80:	bf 04       	cpc	r11, r15
    1b82:	08 f4       	brcc	.+2      	; 0x1b86 <find_volume+0x2b4>
    1b84:	71 c1       	rjmp	.+738    	; 0x1e68 <find_volume+0x596>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    1b86:	8c 18       	sub	r8, r12
    1b88:	9d 08       	sbc	r9, r13
    1b8a:	ae 08       	sbc	r10, r14
    1b8c:	bf 08       	sbc	r11, r15
    1b8e:	d8 01       	movw	r26, r16
    1b90:	19 96       	adiw	r26, 0x09	; 9
    1b92:	2d 91       	ld	r18, X+
    1b94:	3c 91       	ld	r19, X
    1b96:	1a 97       	sbiw	r26, 0x0a	; 10
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	c5 01       	movw	r24, r10
    1b9e:	b4 01       	movw	r22, r8
    1ba0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <__udivmodsi4>
    1ba4:	c9 01       	movw	r24, r18
    1ba6:	da 01       	movw	r26, r20
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	a1 05       	cpc	r26, r1
    1bac:	b1 05       	cpc	r27, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <find_volume+0x2e0>
    1bb0:	5b c1       	rjmp	.+694    	; 0x1e68 <find_volume+0x596>
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    1bb2:	86 3f       	cpi	r24, 0xF6	; 246
    1bb4:	ef ef       	ldi	r30, 0xFF	; 255
    1bb6:	9e 07       	cpc	r25, r30
    1bb8:	ef ef       	ldi	r30, 0xFF	; 255
    1bba:	ae 07       	cpc	r26, r30
    1bbc:	ef e0       	ldi	r30, 0x0F	; 15
    1bbe:	be 07       	cpc	r27, r30
    1bc0:	08 f0       	brcs	.+2      	; 0x1bc4 <find_volume+0x2f2>
    1bc2:	52 c1       	rjmp	.+676    	; 0x1e68 <find_volume+0x596>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    1bc4:	86 3f       	cpi	r24, 0xF6	; 246
    1bc6:	ff ef       	ldi	r31, 0xFF	; 255
    1bc8:	9f 07       	cpc	r25, r31
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	af 07       	cpc	r26, r31
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	bf 07       	cpc	r27, r31
    1bd2:	18 f0       	brcs	.+6      	; 0x1bda <find_volume+0x308>
    1bd4:	f3 e0       	ldi	r31, 0x03	; 3
    1bd6:	3f 2e       	mov	r3, r31
    1bd8:	0d c0       	rjmp	.+26     	; 0x1bf4 <find_volume+0x322>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    1bda:	86 3f       	cpi	r24, 0xF6	; 246
    1bdc:	2f e0       	ldi	r18, 0x0F	; 15
    1bde:	92 07       	cpc	r25, r18
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	a2 07       	cpc	r26, r18
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	b2 07       	cpc	r27, r18
    1be8:	18 f4       	brcc	.+6      	; 0x1bf0 <find_volume+0x31e>
    1bea:	33 24       	eor	r3, r3
    1bec:	33 94       	inc	r3
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <find_volume+0x322>
    1bf0:	e2 e0       	ldi	r30, 0x02	; 2
    1bf2:	3e 2e       	mov	r3, r30
		if (fmt == 0) return FR_NO_FILESYSTEM;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    1bf4:	72 e0       	ldi	r23, 0x02	; 2
    1bf6:	87 2e       	mov	r8, r23
    1bf8:	91 2c       	mov	r9, r1
    1bfa:	a1 2c       	mov	r10, r1
    1bfc:	b1 2c       	mov	r11, r1
    1bfe:	88 0e       	add	r8, r24
    1c00:	99 1e       	adc	r9, r25
    1c02:	aa 1e       	adc	r10, r26
    1c04:	bb 1e       	adc	r11, r27
    1c06:	d8 01       	movw	r26, r16
    1c08:	53 96       	adiw	r26, 0x13	; 19
    1c0a:	8d 92       	st	X+, r8
    1c0c:	9d 92       	st	X+, r9
    1c0e:	ad 92       	st	X+, r10
    1c10:	bc 92       	st	X, r11
    1c12:	56 97       	sbiw	r26, 0x16	; 22
		fs->volbase = bsect;							/* Volume start sector */
    1c14:	8d 89       	ldd	r24, Y+21	; 0x15
    1c16:	9e 89       	ldd	r25, Y+22	; 0x16
    1c18:	af 89       	ldd	r26, Y+23	; 0x17
    1c1a:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	83 8f       	std	Z+27, r24	; 0x1b
    1c20:	94 8f       	std	Z+28, r25	; 0x1c
    1c22:	a5 8f       	std	Z+29, r26	; 0x1d
    1c24:	b6 8f       	std	Z+30, r27	; 0x1e
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    1c26:	9c 01       	movw	r18, r24
    1c28:	ad 01       	movw	r20, r26
    1c2a:	24 0d       	add	r18, r4
    1c2c:	35 1d       	adc	r19, r5
    1c2e:	46 1d       	adc	r20, r6
    1c30:	57 1d       	adc	r21, r7
    1c32:	d8 01       	movw	r26, r16
    1c34:	5f 96       	adiw	r26, 0x1f	; 31
    1c36:	2d 93       	st	X+, r18
    1c38:	3d 93       	st	X+, r19
    1c3a:	4d 93       	st	X+, r20
    1c3c:	5c 93       	st	X, r21
    1c3e:	92 97       	sbiw	r26, 0x22	; 34
		fs->database = bsect + sysect;					/* Data start sector */
    1c40:	8d 89       	ldd	r24, Y+21	; 0x15
    1c42:	9e 89       	ldd	r25, Y+22	; 0x16
    1c44:	af 89       	ldd	r26, Y+23	; 0x17
    1c46:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c48:	c8 0e       	add	r12, r24
    1c4a:	d9 1e       	adc	r13, r25
    1c4c:	ea 1e       	adc	r14, r26
    1c4e:	fb 1e       	adc	r15, r27
    1c50:	d8 01       	movw	r26, r16
    1c52:	97 96       	adiw	r26, 0x27	; 39
    1c54:	cd 92       	st	X+, r12
    1c56:	dd 92       	st	X+, r13
    1c58:	ed 92       	st	X+, r14
    1c5a:	fc 92       	st	X, r15
    1c5c:	9a 97       	sbiw	r26, 0x2a	; 42
		if (fmt == FS_FAT32) {
    1c5e:	b3 e0       	ldi	r27, 0x03	; 3
    1c60:	3b 16       	cp	r3, r27
    1c62:	61 f5       	brne	.+88     	; 0x1cbc <find_volume+0x3ea>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1c64:	06 5a       	subi	r16, 0xA6	; 166
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	f8 01       	movw	r30, r16
    1c6a:	90 81       	ld	r25, Z
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
		fs->volbase = bsect;							/* Volume start sector */
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
		fs->database = bsect + sysect;					/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    1c6e:	d8 01       	movw	r26, r16
    1c70:	2e 91       	ld	r18, -X
    1c72:	8d 01       	movw	r16, r26
    1c74:	09 55       	subi	r16, 0x59	; 89
    1c76:	10 40       	sbci	r17, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	82 2b       	or	r24, r18
    1c7c:	93 2b       	or	r25, r19
    1c7e:	89 2b       	or	r24, r25
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <find_volume+0x3b2>
    1c82:	f2 c0       	rjmp	.+484    	; 0x1e68 <find_volume+0x596>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    1c84:	f8 01       	movw	r30, r16
    1c86:	87 81       	ldd	r24, Z+7	; 0x07
    1c88:	90 85       	ldd	r25, Z+8	; 0x08
    1c8a:	89 2b       	or	r24, r25
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <find_volume+0x3be>
    1c8e:	ec c0       	rjmp	.+472    	; 0x1e68 <find_volume+0x596>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    1c90:	c8 01       	movw	r24, r16
    1c92:	85 5a       	subi	r24, 0xA5	; 165
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
    1c9a:	d8 01       	movw	r26, r16
    1c9c:	93 96       	adiw	r26, 0x23	; 35
    1c9e:	6d 93       	st	X+, r22
    1ca0:	7d 93       	st	X+, r23
    1ca2:	8d 93       	st	X+, r24
    1ca4:	9c 93       	st	X, r25
    1ca6:	96 97       	sbiw	r26, 0x26	; 38
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    1ca8:	a5 01       	movw	r20, r10
    1caa:	94 01       	movw	r18, r8
    1cac:	62 e0       	ldi	r22, 0x02	; 2
    1cae:	22 0f       	add	r18, r18
    1cb0:	33 1f       	adc	r19, r19
    1cb2:	44 1f       	adc	r20, r20
    1cb4:	55 1f       	adc	r21, r21
    1cb6:	6a 95       	dec	r22
    1cb8:	d1 f7       	brne	.-12     	; 0x1cae <find_volume+0x3dc>
    1cba:	37 c0       	rjmp	.+110    	; 0x1d2a <find_volume+0x458>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	87 81       	ldd	r24, Z+7	; 0x07
    1cc0:	90 85       	ldd	r25, Z+8	; 0x08
    1cc2:	89 2b       	or	r24, r25
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <find_volume+0x3f6>
    1cc6:	d0 c0       	rjmp	.+416    	; 0x1e68 <find_volume+0x596>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    1cc8:	89 89       	ldd	r24, Y+17	; 0x11
    1cca:	9a 89       	ldd	r25, Y+18	; 0x12
    1ccc:	ab 89       	ldd	r26, Y+19	; 0x13
    1cce:	bc 89       	ldd	r27, Y+20	; 0x14
    1cd0:	28 0f       	add	r18, r24
    1cd2:	39 1f       	adc	r19, r25
    1cd4:	4a 1f       	adc	r20, r26
    1cd6:	5b 1f       	adc	r21, r27
    1cd8:	d8 01       	movw	r26, r16
    1cda:	93 96       	adiw	r26, 0x23	; 35
    1cdc:	2d 93       	st	X+, r18
    1cde:	3d 93       	st	X+, r19
    1ce0:	4d 93       	st	X+, r20
    1ce2:	5c 93       	st	X, r21
    1ce4:	96 97       	sbiw	r26, 0x26	; 38
    1ce6:	d5 01       	movw	r26, r10
    1ce8:	c4 01       	movw	r24, r8
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	aa 1f       	adc	r26, r26
    1cf0:	bb 1f       	adc	r27, r27
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
    1cf2:	e2 e0       	ldi	r30, 0x02	; 2
    1cf4:	3e 16       	cp	r3, r30
    1cf6:	19 f4       	brne	.+6      	; 0x1cfe <find_volume+0x42c>
    1cf8:	9c 01       	movw	r18, r24
    1cfa:	ad 01       	movw	r20, r26
    1cfc:	16 c0       	rjmp	.+44     	; 0x1d2a <find_volume+0x458>
    1cfe:	9c 01       	movw	r18, r24
    1d00:	ad 01       	movw	r20, r26
    1d02:	28 0d       	add	r18, r8
    1d04:	39 1d       	adc	r19, r9
    1d06:	4a 1d       	adc	r20, r10
    1d08:	5b 1d       	adc	r21, r11
    1d0a:	56 95       	lsr	r21
    1d0c:	47 95       	ror	r20
    1d0e:	37 95       	ror	r19
    1d10:	27 95       	ror	r18
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	88 22       	and	r8, r24
    1d1c:	99 22       	and	r9, r25
    1d1e:	aa 22       	and	r10, r26
    1d20:	bb 22       	and	r11, r27
    1d22:	28 0d       	add	r18, r8
    1d24:	39 1d       	adc	r19, r9
    1d26:	4a 1d       	adc	r20, r10
    1d28:	5b 1d       	adc	r21, r11
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    1d2a:	21 50       	subi	r18, 0x01	; 1
    1d2c:	3e 4f       	sbci	r19, 0xFE	; 254
    1d2e:	4f 4f       	sbci	r20, 0xFF	; 255
    1d30:	5f 4f       	sbci	r21, 0xFF	; 255
    1d32:	e9 e0       	ldi	r30, 0x09	; 9
    1d34:	56 95       	lsr	r21
    1d36:	47 95       	ror	r20
    1d38:	37 95       	ror	r19
    1d3a:	27 95       	ror	r18
    1d3c:	ea 95       	dec	r30
    1d3e:	d1 f7       	brne	.-12     	; 0x1d34 <find_volume+0x462>
    1d40:	f8 01       	movw	r30, r16
    1d42:	87 89       	ldd	r24, Z+23	; 0x17
    1d44:	90 8d       	ldd	r25, Z+24	; 0x18
    1d46:	a1 8d       	ldd	r26, Z+25	; 0x19
    1d48:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1d4a:	82 17       	cp	r24, r18
    1d4c:	93 07       	cpc	r25, r19
    1d4e:	a4 07       	cpc	r26, r20
    1d50:	b5 07       	cpc	r27, r21
    1d52:	08 f4       	brcc	.+2      	; 0x1d56 <find_volume+0x484>
    1d54:	89 c0       	rjmp	.+274    	; 0x1e68 <find_volume+0x596>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    1d56:	8f ef       	ldi	r24, 0xFF	; 255
    1d58:	9f ef       	ldi	r25, 0xFF	; 255
    1d5a:	af ef       	ldi	r26, 0xFF	; 255
    1d5c:	bf ef       	ldi	r27, 0xFF	; 255
    1d5e:	87 87       	std	Z+15, r24	; 0x0f
    1d60:	90 8b       	std	Z+16, r25	; 0x10
    1d62:	a1 8b       	std	Z+17, r26	; 0x11
    1d64:	b2 8b       	std	Z+18, r27	; 0x12
    1d66:	83 87       	std	Z+11, r24	; 0x0b
    1d68:	94 87       	std	Z+12, r25	; 0x0c
    1d6a:	a5 87       	std	Z+13, r26	; 0x0d
    1d6c:	b6 87       	std	Z+14, r27	; 0x0e
		fs->fsi_flag = 0x80;
    1d6e:	80 e8       	ldi	r24, 0x80	; 128
    1d70:	84 83       	std	Z+4, r24	; 0x04
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    1d72:	f3 e0       	ldi	r31, 0x03	; 3
    1d74:	3f 16       	cp	r3, r31
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <find_volume+0x4a8>
    1d78:	61 c0       	rjmp	.+194    	; 0x1e3c <find_volume+0x56a>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1d7a:	00 5a       	subi	r16, 0xA0	; 160
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	d8 01       	movw	r26, r16
    1d80:	9c 91       	ld	r25, X
    1d82:	80 e0       	ldi	r24, 0x00	; 0
#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
		fs->fsi_flag = 0x80;
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    1d84:	f8 01       	movw	r30, r16
    1d86:	22 91       	ld	r18, -Z
    1d88:	8f 01       	movw	r16, r30
    1d8a:	0f 55       	subi	r16, 0x5F	; 95
    1d8c:	10 40       	sbci	r17, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	82 2b       	or	r24, r18
    1d92:	93 2b       	or	r25, r19
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <find_volume+0x4c8>
    1d98:	51 c0       	rjmp	.+162    	; 0x1e3c <find_volume+0x56a>
    1d9a:	8d 89       	ldd	r24, Y+21	; 0x15
    1d9c:	9e 89       	ldd	r25, Y+22	; 0x16
    1d9e:	af 89       	ldd	r26, Y+23	; 0x17
    1da0:	b8 8d       	ldd	r27, Y+24	; 0x18
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	a1 1d       	adc	r26, r1
    1da6:	b1 1d       	adc	r27, r1
    1da8:	8d 8b       	std	Y+21, r24	; 0x15
    1daa:	9e 8b       	std	Y+22, r25	; 0x16
    1dac:	af 8b       	std	Y+23, r26	; 0x17
    1dae:	b8 8f       	std	Y+24, r27	; 0x18
    1db0:	c8 01       	movw	r24, r16
    1db2:	4d 89       	ldd	r20, Y+21	; 0x15
    1db4:	5e 89       	ldd	r21, Y+22	; 0x16
    1db6:	6f 89       	ldd	r22, Y+23	; 0x17
    1db8:	78 8d       	ldd	r23, Y+24	; 0x18
    1dba:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
    1dbe:	89 2b       	or	r24, r25
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <find_volume+0x4f2>
    1dc2:	3c c0       	rjmp	.+120    	; 0x1e3c <find_volume+0x56a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
    1dc4:	d8 01       	movw	r26, r16
    1dc6:	14 96       	adiw	r26, 0x04	; 4
    1dc8:	1c 92       	st	X, r1
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1dca:	02 5d       	subi	r16, 0xD2	; 210
    1dcc:	1d 4f       	sbci	r17, 0xFD	; 253
    1dce:	f8 01       	movw	r30, r16
    1dd0:	90 81       	ld	r25, Z
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    1dd4:	d8 01       	movw	r26, r16
    1dd6:	2e 91       	ld	r18, -X
    1dd8:	8d 01       	movw	r16, r26
    1dda:	0d 52       	subi	r16, 0x2D	; 45
    1ddc:	12 40       	sbci	r17, 0x02	; 2
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	82 2b       	or	r24, r18
    1de2:	93 2b       	or	r25, r19
    1de4:	85 55       	subi	r24, 0x55	; 85
    1de6:	9a 4a       	sbci	r25, 0xAA	; 170
    1de8:	49 f5       	brne	.+82     	; 0x1e3c <find_volume+0x56a>
    1dea:	c8 01       	movw	r24, r16
    1dec:	8f 96       	adiw	r24, 0x2f	; 47
    1dee:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
    1df2:	62 55       	subi	r22, 0x52	; 82
    1df4:	72 45       	sbci	r23, 0x52	; 82
    1df6:	81 46       	sbci	r24, 0x61	; 97
    1df8:	91 44       	sbci	r25, 0x41	; 65
    1dfa:	01 f5       	brne	.+64     	; 0x1e3c <find_volume+0x56a>
    1dfc:	c8 01       	movw	r24, r16
    1dfe:	8d 5e       	subi	r24, 0xED	; 237
    1e00:	9d 4f       	sbci	r25, 0xFD	; 253
    1e02:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
    1e06:	62 57       	subi	r22, 0x72	; 114
    1e08:	72 47       	sbci	r23, 0x72	; 114
    1e0a:	81 44       	sbci	r24, 0x41	; 65
    1e0c:	91 46       	sbci	r25, 0x61	; 97
    1e0e:	b1 f4       	brne	.+44     	; 0x1e3c <find_volume+0x56a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    1e10:	c8 01       	movw	r24, r16
    1e12:	89 5e       	subi	r24, 0xE9	; 233
    1e14:	9d 4f       	sbci	r25, 0xFD	; 253
    1e16:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
    1e1a:	d8 01       	movw	r26, r16
    1e1c:	1f 96       	adiw	r26, 0x0f	; 15
    1e1e:	6d 93       	st	X+, r22
    1e20:	7d 93       	st	X+, r23
    1e22:	8d 93       	st	X+, r24
    1e24:	9c 93       	st	X, r25
    1e26:	52 97       	sbiw	r26, 0x12	; 18
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    1e28:	c8 01       	movw	r24, r16
    1e2a:	85 5e       	subi	r24, 0xE5	; 229
    1e2c:	9d 4f       	sbci	r25, 0xFD	; 253
    1e2e:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
    1e32:	f8 01       	movw	r30, r16
    1e34:	63 87       	std	Z+11, r22	; 0x0b
    1e36:	74 87       	std	Z+12, r23	; 0x0c
    1e38:	85 87       	std	Z+13, r24	; 0x0d
    1e3a:	96 87       	std	Z+14, r25	; 0x0e
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
    1e3c:	d8 01       	movw	r26, r16
    1e3e:	3c 92       	st	X, r3
	fs->id = ++Fsid;		/* Volume mount ID */
    1e40:	80 91 f4 01 	lds	r24, 0x01F4
    1e44:	90 91 f5 01 	lds	r25, 0x01F5
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	90 93 f5 01 	sts	0x01F5, r25
    1e4e:	80 93 f4 01 	sts	0x01F4, r24
    1e52:	16 96       	adiw	r26, 0x06	; 6
    1e54:	9c 93       	st	X, r25
    1e56:	8e 93       	st	-X, r24
    1e58:	15 97       	sbiw	r26, 0x05	; 5
    1e5a:	03 c0       	rjmp	.+6      	; 0x1e62 <find_volume+0x590>
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
    1e5c:	2a e0       	ldi	r18, 0x0A	; 10
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	05 c0       	rjmp	.+10     	; 0x1e6c <find_volume+0x59a>
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <find_volume+0x59a>
    1e68:	2d e0       	ldi	r18, 0x0D	; 13
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
}
    1e6c:	c9 01       	movw	r24, r18
    1e6e:	68 96       	adiw	r28, 0x18	; 24
    1e70:	e1 e1       	ldi	r30, 0x11	; 17
    1e72:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x2>

00001e76 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1e76:	a9 e3       	ldi	r26, 0x39	; 57
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e1 e4       	ldi	r30, 0x41	; 65
    1e7c:	ff e0       	ldi	r31, 0x0F	; 15
    1e7e:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
    1e82:	1c 01       	movw	r2, r24
    1e84:	7c a7       	std	Y+44, r23	; 0x2c
    1e86:	6b a7       	std	Y+43, r22	; 0x2b
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	21 f4       	brne	.+8      	; 0x1e94 <f_open+0x1e>
    1e8c:	69 e0       	ldi	r22, 0x09	; 9
    1e8e:	c6 2e       	mov	r12, r22
    1e90:	d1 2c       	mov	r13, r1
    1e92:	51 c3       	rjmp	.+1698   	; 0x2536 <f_open+0x6c0>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    1e94:	4f 73       	andi	r20, 0x3F	; 63
    1e96:	4d a7       	std	Y+45, r20	; 0x2d
	res = find_volume(&path, &fs, mode);
    1e98:	ce 01       	movw	r24, r28
    1e9a:	8b 96       	adiw	r24, 0x2b	; 43
    1e9c:	be 01       	movw	r22, r28
    1e9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <find_volume>
	if (res == FR_OK) {
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <f_open+0x36>
    1eaa:	7b c3       	rjmp	.+1782   	; 0x25a2 <f_open+0x72c>
		dj.obj.fs = fs;
    1eac:	c9 80       	ldd	r12, Y+1	; 0x01
    1eae:	da 80       	ldd	r13, Y+2	; 0x02
    1eb0:	dc 82       	std	Y+4, r13	; 0x04
    1eb2:	cb 82       	std	Y+3, r12	; 0x03
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    1eb4:	eb a4       	ldd	r14, Y+43	; 0x2b
    1eb6:	fc a4       	ldd	r15, Y+44	; 0x2c
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <f_open+0x4a>
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    1eba:	08 94       	sec
    1ebc:	e1 1c       	adc	r14, r1
    1ebe:	f1 1c       	adc	r15, r1
    1ec0:	d7 01       	movw	r26, r14
    1ec2:	8c 91       	ld	r24, X
    1ec4:	8f 32       	cpi	r24, 0x2F	; 47
    1ec6:	c9 f3       	breq	.-14     	; 0x1eba <f_open+0x44>
    1ec8:	8c 35       	cpi	r24, 0x5C	; 92
    1eca:	b9 f3       	breq	.-18     	; 0x1eba <f_open+0x44>
		dp->obj.sclust = 0;					/* Start from root directory */
    1ecc:	19 86       	std	Y+9, r1	; 0x09
    1ece:	1a 86       	std	Y+10, r1	; 0x0a
    1ed0:	1b 86       	std	Y+11, r1	; 0x0b
    1ed2:	1c 86       	std	Y+12, r1	; 0x0c
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1ed4:	8c 91       	ld	r24, X
    1ed6:	80 32       	cpi	r24, 0x20	; 32
    1ed8:	78 f4       	brcc	.+30     	; 0x1ef8 <f_open+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
    1eda:	80 e8       	ldi	r24, 0x80	; 128
    1edc:	8a a7       	std	Y+42, r24	; 0x2a
		res = dir_sdi(dp, 0);
    1ede:	ce 01       	movw	r24, r28
    1ee0:	03 96       	adiw	r24, 0x03	; 3
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <dir_sdi>
    1eee:	6c 01       	movw	r12, r24
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <f_open+0x80>
    1ef4:	d4 c0       	rjmp	.+424    	; 0x209e <f_open+0x228>
    1ef6:	d8 c0       	rjmp	.+432    	; 0x20a8 <f_open+0x232>
    1ef8:	5f e1       	ldi	r21, 0x1F	; 31
    1efa:	85 2e       	mov	r8, r21
    1efc:	91 2c       	mov	r9, r1
    1efe:	8c 0e       	add	r8, r28
    1f00:	9d 1e       	adc	r9, r29
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
	} while (--cnt);
    1f02:	4a e2       	ldi	r20, 0x2A	; 42
    1f04:	44 2e       	mov	r4, r20
    1f06:	51 2c       	mov	r5, r1
    1f08:	4c 0e       	add	r4, r28
    1f0a:	5d 1e       	adc	r5, r29
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1f0c:	33 e0       	ldi	r19, 0x03	; 3
    1f0e:	63 2e       	mov	r6, r19
    1f10:	71 2c       	mov	r7, r1
    1f12:	6c 0e       	add	r6, r28
    1f14:	7d 1e       	adc	r7, r29
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
    1f16:	f4 01       	movw	r30, r8
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1f18:	b0 e2       	ldi	r27, 0x20	; 32
    1f1a:	b1 93       	st	Z+, r27
	} while (--cnt);
    1f1c:	e4 15       	cp	r30, r4
    1f1e:	f5 05       	cpc	r31, r5
    1f20:	d9 f7       	brne	.-10     	; 0x1f18 <f_open+0xa2>
    1f22:	a8 e0       	ldi	r26, 0x08	; 8
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	00 e0       	ldi	r16, 0x00	; 0
    1f28:	10 e0       	ldi	r17, 0x00	; 0
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
    1f2e:	04 c0       	rjmp	.+8      	; 0x1f38 <f_open+0xc2>
    1f30:	ab e0       	ldi	r26, 0x0B	; 11
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	48 e0       	ldi	r20, 0x08	; 8
    1f36:	50 e0       	ldi	r21, 0x00	; 0
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
    1f38:	f7 01       	movw	r30, r14
    1f3a:	e0 0f       	add	r30, r16
    1f3c:	f1 1f       	adc	r31, r17
    1f3e:	20 81       	ld	r18, Z
    1f40:	0f 5f       	subi	r16, 0xFF	; 255
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c <= ' ') break; 			/* Break if end of the path name */
    1f44:	21 32       	cpi	r18, 0x21	; 33
    1f46:	08 f4       	brcc	.+2      	; 0x1f4a <f_open+0xd4>
    1f48:	41 c0       	rjmp	.+130    	; 0x1fcc <f_open+0x156>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    1f4a:	2f 32       	cpi	r18, 0x2F	; 47
    1f4c:	11 f0       	breq	.+4      	; 0x1f52 <f_open+0xdc>
    1f4e:	2c 35       	cpi	r18, 0x5C	; 92
    1f50:	69 f4       	brne	.+26     	; 0x1f6c <f_open+0xf6>
    1f52:	f7 01       	movw	r30, r14
    1f54:	e0 0f       	add	r30, r16
    1f56:	f1 1f       	adc	r31, r17
    1f58:	03 c0       	rjmp	.+6      	; 0x1f60 <f_open+0xea>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    1f5a:	0f 5f       	subi	r16, 0xFF	; 255
    1f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5e:	31 96       	adiw	r30, 0x01	; 1
    1f60:	80 81       	ld	r24, Z
    1f62:	8f 32       	cpi	r24, 0x2F	; 47
    1f64:	d1 f3       	breq	.-12     	; 0x1f5a <f_open+0xe4>
    1f66:	8c 35       	cpi	r24, 0x5C	; 92
    1f68:	c1 f3       	breq	.-16     	; 0x1f5a <f_open+0xe4>
    1f6a:	30 c0       	rjmp	.+96     	; 0x1fcc <f_open+0x156>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    1f6c:	2e 32       	cpi	r18, 0x2E	; 46
    1f6e:	19 f0       	breq	.+6      	; 0x1f76 <f_open+0x100>
    1f70:	4a 17       	cp	r20, r26
    1f72:	5b 07       	cpc	r21, r27
    1f74:	30 f0       	brcs	.+12     	; 0x1f82 <f_open+0x10c>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1f76:	1b 97       	sbiw	r26, 0x0b	; 11
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <f_open+0x106>
    1f7a:	0a c3       	rjmp	.+1556   	; 0x2590 <f_open+0x71a>
    1f7c:	2e 32       	cpi	r18, 0x2E	; 46
    1f7e:	c1 f2       	breq	.-80     	; 0x1f30 <f_open+0xba>
    1f80:	07 c3       	rjmp	.+1550   	; 0x2590 <f_open+0x71a>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
    1f82:	27 ff       	sbrs	r18, 7
    1f84:	07 c0       	rjmp	.+14     	; 0x1f94 <f_open+0x11e>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    1f86:	e2 2f       	mov	r30, r18
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	ef 77       	andi	r30, 0x7F	; 127
    1f8c:	f0 70       	andi	r31, 0x00	; 0
    1f8e:	ea 5c       	subi	r30, 0xCA	; 202
    1f90:	fe 4f       	sbci	r31, 0xFE	; 254
    1f92:	20 81       	ld	r18, Z
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1f94:	62 2f       	mov	r22, r18
    1f96:	70 e0       	ldi	r23, 0x00	; 0
    1f98:	e7 e2       	ldi	r30, 0x27	; 39
    1f9a:	f1 e0       	ldi	r31, 0x01	; 1
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <f_open+0x12a>


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
    1f9e:	31 96       	adiw	r30, 0x01	; 1
    1fa0:	80 81       	ld	r24, Z
    1fa2:	88 23       	and	r24, r24
    1fa4:	39 f0       	breq	.+14     	; 0x1fb4 <f_open+0x13e>
    1fa6:	99 27       	eor	r25, r25
    1fa8:	87 fd       	sbrc	r24, 7
    1faa:	90 95       	com	r25
    1fac:	86 17       	cp	r24, r22
    1fae:	97 07       	cpc	r25, r23
    1fb0:	b1 f7       	brne	.-20     	; 0x1f9e <f_open+0x128>
    1fb2:	ee c2       	rjmp	.+1500   	; 0x2590 <f_open+0x71a>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    1fb4:	82 2f       	mov	r24, r18
    1fb6:	81 56       	subi	r24, 0x61	; 97
    1fb8:	8a 31       	cpi	r24, 0x1A	; 26
    1fba:	08 f4       	brcc	.+2      	; 0x1fbe <f_open+0x148>
    1fbc:	20 52       	subi	r18, 0x20	; 32
			sfn[i++] = c;
    1fbe:	f4 01       	movw	r30, r8
    1fc0:	e4 0f       	add	r30, r20
    1fc2:	f5 1f       	adc	r31, r21
    1fc4:	20 83       	st	Z, r18
    1fc6:	4f 5f       	subi	r20, 0xFF	; 255
    1fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fca:	b6 cf       	rjmp	.-148    	; 0x1f38 <f_open+0xc2>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    1fcc:	45 2b       	or	r20, r21
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <f_open+0x15c>
    1fd0:	df c2       	rjmp	.+1470   	; 0x2590 <f_open+0x71a>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    1fd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fd4:	85 3e       	cpi	r24, 0xE5	; 229
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <f_open+0x166>
    1fd8:	e5 e0       	ldi	r30, 0x05	; 5
    1fda:	ef 8f       	std	Y+31, r30	; 0x1f
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    1fdc:	21 32       	cpi	r18, 0x21	; 33
    1fde:	10 f0       	brcs	.+4      	; 0x1fe4 <f_open+0x16e>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <f_open+0x170>
    1fe4:	84 e0       	ldi	r24, 0x04	; 4
    1fe6:	8a a7       	std	Y+42, r24	; 0x2a
static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    1fe8:	ab 80       	ldd	r10, Y+3	; 0x03
    1fea:	bc 80       	ldd	r11, Y+4	; 0x04
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1fec:	c3 01       	movw	r24, r6
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <dir_sdi>
    1ffa:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	71 f5       	brne	.+92     	; 0x205c <f_open+0x1e6>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    2000:	49 8d       	ldd	r20, Y+25	; 0x19
    2002:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2004:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2006:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2008:	c5 01       	movw	r24, r10
    200a:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
    200e:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	21 f5       	brne	.+72     	; 0x205c <f_open+0x1e6>
		c = dp->dir[DIR_Name];
    2014:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2016:	fe 8d       	ldd	r31, Y+30	; 0x1e
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2018:	80 81       	ld	r24, Z
    201a:	88 23       	and	r24, r24
    201c:	19 f4       	brne	.+6      	; 0x2024 <f_open+0x1ae>
    201e:	44 e0       	ldi	r20, 0x04	; 4
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	1c c0       	rjmp	.+56     	; 0x205c <f_open+0x1e6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    2024:	83 85       	ldd	r24, Z+11	; 0x0b
    2026:	8f 73       	andi	r24, 0x3F	; 63
    2028:	8f 83       	std	Y+7, r24	; 0x07
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    202a:	83 85       	ldd	r24, Z+11	; 0x0b
    202c:	83 fd       	sbrc	r24, 3
    202e:	10 c0       	rjmp	.+32     	; 0x2050 <f_open+0x1da>
    2030:	df 01       	movw	r26, r30
    2032:	f4 01       	movw	r30, r8
{
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    2034:	8d 91       	ld	r24, X+
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	81 91       	ld	r24, Z+
    203c:	28 1b       	sub	r18, r24
    203e:	31 09       	sbc	r19, r1
	} while (--cnt && r == 0);
    2040:	e4 15       	cp	r30, r4
    2042:	f5 05       	cpc	r31, r5
    2044:	19 f0       	breq	.+6      	; 0x204c <f_open+0x1d6>
    2046:	23 2b       	or	r18, r19
    2048:	a9 f3       	breq	.-22     	; 0x2034 <f_open+0x1be>
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <f_open+0x1da>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    204c:	23 2b       	or	r18, r19
    204e:	31 f0       	breq	.+12     	; 0x205c <f_open+0x1e6>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    2050:	c3 01       	movw	r24, r6
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <dir_next>
    205a:	cf cf       	rjmp	.-98     	; 0x1ffa <f_open+0x184>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    205c:	8a a5       	ldd	r24, Y+42	; 0x2a
			if (res != FR_OK) {				/* Failed to find the object */
    205e:	41 15       	cp	r20, r1
    2060:	51 05       	cpc	r21, r1
    2062:	39 f0       	breq	.+14     	; 0x2072 <f_open+0x1fc>
    2064:	6a 01       	movw	r12, r20
				if (res == FR_NO_FILE) {	/* Object is not found */
    2066:	44 30       	cpi	r20, 0x04	; 4
    2068:	51 05       	cpc	r21, r1
    206a:	f1 f4       	brne	.+60     	; 0x20a8 <f_open+0x232>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    206c:	82 ff       	sbrs	r24, 2
    206e:	8c c2       	rjmp	.+1304   	; 0x2588 <f_open+0x712>
    2070:	1b c0       	rjmp	.+54     	; 0x20a8 <f_open+0x232>
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    2072:	82 fd       	sbrc	r24, 2
    2074:	14 c0       	rjmp	.+40     	; 0x209e <f_open+0x228>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    2076:	8f 81       	ldd	r24, Y+7	; 0x07
    2078:	84 ff       	sbrs	r24, 4
    207a:	86 c2       	rjmp	.+1292   	; 0x2588 <f_open+0x712>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
    207c:	e0 0e       	add	r14, r16
    207e:	f1 1e       	adc	r15, r17
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    2080:	69 89       	ldd	r22, Y+17	; 0x11
    2082:	7a 89       	ldd	r23, Y+18	; 0x12
    2084:	71 70       	andi	r23, 0x01	; 1
    2086:	61 5d       	subi	r22, 0xD1	; 209
    2088:	7f 4f       	sbci	r23, 0xFF	; 255
    208a:	6c 0d       	add	r22, r12
    208c:	7d 1d       	adc	r23, r13
    208e:	c6 01       	movw	r24, r12
    2090:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ld_clust>
    2094:	69 87       	std	Y+9, r22	; 0x09
    2096:	7a 87       	std	Y+10, r23	; 0x0a
    2098:	8b 87       	std	Y+11, r24	; 0x0b
    209a:	9c 87       	std	Y+12, r25	; 0x0c
    209c:	3c cf       	rjmp	.-392    	; 0x1f16 <f_open+0xa0>
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    209e:	8a a5       	ldd	r24, Y+42	; 0x2a
    20a0:	87 fd       	sbrc	r24, 7
    20a2:	76 c2       	rjmp	.+1260   	; 0x2590 <f_open+0x71a>
    20a4:	cc 24       	eor	r12, r12
    20a6:	dd 24       	eor	r13, r13
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    20a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	c9 01       	movw	r24, r18
    20b0:	8c 71       	andi	r24, 0x1C	; 28
    20b2:	90 70       	andi	r25, 0x00	; 0
    20b4:	89 2b       	or	r24, r25
    20b6:	09 f4       	brne	.+2      	; 0x20ba <f_open+0x244>
    20b8:	10 c1       	rjmp	.+544    	; 0x22da <f_open+0x464>
			if (res != FR_OK) {					/* No file, create new */
    20ba:	c1 14       	cp	r12, r1
    20bc:	d1 04       	cpc	r13, r1
    20be:	09 f4       	brne	.+2      	; 0x20c2 <f_open+0x24c>
    20c0:	4f c0       	rjmp	.+158    	; 0x2160 <f_open+0x2ea>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    20c2:	94 e0       	ldi	r25, 0x04	; 4
    20c4:	c9 16       	cp	r12, r25
    20c6:	d1 04       	cpc	r13, r1
    20c8:	09 f0       	breq	.+2      	; 0x20cc <f_open+0x256>
    20ca:	66 c2       	rjmp	.+1228   	; 0x2598 <f_open+0x722>
static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    20cc:	eb 80       	ldd	r14, Y+3	; 0x03
    20ce:	fc 80       	ldd	r15, Y+4	; 0x04
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;


	res = dir_sdi(dp, 0);
    20d0:	8e 01       	movw	r16, r28
    20d2:	0d 5f       	subi	r16, 0xFD	; 253
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	c8 01       	movw	r24, r16
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <dir_sdi>
    20e4:	6c 01       	movw	r12, r24
	if (res == FR_OK) {
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	d9 f4       	brne	.+54     	; 0x2120 <f_open+0x2aa>
		n = 0;
		do {
			res = move_window(fs, dp->sect);
    20ea:	49 8d       	ldd	r20, Y+25	; 0x19
    20ec:	5a 8d       	ldd	r21, Y+26	; 0x1a
    20ee:	6b 8d       	ldd	r22, Y+27	; 0x1b
    20f0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    20f2:	c7 01       	movw	r24, r14
    20f4:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
    20f8:	6c 01       	movw	r12, r24
			if (res != FR_OK) break;
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	89 f4       	brne	.+34     	; 0x2120 <f_open+0x2aa>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
    20fe:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2100:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2102:	e0 81       	ld	r30, Z
    2104:	e5 3e       	cpi	r30, 0xE5	; 229
    2106:	09 f4       	brne	.+2      	; 0x210a <f_open+0x294>
    2108:	4e c2       	rjmp	.+1180   	; 0x25a6 <f_open+0x730>
    210a:	ee 23       	and	r30, r30
    210c:	09 f4       	brne	.+2      	; 0x2110 <f_open+0x29a>
    210e:	4b c2       	rjmp	.+1174   	; 0x25a6 <f_open+0x730>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);
    2110:	c8 01       	movw	r24, r16
    2112:	61 e0       	ldi	r22, 0x01	; 1
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <dir_next>
    211a:	6c 01       	movw	r12, r24
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	29 f3       	breq	.-54     	; 0x20ea <f_open+0x274>
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    2120:	a4 e0       	ldi	r26, 0x04	; 4
    2122:	ca 16       	cp	r12, r26
    2124:	d1 04       	cpc	r13, r1
    2126:	09 f0       	breq	.+2      	; 0x212a <f_open+0x2b4>
    2128:	37 c2       	rjmp	.+1134   	; 0x2598 <f_open+0x722>
    212a:	26 c2       	rjmp	.+1100   	; 0x2578 <f_open+0x702>

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
    212c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    212e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2130:	80 e2       	ldi	r24, 0x20	; 32
    2132:	90 e0       	ldi	r25, 0x00	; 0
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    2134:	11 92       	st	Z+, r1
	} while (--cnt);
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	e9 f7       	brne	.-6      	; 0x2134 <f_open+0x2be>
	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    213a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    213c:	be 8d       	ldd	r27, Y+30	; 0x1e
    213e:	fe 01       	movw	r30, r28
    2140:	7f 96       	adiw	r30, 0x1f	; 31
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
		do {
			*d++ = *s++;
		} while (--cnt);
    2142:	9e 01       	movw	r18, r28
    2144:	26 5d       	subi	r18, 0xD6	; 214
    2146:	3f 4f       	sbci	r19, 0xFF	; 255
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
		do {
			*d++ = *s++;
    2148:	81 91       	ld	r24, Z+
    214a:	8d 93       	st	X+, r24
		} while (--cnt);
    214c:	e2 17       	cp	r30, r18
    214e:	f3 07       	cpc	r31, r19
    2150:	d9 f7       	brne	.-10     	; 0x2148 <f_open+0x2d2>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	f7 01       	movw	r30, r14
    2156:	83 83       	std	Z+3, r24	; 0x03
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    2158:	fd a5       	ldd	r31, Y+45	; 0x2d
    215a:	f8 60       	ori	r31, 0x08	; 8
    215c:	fd a7       	std	Y+45, r31	; 0x2d
    215e:	06 c0       	rjmp	.+12     	; 0x216c <f_open+0x2f6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    2160:	8f 81       	ldd	r24, Y+7	; 0x07
    2162:	81 71       	andi	r24, 0x11	; 17
    2164:	09 f0       	breq	.+2      	; 0x2168 <f_open+0x2f2>
    2166:	08 c2       	rjmp	.+1040   	; 0x2578 <f_open+0x702>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    2168:	22 fd       	sbrc	r18, 2
    216a:	ea c1       	rjmp	.+980    	; 0x2540 <f_open+0x6ca>
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    216c:	8d a5       	ldd	r24, Y+45	; 0x2d
    216e:	83 ff       	sbrs	r24, 3
    2170:	c3 c0       	rjmp	.+390    	; 0x22f8 <f_open+0x482>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    2172:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2174:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	b8 01       	movw	r22, r16
    217c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ld_clust>
    2180:	2b 01       	movw	r4, r22
    2182:	3c 01       	movw	r6, r24
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
    2184:	c8 01       	movw	r24, r16
    2186:	0e 96       	adiw	r24, 0x0e	; 14
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	61 e2       	ldi	r22, 0x21	; 33
    218e:	7c e4       	ldi	r23, 0x4C	; 76
    2190:	0e 94 c2 00 	call	0x184	; 0x184 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    2194:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2196:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2198:	80 e2       	ldi	r24, 0x20	; 32
    219a:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    219c:	e9 81       	ldd	r30, Y+1	; 0x01
    219e:	fa 81       	ldd	r31, Y+2	; 0x02
    21a0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    21a2:	be 8d       	ldd	r27, Y+30	; 0x1e
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    21a4:	5a 96       	adiw	r26, 0x1a	; 26
    21a6:	1c 92       	st	X, r1
    21a8:	5a 97       	sbiw	r26, 0x1a	; 26
	*ptr++ = (BYTE)val;
    21aa:	5b 96       	adiw	r26, 0x1b	; 27
    21ac:	1c 92       	st	X, r1
    21ae:	5b 97       	sbiw	r26, 0x1b	; 27
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    21b0:	80 81       	ld	r24, Z
    21b2:	83 30       	cpi	r24, 0x03	; 3
    21b4:	29 f4       	brne	.+10     	; 0x21c0 <f_open+0x34a>
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    21b6:	54 96       	adiw	r26, 0x14	; 20
    21b8:	1c 92       	st	X, r1
    21ba:	54 97       	sbiw	r26, 0x14	; 20
	*ptr++ = (BYTE)val;
    21bc:	55 96       	adiw	r26, 0x15	; 21
    21be:	1c 92       	st	X, r1
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
    21c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21c4:	4c 96       	adiw	r24, 0x1c	; 28
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	0e 94 c2 00 	call	0x184	; 0x184 <st_dword>
					fs->wflag = 1;
    21d2:	e9 81       	ldd	r30, Y+1	; 0x01
    21d4:	fa 81       	ldd	r31, Y+2	; 0x02
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	83 83       	std	Z+3, r24	; 0x03
					if (cl != 0) {						/* Remove the cluster chain if exist */
    21da:	41 14       	cp	r4, r1
    21dc:	51 04       	cpc	r5, r1
    21de:	61 04       	cpc	r6, r1
    21e0:	71 04       	cpc	r7, r1
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <f_open+0x370>
    21e4:	89 c0       	rjmp	.+274    	; 0x22f8 <f_open+0x482>
						dw = fs->winsect;
    21e6:	e9 81       	ldd	r30, Y+1	; 0x01
    21e8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ea:	83 a5       	ldd	r24, Z+43	; 0x2b
    21ec:	94 a5       	ldd	r25, Z+44	; 0x2c
    21ee:	a5 a5       	ldd	r26, Z+45	; 0x2d
    21f0:	b6 a5       	ldd	r27, Z+46	; 0x2e
    21f2:	88 ab       	std	Y+48, r24	; 0x30
    21f4:	99 ab       	std	Y+49, r25	; 0x31
    21f6:	aa ab       	std	Y+50, r26	; 0x32
    21f8:	bb ab       	std	Y+51, r27	; 0x33
	DWORD pclst			/* Previous cluster of clst (0:entire chain) */
)
{
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
    21fa:	eb 80       	ldd	r14, Y+3	; 0x03
    21fc:	fc 80       	ldd	r15, Y+4	; 0x04
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    21fe:	92 e0       	ldi	r25, 0x02	; 2
    2200:	49 16       	cp	r4, r25
    2202:	51 04       	cpc	r5, r1
    2204:	61 04       	cpc	r6, r1
    2206:	71 04       	cpc	r7, r1
    2208:	08 f4       	brcc	.+2      	; 0x220c <f_open+0x396>
    220a:	ba c1       	rjmp	.+884    	; 0x2580 <f_open+0x70a>
    220c:	f7 01       	movw	r30, r14
    220e:	83 89       	ldd	r24, Z+19	; 0x13
    2210:	94 89       	ldd	r25, Z+20	; 0x14
    2212:	a5 89       	ldd	r26, Z+21	; 0x15
    2214:	b6 89       	ldd	r27, Z+22	; 0x16
    2216:	48 16       	cp	r4, r24
    2218:	59 06       	cpc	r5, r25
    221a:	6a 06       	cpc	r6, r26
    221c:	7b 06       	cpc	r7, r27
    221e:	08 f0       	brcs	.+2      	; 0x2222 <f_open+0x3ac>
    2220:	af c1       	rjmp	.+862    	; 0x2580 <f_open+0x70a>
    2222:	62 01       	movw	r12, r4
    2224:	83 01       	movw	r16, r6
		if (res != FR_OK) return res;
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
    2226:	ce 01       	movw	r24, r28
    2228:	03 96       	adiw	r24, 0x03	; 3
    222a:	a6 01       	movw	r20, r12
    222c:	b8 01       	movw	r22, r16
    222e:	0e 94 04 02 	call	0x408	; 0x408 <get_fat>
    2232:	4b 01       	movw	r8, r22
    2234:	5c 01       	movw	r10, r24
		if (nxt == 0) break;				/* Empty cluster? */
    2236:	61 15       	cp	r22, r1
    2238:	71 05       	cpc	r23, r1
    223a:	81 05       	cpc	r24, r1
    223c:	91 05       	cpc	r25, r1
    223e:	09 f4       	brne	.+2      	; 0x2242 <f_open+0x3cc>
    2240:	83 c1       	rjmp	.+774    	; 0x2548 <f_open+0x6d2>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    2242:	61 30       	cpi	r22, 0x01	; 1
    2244:	71 05       	cpc	r23, r1
    2246:	81 05       	cpc	r24, r1
    2248:	91 05       	cpc	r25, r1
    224a:	09 f4       	brne	.+2      	; 0x224e <f_open+0x3d8>
    224c:	99 c1       	rjmp	.+818    	; 0x2580 <f_open+0x70a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    224e:	8f ef       	ldi	r24, 0xFF	; 255
    2250:	88 16       	cp	r8, r24
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	98 06       	cpc	r9, r24
    2256:	8f ef       	ldi	r24, 0xFF	; 255
    2258:	a8 06       	cpc	r10, r24
    225a:	8f ef       	ldi	r24, 0xFF	; 255
    225c:	b8 06       	cpc	r11, r24
    225e:	09 f4       	brne	.+2      	; 0x2262 <f_open+0x3ec>
    2260:	61 c1       	rjmp	.+706    	; 0x2524 <f_open+0x6ae>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    2262:	c7 01       	movw	r24, r14
    2264:	a6 01       	movw	r20, r12
    2266:	b8 01       	movw	r22, r16
    2268:	00 e0       	ldi	r16, 0x00	; 0
    226a:	10 e0       	ldi	r17, 0x00	; 0
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	0e 94 cf 03 	call	0x79e	; 0x79e <put_fat>
    2274:	6c 01       	movw	r12, r24
			if (res != FR_OK) return res;
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	09 f0       	breq	.+2      	; 0x227c <f_open+0x406>
    227a:	57 c1       	rjmp	.+686    	; 0x252a <f_open+0x6b4>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    227c:	d7 01       	movw	r26, r14
    227e:	1f 96       	adiw	r26, 0x0f	; 15
    2280:	2d 91       	ld	r18, X+
    2282:	3d 91       	ld	r19, X+
    2284:	4d 91       	ld	r20, X+
    2286:	5c 91       	ld	r21, X
    2288:	52 97       	sbiw	r26, 0x12	; 18
    228a:	53 96       	adiw	r26, 0x13	; 19
    228c:	8d 91       	ld	r24, X+
    228e:	9d 91       	ld	r25, X+
    2290:	0d 90       	ld	r0, X+
    2292:	bc 91       	ld	r27, X
    2294:	a0 2d       	mov	r26, r0
    2296:	02 97       	sbiw	r24, 0x02	; 2
    2298:	a1 09       	sbc	r26, r1
    229a:	b1 09       	sbc	r27, r1
    229c:	28 17       	cp	r18, r24
    229e:	39 07       	cpc	r19, r25
    22a0:	4a 07       	cpc	r20, r26
    22a2:	5b 07       	cpc	r21, r27
    22a4:	60 f4       	brcc	.+24     	; 0x22be <f_open+0x448>
			fs->free_clst++;
    22a6:	2f 5f       	subi	r18, 0xFF	; 255
    22a8:	3f 4f       	sbci	r19, 0xFF	; 255
    22aa:	4f 4f       	sbci	r20, 0xFF	; 255
    22ac:	5f 4f       	sbci	r21, 0xFF	; 255
    22ae:	f7 01       	movw	r30, r14
    22b0:	27 87       	std	Z+15, r18	; 0x0f
    22b2:	30 8b       	std	Z+16, r19	; 0x10
    22b4:	41 8b       	std	Z+17, r20	; 0x11
    22b6:	52 8b       	std	Z+18, r21	; 0x12
			fs->fsi_flag |= 1;
    22b8:	84 81       	ldd	r24, Z+4	; 0x04
    22ba:	81 60       	ori	r24, 0x01	; 1
    22bc:	84 83       	std	Z+4, r24	; 0x04
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    22be:	f7 01       	movw	r30, r14
    22c0:	83 89       	ldd	r24, Z+19	; 0x13
    22c2:	94 89       	ldd	r25, Z+20	; 0x14
    22c4:	a5 89       	ldd	r26, Z+21	; 0x15
    22c6:	b6 89       	ldd	r27, Z+22	; 0x16
    22c8:	88 16       	cp	r8, r24
    22ca:	99 06       	cpc	r9, r25
    22cc:	aa 06       	cpc	r10, r26
    22ce:	bb 06       	cpc	r11, r27
    22d0:	08 f0       	brcs	.+2      	; 0x22d4 <f_open+0x45e>
    22d2:	3a c1       	rjmp	.+628    	; 0x2548 <f_open+0x6d2>
    22d4:	64 01       	movw	r12, r8
    22d6:	85 01       	movw	r16, r10
    22d8:	a6 cf       	rjmp	.-180    	; 0x2226 <f_open+0x3b0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
    22da:	c1 14       	cp	r12, r1
    22dc:	d1 04       	cpc	r13, r1
    22de:	09 f0       	breq	.+2      	; 0x22e2 <f_open+0x46c>
    22e0:	5b c1       	rjmp	.+694    	; 0x2598 <f_open+0x722>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    22e2:	8f 81       	ldd	r24, Y+7	; 0x07
    22e4:	84 ff       	sbrs	r24, 4
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <f_open+0x47a>
    22e8:	24 e0       	ldi	r18, 0x04	; 4
    22ea:	c2 2e       	mov	r12, r18
    22ec:	d1 2c       	mov	r13, r1
    22ee:	1d c1       	rjmp	.+570    	; 0x252a <f_open+0x6b4>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    22f0:	21 ff       	sbrs	r18, 1
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <f_open+0x482>
    22f4:	80 fd       	sbrc	r24, 0
    22f6:	40 c1       	rjmp	.+640    	; 0x2578 <f_open+0x702>
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    22f8:	fd a5       	ldd	r31, Y+45	; 0x2d
    22fa:	f3 ff       	sbrs	r31, 3
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <f_open+0x48c>
    22fe:	f0 64       	ori	r31, 0x40	; 64
    2300:	fd a7       	std	Y+45, r31	; 0x2d
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    2302:	e9 80       	ldd	r14, Y+1	; 0x01
    2304:	fa 80       	ldd	r15, Y+2	; 0x02
    2306:	f7 01       	movw	r30, r14
    2308:	83 a5       	ldd	r24, Z+43	; 0x2b
    230a:	94 a5       	ldd	r25, Z+44	; 0x2c
    230c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    230e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2310:	f1 01       	movw	r30, r2
    2312:	84 8f       	std	Z+28, r24	; 0x1c
    2314:	95 8f       	std	Z+29, r25	; 0x1d
    2316:	a6 8f       	std	Z+30, r26	; 0x1e
    2318:	b7 8f       	std	Z+31, r27	; 0x1f
			fp->dir_ptr = dj.dir;
    231a:	0d 8d       	ldd	r16, Y+29	; 0x1d
    231c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    231e:	11 a3       	std	Z+33, r17	; 0x21
    2320:	00 a3       	std	Z+32, r16	; 0x20
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    2322:	c7 01       	movw	r24, r14
    2324:	b8 01       	movw	r22, r16
    2326:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ld_clust>
    232a:	d1 01       	movw	r26, r2
    232c:	16 96       	adiw	r26, 0x06	; 6
    232e:	6d 93       	st	X+, r22
    2330:	7d 93       	st	X+, r23
    2332:	8d 93       	st	X+, r24
    2334:	9c 93       	st	X, r25
    2336:	19 97       	sbiw	r26, 0x09	; 9
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    2338:	c8 01       	movw	r24, r16
    233a:	4c 96       	adiw	r24, 0x1c	; 28
    233c:	0e 94 96 00 	call	0x12c	; 0x12c <ld_dword>
    2340:	f1 01       	movw	r30, r2
    2342:	62 87       	std	Z+10, r22	; 0x0a
    2344:	73 87       	std	Z+11, r23	; 0x0b
    2346:	84 87       	std	Z+12, r24	; 0x0c
    2348:	95 87       	std	Z+13, r25	; 0x0d
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    234a:	f1 82       	std	Z+1, r15	; 0x01
    234c:	e0 82       	st	Z, r14
			fp->obj.id = fs->id;
    234e:	d7 01       	movw	r26, r14
    2350:	15 96       	adiw	r26, 0x05	; 5
    2352:	8d 91       	ld	r24, X+
    2354:	9c 91       	ld	r25, X
    2356:	16 97       	sbiw	r26, 0x06	; 6
    2358:	93 83       	std	Z+3, r25	; 0x03
    235a:	82 83       	std	Z+2, r24	; 0x02
			fp->flag = mode;		/* Set file access mode */
    235c:	bd a5       	ldd	r27, Y+45	; 0x2d
    235e:	b6 87       	std	Z+14, r27	; 0x0e
			fp->err = 0;			/* Clear error flag */
    2360:	17 86       	std	Z+15, r1	; 0x0f
			fp->sect = 0;			/* Invalidate current data sector */
    2362:	10 8e       	std	Z+24, r1	; 0x18
    2364:	11 8e       	std	Z+25, r1	; 0x19
    2366:	12 8e       	std	Z+26, r1	; 0x1a
    2368:	13 8e       	std	Z+27, r1	; 0x1b
			fp->fptr = 0;			/* Set file pointer top of the file */
    236a:	d1 01       	movw	r26, r2
    236c:	50 96       	adiw	r26, 0x10	; 16
    236e:	1d 92       	st	X+, r1
    2370:	1d 92       	st	X+, r1
    2372:	1d 92       	st	X+, r1
    2374:	1c 92       	st	X, r1
    2376:	53 97       	sbiw	r26, 0x13	; 19


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
    2378:	b2 96       	adiw	r30, 0x22	; 34
    237a:	ff a7       	std	Y+47, r31	; 0x2f
    237c:	ee a7       	std	Y+46, r30	; 0x2e
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	92 e0       	ldi	r25, 0x02	; 2

	do {
		*d++ = (BYTE)val;
    2382:	11 92       	st	Z+, r1
	} while (--cnt);
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	e9 f7       	brne	.-6      	; 0x2382 <f_open+0x50c>
			fp->fptr = 0;			/* Set file pointer top of the file */
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    2388:	fd a5       	ldd	r31, Y+45	; 0x2d
    238a:	f5 ff       	sbrs	r31, 5
    238c:	d2 c0       	rjmp	.+420    	; 0x2532 <f_open+0x6bc>
    238e:	d1 01       	movw	r26, r2
    2390:	1a 96       	adiw	r26, 0x0a	; 10
    2392:	2d 91       	ld	r18, X+
    2394:	3d 91       	ld	r19, X+
    2396:	4d 91       	ld	r20, X+
    2398:	5c 91       	ld	r21, X
    239a:	1d 97       	sbiw	r26, 0x0d	; 13
    239c:	21 15       	cp	r18, r1
    239e:	31 05       	cpc	r19, r1
    23a0:	41 05       	cpc	r20, r1
    23a2:	51 05       	cpc	r21, r1
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <f_open+0x532>
    23a6:	c5 c0       	rjmp	.+394    	; 0x2532 <f_open+0x6bc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    23a8:	f1 01       	movw	r30, r2
    23aa:	20 8b       	std	Z+16, r18	; 0x10
    23ac:	31 8b       	std	Z+17, r19	; 0x11
    23ae:	42 8b       	std	Z+18, r20	; 0x12
    23b0:	53 8b       	std	Z+19, r21	; 0x13
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    23b2:	e9 81       	ldd	r30, Y+1	; 0x01
    23b4:	fa 81       	ldd	r31, Y+2	; 0x02
    23b6:	81 85       	ldd	r24, Z+9	; 0x09
    23b8:	92 85       	ldd	r25, Z+10	; 0x0a
    23ba:	4c 01       	movw	r8, r24
    23bc:	aa 24       	eor	r10, r10
    23be:	bb 24       	eor	r11, r11
    23c0:	99 e0       	ldi	r25, 0x09	; 9
    23c2:	88 0c       	add	r8, r8
    23c4:	99 1c       	adc	r9, r9
    23c6:	aa 1c       	adc	r10, r10
    23c8:	bb 1c       	adc	r11, r11
    23ca:	9a 95       	dec	r25
    23cc:	d1 f7       	brne	.-12     	; 0x23c2 <f_open+0x54c>
				clst = fp->obj.sclust;				/* Follow the cluster chain */
    23ce:	16 96       	adiw	r26, 0x06	; 6
    23d0:	ed 90       	ld	r14, X+
    23d2:	fd 90       	ld	r15, X+
    23d4:	0d 91       	ld	r16, X+
    23d6:	1c 91       	ld	r17, X
    23d8:	19 97       	sbiw	r26, 0x09	; 9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    23da:	29 01       	movw	r4, r18
    23dc:	3a 01       	movw	r6, r20
					clst = get_fat(&fp->obj, clst);
    23de:	2c aa       	std	Y+52, r2	; 0x34
    23e0:	3d aa       	std	Y+53, r3	; 0x35
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    23e2:	88 27       	eor	r24, r24
    23e4:	99 27       	eor	r25, r25
    23e6:	dc 01       	movw	r26, r24
    23e8:	88 19       	sub	r24, r8
    23ea:	99 09       	sbc	r25, r9
    23ec:	aa 09       	sbc	r26, r10
    23ee:	bb 09       	sbc	r27, r11
    23f0:	8e ab       	std	Y+54, r24	; 0x36
    23f2:	9f ab       	std	Y+55, r25	; 0x37
    23f4:	a8 af       	std	Y+56, r26	; 0x38
    23f6:	b9 af       	std	Y+57, r27	; 0x39
    23f8:	2b c0       	rjmp	.+86     	; 0x2450 <f_open+0x5da>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
    23fa:	8c a9       	ldd	r24, Y+52	; 0x34
    23fc:	9d a9       	ldd	r25, Y+53	; 0x35
    23fe:	b8 01       	movw	r22, r16
    2400:	a7 01       	movw	r20, r14
    2402:	0e 94 04 02 	call	0x408	; 0x408 <get_fat>
    2406:	7b 01       	movw	r14, r22
    2408:	8c 01       	movw	r16, r24
					if (clst <= 1) res = FR_INT_ERR;
    240a:	92 e0       	ldi	r25, 0x02	; 2
    240c:	e9 16       	cp	r14, r25
    240e:	f1 04       	cpc	r15, r1
    2410:	01 05       	cpc	r16, r1
    2412:	11 05       	cpc	r17, r1
    2414:	20 f4       	brcc	.+8      	; 0x241e <f_open+0x5a8>
    2416:	82 e0       	ldi	r24, 0x02	; 2
    2418:	c8 2e       	mov	r12, r24
    241a:	d1 2c       	mov	r13, r1
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <f_open+0x5ac>
    241e:	cc 24       	eor	r12, r12
    2420:	dd 24       	eor	r13, r13
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    2422:	af ef       	ldi	r26, 0xFF	; 255
    2424:	ea 16       	cp	r14, r26
    2426:	af ef       	ldi	r26, 0xFF	; 255
    2428:	fa 06       	cpc	r15, r26
    242a:	af ef       	ldi	r26, 0xFF	; 255
    242c:	0a 07       	cpc	r16, r26
    242e:	af ef       	ldi	r26, 0xFF	; 255
    2430:	1a 07       	cpc	r17, r26
    2432:	19 f4       	brne	.+6      	; 0x243a <f_open+0x5c4>
    2434:	b1 e0       	ldi	r27, 0x01	; 1
    2436:	cb 2e       	mov	r12, r27
    2438:	d1 2c       	mov	r13, r1
    243a:	8e a9       	ldd	r24, Y+54	; 0x36
    243c:	9f a9       	ldd	r25, Y+55	; 0x37
    243e:	a8 ad       	ldd	r26, Y+56	; 0x38
    2440:	b9 ad       	ldd	r27, Y+57	; 0x39
    2442:	48 0e       	add	r4, r24
    2444:	59 1e       	adc	r5, r25
    2446:	6a 1e       	adc	r6, r26
    2448:	7b 1e       	adc	r7, r27
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    244a:	c1 14       	cp	r12, r1
    244c:	d1 04       	cpc	r13, r1
    244e:	39 f4       	brne	.+14     	; 0x245e <f_open+0x5e8>
    2450:	84 14       	cp	r8, r4
    2452:	95 04       	cpc	r9, r5
    2454:	a6 04       	cpc	r10, r6
    2456:	b7 04       	cpc	r11, r7
    2458:	80 f2       	brcs	.-96     	; 0x23fa <f_open+0x584>
    245a:	cc 24       	eor	r12, r12
    245c:	dd 24       	eor	r13, r13
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    245e:	d1 01       	movw	r26, r2
    2460:	54 96       	adiw	r26, 0x14	; 20
    2462:	ed 92       	st	X+, r14
    2464:	fd 92       	st	X+, r15
    2466:	0d 93       	st	X+, r16
    2468:	1c 93       	st	X, r17
    246a:	57 97       	sbiw	r26, 0x17	; 23
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    246c:	c1 14       	cp	r12, r1
    246e:	d1 04       	cpc	r13, r1
    2470:	09 f0       	breq	.+2      	; 0x2474 <f_open+0x5fe>
    2472:	96 c0       	rjmp	.+300    	; 0x25a0 <f_open+0x72a>
    2474:	d3 01       	movw	r26, r6
    2476:	c2 01       	movw	r24, r4
    2478:	91 70       	andi	r25, 0x01	; 1
    247a:	a0 70       	andi	r26, 0x00	; 0
    247c:	b0 70       	andi	r27, 0x00	; 0
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	a1 05       	cpc	r26, r1
    2482:	b1 05       	cpc	r27, r1
    2484:	09 f4       	brne	.+2      	; 0x2488 <f_open+0x612>
    2486:	57 c0       	rjmp	.+174    	; 0x2536 <f_open+0x6c0>
					if ((sc = clst2sect(fs, clst)) == 0) {
    2488:	a9 80       	ldd	r10, Y+1	; 0x01
    248a:	ba 80       	ldd	r11, Y+2	; 0x02
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
    248c:	8e ef       	ldi	r24, 0xFE	; 254
    248e:	9f ef       	ldi	r25, 0xFF	; 255
    2490:	af ef       	ldi	r26, 0xFF	; 255
    2492:	bf ef       	ldi	r27, 0xFF	; 255
    2494:	e8 0e       	add	r14, r24
    2496:	f9 1e       	adc	r15, r25
    2498:	0a 1f       	adc	r16, r26
    249a:	1b 1f       	adc	r17, r27
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    249c:	f5 01       	movw	r30, r10
    249e:	83 89       	ldd	r24, Z+19	; 0x13
    24a0:	94 89       	ldd	r25, Z+20	; 0x14
    24a2:	a5 89       	ldd	r26, Z+21	; 0x15
    24a4:	b6 89       	ldd	r27, Z+22	; 0x16
    24a6:	02 97       	sbiw	r24, 0x02	; 2
    24a8:	a1 09       	sbc	r26, r1
    24aa:	b1 09       	sbc	r27, r1
    24ac:	e8 16       	cp	r14, r24
    24ae:	f9 06       	cpc	r15, r25
    24b0:	0a 07       	cpc	r16, r26
    24b2:	1b 07       	cpc	r17, r27
    24b4:	08 f0       	brcs	.+2      	; 0x24b8 <f_open+0x642>
    24b6:	64 c0       	rjmp	.+200    	; 0x2580 <f_open+0x70a>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
    24b8:	21 85       	ldd	r18, Z+9	; 0x09
    24ba:	32 85       	ldd	r19, Z+10	; 0x0a
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	c8 01       	movw	r24, r16
    24c2:	b7 01       	movw	r22, r14
    24c4:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__mulsi3>
    24c8:	7b 01       	movw	r14, r22
    24ca:	8c 01       	movw	r16, r24
    24cc:	f5 01       	movw	r30, r10
    24ce:	87 a1       	ldd	r24, Z+39	; 0x27
    24d0:	90 a5       	ldd	r25, Z+40	; 0x28
    24d2:	a1 a5       	ldd	r26, Z+41	; 0x29
    24d4:	b2 a5       	ldd	r27, Z+42	; 0x2a
    24d6:	e8 0e       	add	r14, r24
    24d8:	f9 1e       	adc	r15, r25
    24da:	0a 1f       	adc	r16, r26
    24dc:	1b 1f       	adc	r17, r27
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clst2sect(fs, clst)) == 0) {
    24de:	e1 14       	cp	r14, r1
    24e0:	f1 04       	cpc	r15, r1
    24e2:	01 05       	cpc	r16, r1
    24e4:	11 05       	cpc	r17, r1
    24e6:	09 f4       	brne	.+2      	; 0x24ea <f_open+0x674>
    24e8:	4b c0       	rjmp	.+150    	; 0x2580 <f_open+0x70a>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    24ea:	a3 01       	movw	r20, r6
    24ec:	92 01       	movw	r18, r4
    24ee:	a9 e0       	ldi	r26, 0x09	; 9
    24f0:	56 95       	lsr	r21
    24f2:	47 95       	ror	r20
    24f4:	37 95       	ror	r19
    24f6:	27 95       	ror	r18
    24f8:	aa 95       	dec	r26
    24fa:	d1 f7       	brne	.-12     	; 0x24f0 <f_open+0x67a>
    24fc:	2e 0d       	add	r18, r14
    24fe:	3f 1d       	adc	r19, r15
    2500:	40 1f       	adc	r20, r16
    2502:	51 1f       	adc	r21, r17
    2504:	d1 01       	movw	r26, r2
    2506:	58 96       	adiw	r26, 0x18	; 24
    2508:	2d 93       	st	X+, r18
    250a:	3d 93       	st	X+, r19
    250c:	4d 93       	st	X+, r20
    250e:	5c 93       	st	X, r21
    2510:	5b 97       	sbiw	r26, 0x1b	; 27
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
    2512:	81 81       	ldd	r24, Z+1	; 0x01
    2514:	6e a5       	ldd	r22, Y+46	; 0x2e
    2516:	7f a5       	ldd	r23, Y+47	; 0x2f
    2518:	01 e0       	ldi	r16, 0x01	; 1
    251a:	10 e0       	ldi	r17, 0x00	; 0
    251c:	0e 94 76 15 	call	0x2aec	; 0x2aec <disk_read>
    2520:	89 2b       	or	r24, r25
    2522:	49 f0       	breq	.+18     	; 0x2536 <f_open+0x6c0>
    2524:	e1 e0       	ldi	r30, 0x01	; 1
    2526:	ce 2e       	mov	r12, r30
    2528:	d1 2c       	mov	r13, r1
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    252a:	f1 01       	movw	r30, r2
    252c:	11 82       	std	Z+1, r1	; 0x01
    252e:	10 82       	st	Z, r1
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <f_open+0x6c0>
    2532:	cc 24       	eor	r12, r12
    2534:	dd 24       	eor	r13, r13

	LEAVE_FF(fs, res);
}
    2536:	c6 01       	movw	r24, r12
    2538:	e9 96       	adiw	r28, 0x39	; 57
    253a:	e2 e1       	ldi	r30, 0x12	; 18
    253c:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    2540:	78 e0       	ldi	r23, 0x08	; 8
    2542:	c7 2e       	mov	r12, r23
    2544:	d1 2c       	mov	r13, r1
    2546:	f1 cf       	rjmp	.-30     	; 0x252a <f_open+0x6b4>
					fs->wflag = 1;
					if (cl != 0) {						/* Remove the cluster chain if exist */
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
						if (res == FR_OK) {
							res = move_window(fs, dw);
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	48 a9       	ldd	r20, Y+48	; 0x30
    254e:	59 a9       	ldd	r21, Y+49	; 0x31
    2550:	6a a9       	ldd	r22, Y+50	; 0x32
    2552:	7b a9       	ldd	r23, Y+51	; 0x33
    2554:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
    2558:	6c 01       	movw	r12, r24
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    255a:	e9 81       	ldd	r30, Y+1	; 0x01
    255c:	fa 81       	ldd	r31, Y+2	; 0x02
    255e:	08 94       	sec
    2560:	41 08       	sbc	r4, r1
    2562:	51 08       	sbc	r5, r1
    2564:	61 08       	sbc	r6, r1
    2566:	71 08       	sbc	r7, r1
    2568:	43 86       	std	Z+11, r4	; 0x0b
    256a:	54 86       	std	Z+12, r5	; 0x0c
    256c:	65 86       	std	Z+13, r6	; 0x0d
    256e:	76 86       	std	Z+14, r7	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	09 f4       	brne	.+2      	; 0x2576 <f_open+0x700>
    2574:	c1 ce       	rjmp	.-638    	; 0x22f8 <f_open+0x482>
    2576:	d9 cf       	rjmp	.-78     	; 0x252a <f_open+0x6b4>
    2578:	67 e0       	ldi	r22, 0x07	; 7
    257a:	c6 2e       	mov	r12, r22
    257c:	d1 2c       	mov	r13, r1
    257e:	d5 cf       	rjmp	.-86     	; 0x252a <f_open+0x6b4>
    2580:	52 e0       	ldi	r21, 0x02	; 2
    2582:	c5 2e       	mov	r12, r21
    2584:	d1 2c       	mov	r13, r1
    2586:	d1 cf       	rjmp	.-94     	; 0x252a <f_open+0x6b4>
    2588:	45 e0       	ldi	r20, 0x05	; 5
    258a:	c4 2e       	mov	r12, r20
    258c:	d1 2c       	mov	r13, r1
    258e:	8c cd       	rjmp	.-1256   	; 0x20a8 <f_open+0x232>
    2590:	36 e0       	ldi	r19, 0x06	; 6
    2592:	c3 2e       	mov	r12, r19
    2594:	d1 2c       	mov	r13, r1
    2596:	88 cd       	rjmp	.-1264   	; 0x20a8 <f_open+0x232>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    2598:	c1 14       	cp	r12, r1
    259a:	d1 04       	cpc	r13, r1
    259c:	61 f2       	breq	.-104    	; 0x2536 <f_open+0x6c0>
    259e:	c5 cf       	rjmp	.-118    	; 0x252a <f_open+0x6b4>
    25a0:	c6 01       	movw	r24, r12
    25a2:	6c 01       	movw	r12, r24
    25a4:	c2 cf       	rjmp	.-124    	; 0x252a <f_open+0x6b4>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
    25a6:	49 8d       	ldd	r20, Y+25	; 0x19
    25a8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    25aa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    25ac:	7c 8d       	ldd	r23, Y+28	; 0x1c
    25ae:	c7 01       	movw	r24, r14
    25b0:	0e 94 ca 01 	call	0x394	; 0x394 <move_window>
    25b4:	6c 01       	movw	r12, r24
		if (res == FR_OK) {
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	09 f4       	brne	.+2      	; 0x25bc <f_open+0x746>
    25ba:	b8 cd       	rjmp	.-1168   	; 0x212c <f_open+0x2b6>
    25bc:	ed cf       	rjmp	.-38     	; 0x2598 <f_open+0x722>

000025be <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    25be:	a6 e0       	ldi	r26, 0x06	; 6
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e5 ee       	ldi	r30, 0xE5	; 229
    25c4:	f2 e1       	ldi	r31, 0x12	; 18
    25c6:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__prologue_saves__+0x1e>
    25ca:	9c 83       	std	Y+4, r25	; 0x04
    25cc:	8b 83       	std	Y+3, r24	; 0x03
    25ce:	7e 83       	std	Y+6, r23	; 0x06
    25d0:	6d 83       	std	Y+5, r22	; 0x05
    25d2:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    25d4:	7a 83       	std	Y+2, r23	; 0x02
    25d6:	69 83       	std	Y+1, r22	; 0x01


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    25d8:	ce 01       	movw	r24, r28
    25da:	01 96       	adiw	r24, 0x01	; 1
    25dc:	0e 94 08 01 	call	0x210	; 0x210 <get_ldnumber>
    25e0:	dc 01       	movw	r26, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    25e2:	97 ff       	sbrs	r25, 7
    25e4:	03 c0       	rjmp	.+6      	; 0x25ec <f_mount+0x2e>
    25e6:	2b e0       	ldi	r18, 0x0B	; 11
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	24 c0       	rjmp	.+72     	; 0x2634 <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
    25ec:	fc 01       	movw	r30, r24
    25ee:	ee 0f       	add	r30, r30
    25f0:	ff 1f       	adc	r31, r31
    25f2:	ee 50       	subi	r30, 0x0E	; 14
    25f4:	fe 4f       	sbci	r31, 0xFE	; 254
    25f6:	01 90       	ld	r0, Z+
    25f8:	f0 81       	ld	r31, Z
    25fa:	e0 2d       	mov	r30, r0

	if (cfs) {
    25fc:	30 97       	sbiw	r30, 0x00	; 0
    25fe:	09 f0       	breq	.+2      	; 0x2602 <f_mount+0x44>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    2600:	10 82       	st	Z, r1
	}

	if (fs) {
    2602:	eb 81       	ldd	r30, Y+3	; 0x03
    2604:	fc 81       	ldd	r31, Y+4	; 0x04
    2606:	30 97       	sbiw	r30, 0x00	; 0
    2608:	09 f0       	breq	.+2      	; 0x260c <f_mount+0x4e>
		fs->fs_type = 0;				/* Clear new fs object */
    260a:	10 82       	st	Z, r1
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    260c:	aa 0f       	add	r26, r26
    260e:	bb 1f       	adc	r27, r27
    2610:	ae 50       	subi	r26, 0x0E	; 14
    2612:	be 4f       	sbci	r27, 0xFE	; 254
    2614:	ed 93       	st	X+, r30
    2616:	fc 93       	st	X, r31

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    2618:	11 23       	and	r17, r17
    261a:	19 f4       	brne	.+6      	; 0x2622 <f_mount+0x64>
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	09 c0       	rjmp	.+18     	; 0x2634 <f_mount+0x76>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
    2622:	ce 01       	movw	r24, r28
    2624:	05 96       	adiw	r24, 0x05	; 5
    2626:	be 01       	movw	r22, r28
    2628:	6d 5f       	subi	r22, 0xFD	; 253
    262a:	7f 4f       	sbci	r23, 0xFF	; 255
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <find_volume>
    2632:	9c 01       	movw	r18, r24
	LEAVE_FF(fs, res);
}
    2634:	c9 01       	movw	r24, r18
    2636:	26 96       	adiw	r28, 0x06	; 6
    2638:	e3 e0       	ldi	r30, 0x03	; 3
    263a:	0c 94 15 18 	jmp	0x302a	; 0x302a <__epilogue_restores__+0x1e>

0000263e <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    263e:	fc 01       	movw	r30, r24
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
    2640:	81 91       	ld	r24, Z+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    2642:	87 ff       	sbrs	r24, 7
    2644:	02 c0       	rjmp	.+4      	; 0x264a <xmit_mmc+0xc>
    2646:	c1 9a       	sbi	0x18, 1	; 24
    2648:	01 c0       	rjmp	.+2      	; 0x264c <xmit_mmc+0xe>
    264a:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    264c:	c2 9a       	sbi	0x18, 2	; 24
    264e:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    2650:	86 ff       	sbrs	r24, 6
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <xmit_mmc+0x1a>
    2654:	c1 9a       	sbi	0x18, 1	; 24
    2656:	01 c0       	rjmp	.+2      	; 0x265a <xmit_mmc+0x1c>
    2658:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    265a:	c2 9a       	sbi	0x18, 2	; 24
    265c:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    265e:	85 ff       	sbrs	r24, 5
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <xmit_mmc+0x28>
    2662:	c1 9a       	sbi	0x18, 1	; 24
    2664:	01 c0       	rjmp	.+2      	; 0x2668 <xmit_mmc+0x2a>
    2666:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    2668:	c2 9a       	sbi	0x18, 2	; 24
    266a:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
    266c:	84 ff       	sbrs	r24, 4
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <xmit_mmc+0x36>
    2670:	c1 9a       	sbi	0x18, 1	; 24
    2672:	01 c0       	rjmp	.+2      	; 0x2676 <xmit_mmc+0x38>
    2674:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    2676:	c2 9a       	sbi	0x18, 2	; 24
    2678:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
    267a:	83 ff       	sbrs	r24, 3
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <xmit_mmc+0x44>
    267e:	c1 9a       	sbi	0x18, 1	; 24
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <xmit_mmc+0x46>
    2682:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    2684:	c2 9a       	sbi	0x18, 2	; 24
    2686:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
    2688:	82 ff       	sbrs	r24, 2
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <xmit_mmc+0x52>
    268c:	c1 9a       	sbi	0x18, 1	; 24
    268e:	01 c0       	rjmp	.+2      	; 0x2692 <xmit_mmc+0x54>
    2690:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    2692:	c2 9a       	sbi	0x18, 2	; 24
    2694:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
    2696:	81 ff       	sbrs	r24, 1
    2698:	02 c0       	rjmp	.+4      	; 0x269e <xmit_mmc+0x60>
    269a:	c1 9a       	sbi	0x18, 1	; 24
    269c:	01 c0       	rjmp	.+2      	; 0x26a0 <xmit_mmc+0x62>
    269e:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    26a0:	c2 9a       	sbi	0x18, 2	; 24
    26a2:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    26a4:	80 ff       	sbrs	r24, 0
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <xmit_mmc+0x6e>
    26a8:	c1 9a       	sbi	0x18, 1	; 24
    26aa:	01 c0       	rjmp	.+2      	; 0x26ae <xmit_mmc+0x70>
    26ac:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    26ae:	c2 9a       	sbi	0x18, 2	; 24
    26b0:	c2 98       	cbi	0x18, 2	; 24
	} while (--bc);
    26b2:	61 50       	subi	r22, 0x01	; 1
    26b4:	70 40       	sbci	r23, 0x00	; 0
    26b6:	21 f6       	brne	.-120    	; 0x2640 <xmit_mmc+0x2>
}
    26b8:	08 95       	ret

000026ba <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
    26ba:	fc 01       	movw	r30, r24
	BYTE r;


	DI_H();	/* Send 0xFF */
    26bc:	c1 9a       	sbi	0x18, 1	; 24

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    26be:	86 b3       	in	r24, 0x16	; 22
    26c0:	81 70       	andi	r24, 0x01	; 1
		CK_H(); CK_L();
    26c2:	c2 9a       	sbi	0x18, 2	; 24
    26c4:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit6 */
    26c6:	88 0f       	add	r24, r24
    26c8:	b0 99       	sbic	0x16, 0	; 22
    26ca:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    26cc:	c2 9a       	sbi	0x18, 2	; 24
    26ce:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit5 */
    26d0:	88 0f       	add	r24, r24
    26d2:	b0 99       	sbic	0x16, 0	; 22
    26d4:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    26d6:	c2 9a       	sbi	0x18, 2	; 24
    26d8:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit4 */
    26da:	88 0f       	add	r24, r24
    26dc:	b0 99       	sbic	0x16, 0	; 22
    26de:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    26e0:	c2 9a       	sbi	0x18, 2	; 24
    26e2:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit3 */
    26e4:	88 0f       	add	r24, r24
    26e6:	b0 99       	sbic	0x16, 0	; 22
    26e8:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    26ea:	c2 9a       	sbi	0x18, 2	; 24
    26ec:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit2 */
    26ee:	88 0f       	add	r24, r24
    26f0:	b0 99       	sbic	0x16, 0	; 22
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    26f4:	c2 9a       	sbi	0x18, 2	; 24
    26f6:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit1 */
    26f8:	88 0f       	add	r24, r24
    26fa:	b0 99       	sbic	0x16, 0	; 22
    26fc:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    26fe:	c2 9a       	sbi	0x18, 2	; 24
    2700:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit0 */
    2702:	88 0f       	add	r24, r24
    2704:	b0 99       	sbic	0x16, 0	; 22
    2706:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    2708:	c2 9a       	sbi	0x18, 2	; 24
    270a:	c2 98       	cbi	0x18, 2	; 24
		*buff++ = r;			/* Store a received byte */
    270c:	80 83       	st	Z, r24
	} while (--bc);
    270e:	61 50       	subi	r22, 0x01	; 1
    2710:	70 40       	sbci	r23, 0x00	; 0
    2712:	11 f0       	breq	.+4      	; 0x2718 <rcvr_mmc+0x5e>
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit1 */
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit0 */
		CK_H(); CK_L();
		*buff++ = r;			/* Store a received byte */
    2714:	31 96       	adiw	r30, 0x01	; 1
    2716:	d3 cf       	rjmp	.-90     	; 0x26be <rcvr_mmc+0x4>
    2718:	08 95       	ret

0000271a <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    271a:	a1 e0       	ldi	r26, 0x01	; 1
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e3 e9       	ldi	r30, 0x93	; 147
    2720:	f3 e1       	ldi	r31, 0x13	; 19
    2722:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
    2726:	08 e8       	ldi	r16, 0x88	; 136
    2728:	13 e1       	ldi	r17, 0x13	; 19
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
		rcvr_mmc(&d, 1);
    272a:	7e 01       	movw	r14, r28
    272c:	08 94       	sec
    272e:	e1 1c       	adc	r14, r1
    2730:	f1 1c       	adc	r15, r1
    2732:	c7 01       	movw	r24, r14
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	70 e0       	ldi	r23, 0x00	; 0
    2738:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
		if (d == 0xFF) break;
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	8f 3f       	cpi	r24, 0xFF	; 255
    2740:	59 f0       	breq	.+22     	; 0x2758 <wait_ready+0x3e>
    2742:	84 e6       	ldi	r24, 0x64	; 100
    2744:	90 e0       	ldi	r25, 0x00	; 0

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    2746:	26 b3       	in	r18, 0x16	; 22
#if F_CPU >= 6000000
		PINB;
    2748:	26 b3       	in	r18, 0x16	; 22
#endif
#if F_CPU >= 7000000
		PINB;
    274a:	26 b3       	in	r18, 0x16	; 22
#endif
#if F_CPU >= 8000000
		PINB;
    274c:	26 b3       	in	r18, 0x16	; 22
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	d1 f7       	brne	.-12     	; 0x2746 <wait_ready+0x2c>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    2752:	01 50       	subi	r16, 0x01	; 1
    2754:	10 40       	sbci	r17, 0x00	; 0
    2756:	69 f7       	brne	.-38     	; 0x2732 <wait_ready+0x18>
    2758:	98 01       	movw	r18, r16
    275a:	01 15       	cp	r16, r1
    275c:	11 05       	cpc	r17, r1
    275e:	11 f0       	breq	.+4      	; 0x2764 <wait_ready+0x4a>
    2760:	21 e0       	ldi	r18, 0x01	; 1
    2762:	30 e0       	ldi	r19, 0x00	; 0
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
}
    2764:	c9 01       	movw	r24, r18
    2766:	21 96       	adiw	r28, 0x01	; 1
    2768:	e6 e0       	ldi	r30, 0x06	; 6
    276a:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

0000276e <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    276e:	a1 e0       	ldi	r26, 0x01	; 1
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ed eb       	ldi	r30, 0xBD	; 189
    2774:	f3 e1       	ldi	r31, 0x13	; 19
    2776:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__prologue_saves__+0x20>
	BYTE d;

	CS_H();				/* Set CS# high */
    277a:	c3 9a       	sbi	0x18, 3	; 24
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    277c:	ce 01       	movw	r24, r28
    277e:	01 96       	adiw	r24, 0x01	; 1
    2780:	61 e0       	ldi	r22, 0x01	; 1
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
}
    2788:	21 96       	adiw	r28, 0x01	; 1
    278a:	e2 e0       	ldi	r30, 0x02	; 2
    278c:	0c 94 16 18 	jmp	0x302c	; 0x302c <__epilogue_restores__+0x20>

00002790 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    2790:	a1 e0       	ldi	r26, 0x01	; 1
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	ee ec       	ldi	r30, 0xCE	; 206
    2796:	f3 e1       	ldi	r31, 0x13	; 19
    2798:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__prologue_saves__+0x20>
	BYTE d;

	CS_L();				/* Set CS# low */
    279c:	c3 98       	cbi	0x18, 3	; 24
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    279e:	ce 01       	movw	r24, r28
    27a0:	01 96       	adiw	r24, 0x01	; 1
    27a2:	61 e0       	ldi	r22, 0x01	; 1
    27a4:	70 e0       	ldi	r23, 0x00	; 0
    27a6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    27aa:	0e 94 8d 13 	call	0x271a	; 0x271a <wait_ready>
    27ae:	89 2b       	or	r24, r25
    27b0:	19 f0       	breq	.+6      	; 0x27b8 <select+0x28>
    27b2:	21 e0       	ldi	r18, 0x01	; 1
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	04 c0       	rjmp	.+8      	; 0x27c0 <select+0x30>

	deselect();
    27b8:	0e 94 b7 13 	call	0x276e	; 0x276e <deselect>
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
	return 0;			/* Failed */
}
    27c0:	c9 01       	movw	r24, r18
    27c2:	21 96       	adiw	r28, 0x01	; 1
    27c4:	e2 e0       	ldi	r30, 0x02	; 2
    27c6:	0c 94 16 18 	jmp	0x302c	; 0x302c <__epilogue_restores__+0x20>

000027ca <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    27ca:	a2 e0       	ldi	r26, 0x02	; 2
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	eb ee       	ldi	r30, 0xEB	; 235
    27d0:	f3 e1       	ldi	r31, 0x13	; 19
    27d2:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x10>
    27d6:	7c 01       	movw	r14, r24
    27d8:	6b 01       	movw	r12, r22
    27da:	08 ee       	ldi	r16, 0xE8	; 232
    27dc:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    27de:	5e 01       	movw	r10, r28
    27e0:	08 94       	sec
    27e2:	a1 1c       	adc	r10, r1
    27e4:	b1 1c       	adc	r11, r1
    27e6:	c5 01       	movw	r24, r10
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
		if (d[0] != 0xFF) break;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	8f 3f       	cpi	r24, 0xFF	; 255
    27f4:	59 f4       	brne	.+22     	; 0x280c <rcvr_datablock+0x42>
    27f6:	84 e6       	ldi	r24, 0x64	; 100
    27f8:	90 e0       	ldi	r25, 0x00	; 0

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    27fa:	26 b3       	in	r18, 0x16	; 22
#if F_CPU >= 6000000
		PINB;
    27fc:	26 b3       	in	r18, 0x16	; 22
#endif
#if F_CPU >= 7000000
		PINB;
    27fe:	26 b3       	in	r18, 0x16	; 22
#endif
#if F_CPU >= 8000000
		PINB;
    2800:	26 b3       	in	r18, 0x16	; 22
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	d1 f7       	brne	.-12     	; 0x27fa <rcvr_datablock+0x30>
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    2806:	01 50       	subi	r16, 0x01	; 1
    2808:	10 40       	sbci	r17, 0x00	; 0
    280a:	69 f7       	brne	.-38     	; 0x27e6 <rcvr_datablock+0x1c>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	8e 3f       	cpi	r24, 0xFE	; 254
    2810:	19 f0       	breq	.+6      	; 0x2818 <rcvr_datablock+0x4e>
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	0c c0       	rjmp	.+24     	; 0x2830 <rcvr_datablock+0x66>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    2818:	c7 01       	movw	r24, r14
    281a:	b6 01       	movw	r22, r12
    281c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    2820:	ce 01       	movw	r24, r28
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	62 e0       	ldi	r22, 0x02	; 2
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
    282c:	21 e0       	ldi	r18, 0x01	; 1
    282e:	30 e0       	ldi	r19, 0x00	; 0

	return 1;						/* Return with success */
}
    2830:	c9 01       	movw	r24, r18
    2832:	22 96       	adiw	r28, 0x02	; 2
    2834:	ea e0       	ldi	r30, 0x0A	; 10
    2836:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x10>

0000283a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    283a:	a2 e0       	ldi	r26, 0x02	; 2
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e3 e2       	ldi	r30, 0x23	; 35
    2840:	f4 e1       	ldi	r31, 0x14	; 20
    2842:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__prologue_saves__+0x16>
    2846:	7c 01       	movw	r14, r24
    2848:	d6 2e       	mov	r13, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    284a:	0e 94 8d 13 	call	0x271a	; 0x271a <wait_ready>
    284e:	89 2b       	or	r24, r25
    2850:	19 f4       	brne	.+6      	; 0x2858 <xmit_datablock+0x1e>
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	28 c0       	rjmp	.+80     	; 0x28a8 <xmit_datablock+0x6e>

	d[0] = token;
    2858:	d9 82       	std	Y+1, r13	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    285a:	8e 01       	movw	r16, r28
    285c:	0f 5f       	subi	r16, 0xFF	; 255
    285e:	1f 4f       	sbci	r17, 0xFF	; 255
    2860:	c8 01       	movw	r24, r16
    2862:	61 e0       	ldi	r22, 0x01	; 1
    2864:	70 e0       	ldi	r23, 0x00	; 0
    2866:	0e 94 1f 13 	call	0x263e	; 0x263e <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    286a:	8d ef       	ldi	r24, 0xFD	; 253
    286c:	d8 16       	cp	r13, r24
    286e:	19 f4       	brne	.+6      	; 0x2876 <xmit_datablock+0x3c>
    2870:	21 e0       	ldi	r18, 0x01	; 1
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	19 c0       	rjmp	.+50     	; 0x28a8 <xmit_datablock+0x6e>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    2876:	c7 01       	movw	r24, r14
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	72 e0       	ldi	r23, 0x02	; 2
    287c:	0e 94 1f 13 	call	0x263e	; 0x263e <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    2880:	c8 01       	movw	r24, r16
    2882:	62 e0       	ldi	r22, 0x02	; 2
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    288a:	c8 01       	movw	r24, r16
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	8f 71       	andi	r24, 0x1F	; 31
    289a:	85 30       	cpi	r24, 0x05	; 5
    289c:	09 f0       	breq	.+2      	; 0x28a0 <xmit_datablock+0x66>
    289e:	91 e0       	ldi	r25, 0x01	; 1
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	98 27       	eor	r25, r24
    28a4:	29 2f       	mov	r18, r25
    28a6:	30 e0       	ldi	r19, 0x00	; 0
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
}
    28a8:	c9 01       	movw	r24, r18
    28aa:	22 96       	adiw	r28, 0x02	; 2
    28ac:	e7 e0       	ldi	r30, 0x07	; 7
    28ae:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__epilogue_restores__+0x16>

000028b2 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    28b2:	a7 e0       	ldi	r26, 0x07	; 7
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	ef e5       	ldi	r30, 0x5F	; 95
    28b8:	f4 e1       	ldi	r31, 0x14	; 20
    28ba:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__prologue_saves__+0x16>
    28be:	d8 2e       	mov	r13, r24
    28c0:	7a 01       	movw	r14, r20
    28c2:	8b 01       	movw	r16, r22
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    28c4:	87 ff       	sbrs	r24, 7
    28c6:	0c c0       	rjmp	.+24     	; 0x28e0 <send_cmd+0x2e>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    28c8:	87 e3       	ldi	r24, 0x37	; 55
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	60 e0       	ldi	r22, 0x00	; 0
    28d0:	70 e0       	ldi	r23, 0x00	; 0
    28d2:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
		if (n > 1) return n;
    28d6:	82 30       	cpi	r24, 0x02	; 2
    28d8:	08 f0       	brcs	.+2      	; 0x28dc <send_cmd+0x2a>
    28da:	48 c0       	rjmp	.+144    	; 0x296c <send_cmd+0xba>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    28dc:	8f e7       	ldi	r24, 0x7F	; 127
    28de:	d8 22       	and	r13, r24
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    28e0:	8c e0       	ldi	r24, 0x0C	; 12
    28e2:	d8 16       	cp	r13, r24
    28e4:	61 f0       	breq	.+24     	; 0x28fe <send_cmd+0x4c>
		deselect();
    28e6:	0e 94 b7 13 	call	0x276e	; 0x276e <deselect>
		if (!select()) return 0xFF;
    28ea:	0e 94 c8 13 	call	0x2790	; 0x2790 <select>
    28ee:	89 2b       	or	r24, r25
    28f0:	11 f4       	brne	.+4      	; 0x28f6 <send_cmd+0x44>
    28f2:	8f ef       	ldi	r24, 0xFF	; 255
    28f4:	3b c0       	rjmp	.+118    	; 0x296c <send_cmd+0xba>
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    28f6:	dd 20       	and	r13, r13
    28f8:	11 f4       	brne	.+4      	; 0x28fe <send_cmd+0x4c>
    28fa:	25 e9       	ldi	r18, 0x95	; 149
    28fc:	06 c0       	rjmp	.+12     	; 0x290a <send_cmd+0x58>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    28fe:	88 e0       	ldi	r24, 0x08	; 8
    2900:	d8 16       	cp	r13, r24
    2902:	11 f4       	brne	.+4      	; 0x2908 <send_cmd+0x56>
    2904:	27 e8       	ldi	r18, 0x87	; 135
    2906:	01 c0       	rjmp	.+2      	; 0x290a <send_cmd+0x58>
    2908:	21 e0       	ldi	r18, 0x01	; 1
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    290a:	8d 2d       	mov	r24, r13
    290c:	80 64       	ori	r24, 0x40	; 64
    290e:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    2910:	81 2f       	mov	r24, r17
    2912:	99 27       	eor	r25, r25
    2914:	aa 27       	eor	r26, r26
    2916:	bb 27       	eor	r27, r27
    2918:	8b 83       	std	Y+3, r24	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    291a:	c8 01       	movw	r24, r16
    291c:	aa 27       	eor	r26, r26
    291e:	bb 27       	eor	r27, r27
    2920:	8c 83       	std	Y+4, r24	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    2922:	bb 27       	eor	r27, r27
    2924:	a1 2f       	mov	r26, r17
    2926:	90 2f       	mov	r25, r16
    2928:	8f 2d       	mov	r24, r15
    292a:	8d 83       	std	Y+5, r24	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    292c:	ee 82       	std	Y+6, r14	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    292e:	2f 83       	std	Y+7, r18	; 0x07
	xmit_mmc(buf, 6);
    2930:	ce 01       	movw	r24, r28
    2932:	02 96       	adiw	r24, 0x02	; 2
    2934:	66 e0       	ldi	r22, 0x06	; 6
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	0e 94 1f 13 	call	0x263e	; 0x263e <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    293c:	8c e0       	ldi	r24, 0x0C	; 12
    293e:	d8 16       	cp	r13, r24
    2940:	31 f4       	brne	.+12     	; 0x294e <send_cmd+0x9c>
    2942:	ce 01       	movw	r24, r28
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	61 e0       	ldi	r22, 0x01	; 1
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
    294e:	1a e0       	ldi	r17, 0x0A	; 10
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    2950:	7e 01       	movw	r14, r28
    2952:	08 94       	sec
    2954:	e1 1c       	adc	r14, r1
    2956:	f1 1c       	adc	r15, r1
    2958:	c7 01       	movw	r24, r14
    295a:	61 e0       	ldi	r22, 0x01	; 1
    295c:	70 e0       	ldi	r23, 0x00	; 0
    295e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
	while ((d & 0x80) && --n);
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	87 ff       	sbrs	r24, 7
    2966:	02 c0       	rjmp	.+4      	; 0x296c <send_cmd+0xba>
    2968:	11 50       	subi	r17, 0x01	; 1
    296a:	b1 f7       	brne	.-20     	; 0x2958 <send_cmd+0xa6>

	return d;			/* Return with the response value */
}
    296c:	27 96       	adiw	r28, 0x07	; 7
    296e:	e7 e0       	ldi	r30, 0x07	; 7
    2970:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__epilogue_restores__+0x16>

00002974 <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    2974:	88 23       	and	r24, r24
    2976:	11 f0       	breq	.+4      	; 0x297c <disk_status+0x8>
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	08 95       	ret

	return Stat;
    297c:	80 91 b6 01 	lds	r24, 0x01B6
}
    2980:	08 95       	ret

00002982 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    2982:	a4 e0       	ldi	r26, 0x04	; 4
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e7 ec       	ldi	r30, 0xC7	; 199
    2988:	f4 e1       	ldi	r31, 0x14	; 20
    298a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    298e:	88 23       	and	r24, r24
    2990:	11 f0       	breq	.+4      	; 0x2996 <disk_initialize+0x14>
    2992:	13 e0       	ldi	r17, 0x03	; 3
    2994:	a6 c0       	rjmp	.+332    	; 0x2ae2 <disk_initialize+0x160>
    2996:	80 e1       	ldi	r24, 0x10	; 16
    2998:	97 e2       	ldi	r25, 0x27	; 39

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    299a:	26 b3       	in	r18, 0x16	; 22
#if F_CPU >= 6000000
		PINB;
    299c:	26 b3       	in	r18, 0x16	; 22
#endif
#if F_CPU >= 7000000
		PINB;
    299e:	26 b3       	in	r18, 0x16	; 22
#endif
#if F_CPU >= 8000000
		PINB;
    29a0:	26 b3       	in	r18, 0x16	; 22
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	d1 f7       	brne	.-12     	; 0x299a <disk_initialize+0x18>


	if (drv) return RES_NOTRDY;

	dly_us(10000);			/* 10ms */
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    29a6:	bb 9a       	sbi	0x17, 3	; 23
    29a8:	c3 9a       	sbi	0x18, 3	; 24
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
    29aa:	ba 9a       	sbi	0x17, 2	; 23
    29ac:	c2 98       	cbi	0x18, 2	; 24
	DI_INIT();				/* Initialize port pin tied to DI */
    29ae:	b9 9a       	sbi	0x17, 1	; 23
    29b0:	1a e0       	ldi	r17, 0x0A	; 10
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    29b2:	7e 01       	movw	r14, r28
    29b4:	08 94       	sec
    29b6:	e1 1c       	adc	r14, r1
    29b8:	f1 1c       	adc	r15, r1
    29ba:	c7 01       	movw	r24, r14
    29bc:	61 e0       	ldi	r22, 0x01	; 1
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
    29c4:	11 50       	subi	r17, 0x01	; 1
    29c6:	c9 f7       	brne	.-14     	; 0x29ba <disk_initialize+0x38>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	40 e0       	ldi	r20, 0x00	; 0
    29cc:	50 e0       	ldi	r21, 0x00	; 0
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    29d6:	81 30       	cpi	r24, 0x01	; 1
    29d8:	09 f0       	breq	.+2      	; 0x29dc <disk_initialize+0x5a>
    29da:	78 c0       	rjmp	.+240    	; 0x2acc <disk_initialize+0x14a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    29dc:	88 e0       	ldi	r24, 0x08	; 8
    29de:	4a ea       	ldi	r20, 0xAA	; 170
    29e0:	51 e0       	ldi	r21, 0x01	; 1
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    29ea:	81 30       	cpi	r24, 0x01	; 1
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <disk_initialize+0x6e>
    29ee:	3d c0       	rjmp	.+122    	; 0x2a6a <disk_initialize+0xe8>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    29f0:	c7 01       	movw	r24, r14
    29f2:	64 e0       	ldi	r22, 0x04	; 4
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	81 30       	cpi	r24, 0x01	; 1
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <disk_initialize+0x80>
    2a00:	65 c0       	rjmp	.+202    	; 0x2acc <disk_initialize+0x14a>
    2a02:	8c 81       	ldd	r24, Y+4	; 0x04
    2a04:	8a 3a       	cpi	r24, 0xAA	; 170
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <disk_initialize+0x88>
    2a08:	61 c0       	rjmp	.+194    	; 0x2acc <disk_initialize+0x14a>
    2a0a:	08 ee       	ldi	r16, 0xE8	; 232
    2a0c:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    2a0e:	89 ea       	ldi	r24, 0xA9	; 169
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	60 e0       	ldi	r22, 0x00	; 0
    2a16:	70 e4       	ldi	r23, 0x40	; 64
    2a18:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    2a1c:	88 23       	and	r24, r24
    2a1e:	61 f0       	breq	.+24     	; 0x2a38 <disk_initialize+0xb6>
    2a20:	88 ee       	ldi	r24, 0xE8	; 232
    2a22:	93 e0       	ldi	r25, 0x03	; 3

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    2a24:	26 b3       	in	r18, 0x16	; 22
#if F_CPU >= 6000000
		PINB;
    2a26:	26 b3       	in	r18, 0x16	; 22
#endif
#if F_CPU >= 7000000
		PINB;
    2a28:	26 b3       	in	r18, 0x16	; 22
#endif
#if F_CPU >= 8000000
		PINB;
    2a2a:	26 b3       	in	r18, 0x16	; 22
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	d1 f7       	brne	.-12     	; 0x2a24 <disk_initialize+0xa2>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2a30:	01 50       	subi	r16, 0x01	; 1
    2a32:	10 40       	sbci	r17, 0x00	; 0
    2a34:	61 f7       	brne	.-40     	; 0x2a0e <disk_initialize+0x8c>
    2a36:	4a c0       	rjmp	.+148    	; 0x2acc <disk_initialize+0x14a>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    2a38:	8a e3       	ldi	r24, 0x3A	; 58
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	70 e0       	ldi	r23, 0x00	; 0
    2a42:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    2a46:	88 23       	and	r24, r24
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <disk_initialize+0xca>
    2a4a:	40 c0       	rjmp	.+128    	; 0x2acc <disk_initialize+0x14a>
					rcvr_mmc(buf, 4);
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	64 e0       	ldi	r22, 0x04	; 4
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	86 fd       	sbrc	r24, 6
    2a5c:	03 c0       	rjmp	.+6      	; 0x2a64 <disk_initialize+0xe2>
    2a5e:	74 e0       	ldi	r23, 0x04	; 4
    2a60:	f7 2e       	mov	r15, r23
    2a62:	35 c0       	rjmp	.+106    	; 0x2ace <disk_initialize+0x14c>
    2a64:	6c e0       	ldi	r22, 0x0C	; 12
    2a66:	f6 2e       	mov	r15, r22
    2a68:	32 c0       	rjmp	.+100    	; 0x2ace <disk_initialize+0x14c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    2a6a:	89 ea       	ldi	r24, 0xA9	; 169
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    2a78:	82 30       	cpi	r24, 0x02	; 2
    2a7a:	28 f0       	brcs	.+10     	; 0x2a86 <disk_initialize+0x104>
    2a7c:	ff 24       	eor	r15, r15
    2a7e:	f3 94       	inc	r15
    2a80:	ee 24       	eor	r14, r14
    2a82:	e3 94       	inc	r14
    2a84:	04 c0       	rjmp	.+8      	; 0x2a8e <disk_initialize+0x10c>
    2a86:	52 e0       	ldi	r21, 0x02	; 2
    2a88:	f5 2e       	mov	r15, r21
    2a8a:	49 ea       	ldi	r20, 0xA9	; 169
    2a8c:	e4 2e       	mov	r14, r20
    2a8e:	08 ee       	ldi	r16, 0xE8	; 232
    2a90:	13 e0       	ldi	r17, 0x03	; 3
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
    2a92:	8e 2d       	mov	r24, r14
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	50 e0       	ldi	r21, 0x00	; 0
    2a98:	60 e0       	ldi	r22, 0x00	; 0
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    2aa0:	88 23       	and	r24, r24
    2aa2:	61 f0       	breq	.+24     	; 0x2abc <disk_initialize+0x13a>
    2aa4:	88 ee       	ldi	r24, 0xE8	; 232
    2aa6:	93 e0       	ldi	r25, 0x03	; 3

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    2aa8:	26 b3       	in	r18, 0x16	; 22
#if F_CPU >= 6000000
		PINB;
    2aaa:	26 b3       	in	r18, 0x16	; 22
#endif
#if F_CPU >= 7000000
		PINB;
    2aac:	26 b3       	in	r18, 0x16	; 22
#endif
#if F_CPU >= 8000000
		PINB;
    2aae:	26 b3       	in	r18, 0x16	; 22
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	d1 f7       	brne	.-12     	; 0x2aa8 <disk_initialize+0x126>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    2ab4:	01 50       	subi	r16, 0x01	; 1
    2ab6:	10 40       	sbci	r17, 0x00	; 0
    2ab8:	61 f7       	brne	.-40     	; 0x2a92 <disk_initialize+0x110>
    2aba:	08 c0       	rjmp	.+16     	; 0x2acc <disk_initialize+0x14a>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    2abc:	80 e1       	ldi	r24, 0x10	; 16
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	52 e0       	ldi	r21, 0x02	; 2
    2ac2:	60 e0       	ldi	r22, 0x00	; 0
    2ac4:	70 e0       	ldi	r23, 0x00	; 0
    2ac6:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    2aca:	81 11       	cpse	r24, r1
    2acc:	ff 24       	eor	r15, r15
				ty = 0;
		}
	}
	CardType = ty;
    2ace:	f0 92 f6 01 	sts	0x01F6, r15
	s = ty ? 0 : STA_NOINIT;
    2ad2:	10 e0       	ldi	r17, 0x00	; 0
    2ad4:	ff 20       	and	r15, r15
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <disk_initialize+0x158>
    2ad8:	11 e0       	ldi	r17, 0x01	; 1
	Stat = s;
    2ada:	10 93 b6 01 	sts	0x01B6, r17

	deselect();
    2ade:	0e 94 b7 13 	call	0x276e	; 0x276e <deselect>

	return s;
}
    2ae2:	81 2f       	mov	r24, r17
    2ae4:	24 96       	adiw	r28, 0x04	; 4
    2ae6:	e6 e0       	ldi	r30, 0x06	; 6
    2ae8:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

00002aec <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2aec:	ff 92       	push	r15
    2aee:	0f 93       	push	r16
    2af0:	1f 93       	push	r17
    2af2:	cf 93       	push	r28
    2af4:	df 93       	push	r29
    2af6:	eb 01       	movw	r28, r22

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    2af8:	88 23       	and	r24, r24
    2afa:	11 f0       	breq	.+4      	; 0x2b00 <disk_read+0x14>
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <disk_read+0x18>

	return Stat;
    2b00:	80 91 b6 01 	lds	r24, 0x01B6
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    2b04:	80 ff       	sbrs	r24, 0
    2b06:	03 c0       	rjmp	.+6      	; 0x2b0e <disk_read+0x22>
    2b08:	03 e0       	ldi	r16, 0x03	; 3
    2b0a:	10 e0       	ldi	r17, 0x00	; 0
    2b0c:	38 c0       	rjmp	.+112    	; 0x2b7e <disk_read+0x92>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    2b0e:	80 91 f6 01 	lds	r24, 0x01F6
    2b12:	83 fd       	sbrc	r24, 3
    2b14:	07 c0       	rjmp	.+14     	; 0x2b24 <disk_read+0x38>
    2b16:	a9 e0       	ldi	r26, 0x09	; 9
    2b18:	22 0f       	add	r18, r18
    2b1a:	33 1f       	adc	r19, r19
    2b1c:	44 1f       	adc	r20, r20
    2b1e:	55 1f       	adc	r21, r21
    2b20:	aa 95       	dec	r26
    2b22:	d1 f7       	brne	.-12     	; 0x2b18 <disk_read+0x2c>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    2b24:	02 30       	cpi	r16, 0x02	; 2
    2b26:	11 05       	cpc	r17, r1
    2b28:	18 f4       	brcc	.+6      	; 0x2b30 <disk_read+0x44>
    2b2a:	f1 e1       	ldi	r31, 0x11	; 17
    2b2c:	ff 2e       	mov	r15, r31
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <disk_read+0x48>
    2b30:	e2 e1       	ldi	r30, 0x12	; 18
    2b32:	fe 2e       	mov	r15, r30
	if (send_cmd(cmd, sector) == 0) {
    2b34:	8f 2d       	mov	r24, r15
    2b36:	ba 01       	movw	r22, r20
    2b38:	a9 01       	movw	r20, r18
    2b3a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    2b3e:	88 23       	and	r24, r24
    2b40:	b9 f4       	brne	.+46     	; 0x2b70 <disk_read+0x84>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    2b42:	ce 01       	movw	r24, r28
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	72 e0       	ldi	r23, 0x02	; 2
    2b48:	0e 94 e5 13 	call	0x27ca	; 0x27ca <rcvr_datablock>
    2b4c:	89 2b       	or	r24, r25
    2b4e:	31 f0       	breq	.+12     	; 0x2b5c <disk_read+0x70>
			buff += 512;
		} while (--count);
    2b50:	01 50       	subi	r16, 0x01	; 1
    2b52:	10 40       	sbci	r17, 0x00	; 0
    2b54:	19 f0       	breq	.+6      	; 0x2b5c <disk_read+0x70>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
			buff += 512;
    2b56:	c0 50       	subi	r28, 0x00	; 0
    2b58:	de 4f       	sbci	r29, 0xFE	; 254
    2b5a:	f3 cf       	rjmp	.-26     	; 0x2b42 <disk_read+0x56>
		} while (--count);
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    2b5c:	82 e1       	ldi	r24, 0x12	; 18
    2b5e:	f8 16       	cp	r15, r24
    2b60:	39 f4       	brne	.+14     	; 0x2b70 <disk_read+0x84>
    2b62:	8c e0       	ldi	r24, 0x0C	; 12
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	60 e0       	ldi	r22, 0x00	; 0
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
	}
	deselect();
    2b70:	0e 94 b7 13 	call	0x276e	; 0x276e <deselect>

	return count ? RES_ERROR : RES_OK;
    2b74:	01 15       	cp	r16, r1
    2b76:	11 05       	cpc	r17, r1
    2b78:	11 f0       	breq	.+4      	; 0x2b7e <disk_read+0x92>
    2b7a:	01 e0       	ldi	r16, 0x01	; 1
    2b7c:	10 e0       	ldi	r17, 0x00	; 0
}
    2b7e:	c8 01       	movw	r24, r16
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	e5 e0       	ldi	r30, 0x05	; 5
    2b86:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__epilogue_restores__+0x1a>

00002b8a <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2b8a:	a0 e0       	ldi	r26, 0x00	; 0
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	eb ec       	ldi	r30, 0xCB	; 203
    2b90:	f5 e1       	ldi	r31, 0x15	; 21
    2b92:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__prologue_saves__+0x14>
    2b96:	eb 01       	movw	r28, r22
    2b98:	69 01       	movw	r12, r18
    2b9a:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    2b9c:	88 23       	and	r24, r24
    2b9e:	11 f0       	breq	.+4      	; 0x2ba4 <disk_write+0x1a>
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <disk_write+0x1e>

	return Stat;
    2ba4:	80 91 b6 01 	lds	r24, 0x01B6
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    2ba8:	80 ff       	sbrs	r24, 0
    2baa:	03 c0       	rjmp	.+6      	; 0x2bb2 <disk_write+0x28>
    2bac:	03 e0       	ldi	r16, 0x03	; 3
    2bae:	10 e0       	ldi	r17, 0x00	; 0
    2bb0:	4c c0       	rjmp	.+152    	; 0x2c4a <disk_write+0xc0>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    2bb2:	80 91 f6 01 	lds	r24, 0x01F6
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	83 fd       	sbrc	r24, 3
    2bba:	07 c0       	rjmp	.+14     	; 0x2bca <disk_write+0x40>
    2bbc:	b9 e0       	ldi	r27, 0x09	; 9
    2bbe:	cc 0c       	add	r12, r12
    2bc0:	dd 1c       	adc	r13, r13
    2bc2:	ee 1c       	adc	r14, r14
    2bc4:	ff 1c       	adc	r15, r15
    2bc6:	ba 95       	dec	r27
    2bc8:	d1 f7       	brne	.-12     	; 0x2bbe <disk_write+0x34>

	if (count == 1) {	/* Single block write */
    2bca:	01 30       	cpi	r16, 0x01	; 1
    2bcc:	11 05       	cpc	r17, r1
    2bce:	81 f4       	brne	.+32     	; 0x2bf0 <disk_write+0x66>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    2bd0:	88 e1       	ldi	r24, 0x18	; 24
    2bd2:	b7 01       	movw	r22, r14
    2bd4:	a6 01       	movw	r20, r12
    2bd6:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    2bda:	88 23       	and	r24, r24
    2bdc:	79 f5       	brne	.+94     	; 0x2c3c <disk_write+0xb2>
    2bde:	ce 01       	movw	r24, r28
    2be0:	6e ef       	ldi	r22, 0xFE	; 254
    2be2:	0e 94 1d 14 	call	0x283a	; 0x283a <xmit_datablock>
    2be6:	89 2b       	or	r24, r25
    2be8:	49 f1       	breq	.+82     	; 0x2c3c <disk_write+0xb2>
    2bea:	00 e0       	ldi	r16, 0x00	; 0
    2bec:	10 e0       	ldi	r17, 0x00	; 0
    2bee:	26 c0       	rjmp	.+76     	; 0x2c3c <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2bf0:	86 70       	andi	r24, 0x06	; 6
    2bf2:	90 70       	andi	r25, 0x00	; 0
    2bf4:	89 2b       	or	r24, r25
    2bf6:	31 f0       	breq	.+12     	; 0x2c04 <disk_write+0x7a>
    2bf8:	a8 01       	movw	r20, r16
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	87 e9       	ldi	r24, 0x97	; 151
    2c00:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    2c04:	89 e1       	ldi	r24, 0x19	; 25
    2c06:	b7 01       	movw	r22, r14
    2c08:	a6 01       	movw	r20, r12
    2c0a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    2c0e:	88 23       	and	r24, r24
    2c10:	a9 f4       	brne	.+42     	; 0x2c3c <disk_write+0xb2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    2c12:	ce 01       	movw	r24, r28
    2c14:	6c ef       	ldi	r22, 0xFC	; 252
    2c16:	0e 94 1d 14 	call	0x283a	; 0x283a <xmit_datablock>
    2c1a:	89 2b       	or	r24, r25
    2c1c:	31 f0       	breq	.+12     	; 0x2c2a <disk_write+0xa0>
				buff += 512;
			} while (--count);
    2c1e:	01 50       	subi	r16, 0x01	; 1
    2c20:	10 40       	sbci	r17, 0x00	; 0
    2c22:	19 f0       	breq	.+6      	; 0x2c2a <disk_write+0xa0>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    2c24:	c0 50       	subi	r28, 0x00	; 0
    2c26:	de 4f       	sbci	r29, 0xFE	; 254
    2c28:	f4 cf       	rjmp	.-24     	; 0x2c12 <disk_write+0x88>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	6d ef       	ldi	r22, 0xFD	; 253
    2c30:	0e 94 1d 14 	call	0x283a	; 0x283a <xmit_datablock>
    2c34:	89 2b       	or	r24, r25
    2c36:	11 f4       	brne	.+4      	; 0x2c3c <disk_write+0xb2>
    2c38:	01 e0       	ldi	r16, 0x01	; 1
    2c3a:	10 e0       	ldi	r17, 0x00	; 0
				count = 1;
		}
	}
	deselect();
    2c3c:	0e 94 b7 13 	call	0x276e	; 0x276e <deselect>

	return count ? RES_ERROR : RES_OK;
    2c40:	01 15       	cp	r16, r1
    2c42:	11 05       	cpc	r17, r1
    2c44:	11 f0       	breq	.+4      	; 0x2c4a <disk_write+0xc0>
    2c46:	01 e0       	ldi	r16, 0x01	; 1
    2c48:	10 e0       	ldi	r17, 0x00	; 0
}
    2c4a:	c8 01       	movw	r24, r16
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	e8 e0       	ldi	r30, 0x08	; 8
    2c52:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__epilogue_restores__+0x14>

00002c56 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    2c56:	a0 e1       	ldi	r26, 0x10	; 16
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e1 e3       	ldi	r30, 0x31	; 49
    2c5c:	f6 e1       	ldi	r31, 0x16	; 22
    2c5e:	0c 94 f8 17 	jmp	0x2ff0	; 0x2ff0 <__prologue_saves__+0x1c>
    2c62:	8a 01       	movw	r16, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    2c64:	88 23       	and	r24, r24
    2c66:	11 f0       	breq	.+4      	; 0x2c6c <disk_ioctl+0x16>
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	02 c0       	rjmp	.+4      	; 0x2c70 <disk_ioctl+0x1a>

	return Stat;
    2c6c:	80 91 b6 01 	lds	r24, 0x01B6
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    2c70:	80 ff       	sbrs	r24, 0
    2c72:	03 c0       	rjmp	.+6      	; 0x2c7a <disk_ioctl+0x24>
    2c74:	03 e0       	ldi	r16, 0x03	; 3
    2c76:	10 e0       	ldi	r17, 0x00	; 0
    2c78:	90 c0       	rjmp	.+288    	; 0x2d9a <disk_ioctl+0x144>

	res = RES_ERROR;
	switch (ctrl) {
    2c7a:	61 30       	cpi	r22, 0x01	; 1
    2c7c:	71 f0       	breq	.+28     	; 0x2c9a <disk_ioctl+0x44>
    2c7e:	61 30       	cpi	r22, 0x01	; 1
    2c80:	30 f0       	brcs	.+12     	; 0x2c8e <disk_ioctl+0x38>
    2c82:	63 30       	cpi	r22, 0x03	; 3
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <disk_ioctl+0x32>
    2c86:	7b c0       	rjmp	.+246    	; 0x2d7e <disk_ioctl+0x128>
    2c88:	04 e0       	ldi	r16, 0x04	; 4
    2c8a:	10 e0       	ldi	r17, 0x00	; 0
    2c8c:	84 c0       	rjmp	.+264    	; 0x2d96 <disk_ioctl+0x140>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    2c8e:	0e 94 c8 13 	call	0x2790	; 0x2790 <select>
    2c92:	89 2b       	or	r24, r25
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <disk_ioctl+0x42>
    2c96:	7d c0       	rjmp	.+250    	; 0x2d92 <disk_ioctl+0x13c>
    2c98:	41 c0       	rjmp	.+130    	; 0x2d1c <disk_ioctl+0xc6>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    2c9a:	89 e0       	ldi	r24, 0x09	; 9
    2c9c:	40 e0       	ldi	r20, 0x00	; 0
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	70 e0       	ldi	r23, 0x00	; 0
    2ca4:	0e 94 59 14 	call	0x28b2	; 0x28b2 <send_cmd>
    2ca8:	88 23       	and	r24, r24
    2caa:	09 f0       	breq	.+2      	; 0x2cae <disk_ioctl+0x58>
    2cac:	72 c0       	rjmp	.+228    	; 0x2d92 <disk_ioctl+0x13c>
    2cae:	ce 01       	movw	r24, r28
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	60 e1       	ldi	r22, 0x10	; 16
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	0e 94 e5 13 	call	0x27ca	; 0x27ca <rcvr_datablock>
    2cba:	89 2b       	or	r24, r25
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <disk_ioctl+0x6a>
    2cbe:	69 c0       	rjmp	.+210    	; 0x2d92 <disk_ioctl+0x13c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	82 95       	swap	r24
    2cc4:	86 95       	lsr	r24
    2cc6:	86 95       	lsr	r24
    2cc8:	83 70       	andi	r24, 0x03	; 3
    2cca:	28 85       	ldd	r18, Y+8	; 0x08
    2ccc:	69 85       	ldd	r22, Y+9	; 0x09
    2cce:	7a 85       	ldd	r23, Y+10	; 0x0a
    2cd0:	81 30       	cpi	r24, 0x01	; 1
    2cd2:	39 f5       	brne	.+78     	; 0x2d22 <disk_ioctl+0xcc>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e0       	ldi	r20, 0x00	; 0
    2cd8:	50 e0       	ldi	r21, 0x00	; 0
    2cda:	2f 73       	andi	r18, 0x3F	; 63
    2cdc:	30 70       	andi	r19, 0x00	; 0
    2cde:	40 70       	andi	r20, 0x00	; 0
    2ce0:	50 70       	andi	r21, 0x00	; 0
    2ce2:	a9 01       	movw	r20, r18
    2ce4:	33 27       	eor	r19, r19
    2ce6:	22 27       	eor	r18, r18
    2ce8:	2f 5f       	subi	r18, 0xFF	; 255
    2cea:	3f 4f       	sbci	r19, 0xFF	; 255
    2cec:	4f 4f       	sbci	r20, 0xFF	; 255
    2cee:	5f 4f       	sbci	r21, 0xFF	; 255
    2cf0:	96 2f       	mov	r25, r22
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	87 0f       	add	r24, r23
    2cf6:	91 1d       	adc	r25, r1
    2cf8:	a0 e0       	ldi	r26, 0x00	; 0
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	28 0f       	add	r18, r24
    2cfe:	39 1f       	adc	r19, r25
    2d00:	4a 1f       	adc	r20, r26
    2d02:	5b 1f       	adc	r21, r27
    2d04:	6a e0       	ldi	r22, 0x0A	; 10
    2d06:	22 0f       	add	r18, r18
    2d08:	33 1f       	adc	r19, r19
    2d0a:	44 1f       	adc	r20, r20
    2d0c:	55 1f       	adc	r21, r21
    2d0e:	6a 95       	dec	r22
    2d10:	d1 f7       	brne	.-12     	; 0x2d06 <disk_ioctl+0xb0>
    2d12:	f8 01       	movw	r30, r16
    2d14:	20 83       	st	Z, r18
    2d16:	31 83       	std	Z+1, r19	; 0x01
    2d18:	42 83       	std	Z+2, r20	; 0x02
    2d1a:	53 83       	std	Z+3, r21	; 0x03
    2d1c:	00 e0       	ldi	r16, 0x00	; 0
    2d1e:	10 e0       	ldi	r17, 0x00	; 0
    2d20:	3a c0       	rjmp	.+116    	; 0x2d96 <disk_ioctl+0x140>
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
    2d22:	62 95       	swap	r22
    2d24:	66 95       	lsr	r22
    2d26:	66 95       	lsr	r22
    2d28:	63 70       	andi	r22, 0x03	; 3
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	22 0f       	add	r18, r18
    2d2e:	33 1f       	adc	r19, r19
    2d30:	22 0f       	add	r18, r18
    2d32:	33 1f       	adc	r19, r19
    2d34:	26 0f       	add	r18, r22
    2d36:	31 1d       	adc	r19, r1
    2d38:	2f 5f       	subi	r18, 0xFF	; 255
    2d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	83 70       	andi	r24, 0x03	; 3
    2d42:	90 70       	andi	r25, 0x00	; 0
    2d44:	98 2f       	mov	r25, r24
    2d46:	88 27       	eor	r24, r24
    2d48:	99 0f       	add	r25, r25
    2d4a:	99 0f       	add	r25, r25
    2d4c:	28 0f       	add	r18, r24
    2d4e:	39 1f       	adc	r19, r25
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	8e 81       	ldd	r24, Y+6	; 0x06
    2d56:	8f 70       	andi	r24, 0x0F	; 15
    2d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5a:	66 1f       	adc	r22, r22
    2d5c:	66 27       	eor	r22, r22
    2d5e:	66 1f       	adc	r22, r22
    2d60:	86 0f       	add	r24, r22
    2d62:	8e 5f       	subi	r24, 0xFE	; 254
    2d64:	73 70       	andi	r23, 0x03	; 3
    2d66:	77 0f       	add	r23, r23
    2d68:	87 0f       	add	r24, r23
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	09 97       	sbiw	r24, 0x09	; 9
    2d6e:	04 c0       	rjmp	.+8      	; 0x2d78 <disk_ioctl+0x122>
    2d70:	22 0f       	add	r18, r18
    2d72:	33 1f       	adc	r19, r19
    2d74:	44 1f       	adc	r20, r20
    2d76:	55 1f       	adc	r21, r21
    2d78:	8a 95       	dec	r24
    2d7a:	d2 f7       	brpl	.-12     	; 0x2d70 <disk_ioctl+0x11a>
    2d7c:	ca cf       	rjmp	.-108    	; 0x2d12 <disk_ioctl+0xbc>
				res = RES_OK;
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    2d7e:	80 e8       	ldi	r24, 0x80	; 128
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	a0 e0       	ldi	r26, 0x00	; 0
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	f8 01       	movw	r30, r16
    2d88:	80 83       	st	Z, r24
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	a2 83       	std	Z+2, r26	; 0x02
    2d8e:	b3 83       	std	Z+3, r27	; 0x03
    2d90:	c5 cf       	rjmp	.-118    	; 0x2d1c <disk_ioctl+0xc6>
			res = RES_OK;
			break;
    2d92:	01 e0       	ldi	r16, 0x01	; 1
    2d94:	10 e0       	ldi	r17, 0x00	; 0

		default:
			res = RES_PARERR;
	}

	deselect();
    2d96:	0e 94 b7 13 	call	0x276e	; 0x276e <deselect>

	return res;
}
    2d9a:	c8 01       	movw	r24, r16
    2d9c:	60 96       	adiw	r28, 0x10	; 16
    2d9e:	e4 e0       	ldi	r30, 0x04	; 4
    2da0:	0c 94 14 18 	jmp	0x3028	; 0x3028 <__epilogue_restores__+0x1c>

00002da4 <tunda_us>:
#include "ta_led.h"

void tunda_us(unsigned int time){
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2da8:	52 e0       	ldi	r21, 0x02	; 2
    2daa:	05 c0       	rjmp	.+10     	; 0x2db6 <tunda_us+0x12>
    2dac:	45 2f       	mov	r20, r21
    2dae:	4a 95       	dec	r20
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <tunda_us+0xa>
    unsigned int i;

    for(i=0;i<time;i++){
    2db2:	2f 5f       	subi	r18, 0xFF	; 255
    2db4:	3f 4f       	sbci	r19, 0xFF	; 255
    2db6:	28 17       	cp	r18, r24
    2db8:	39 07       	cpc	r19, r25
    2dba:	c0 f3       	brcs	.-16     	; 0x2dac <tunda_us+0x8>
    _delay_us(1);
    };
    return;
}
    2dbc:	08 95       	ret

00002dbe <tunda_ms>:

void tunda_ms(unsigned int time){
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dc2:	40 ed       	ldi	r20, 0xD0	; 208
    2dc4:	57 e0       	ldi	r21, 0x07	; 7
    2dc6:	05 c0       	rjmp	.+10     	; 0x2dd2 <tunda_ms+0x14>
    2dc8:	fa 01       	movw	r30, r20
    2dca:	31 97       	sbiw	r30, 0x01	; 1
    2dcc:	f1 f7       	brne	.-4      	; 0x2dca <tunda_ms+0xc>
    unsigned int i;

    for(i=0;i<time;i++){
    2dce:	2f 5f       	subi	r18, 0xFF	; 255
    2dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd2:	28 17       	cp	r18, r24
    2dd4:	39 07       	cpc	r19, r25
    2dd6:	c0 f3       	brcs	.-16     	; 0x2dc8 <tunda_ms+0xa>
    _delay_ms(1);
    };
    return;
}
    2dd8:	08 95       	ret

00002dda <ta_led_LEDInit>:

void ta_led_LEDInit(void){
    DDR_LED |= (1 << LED_1);
    2dda:	e4 e6       	ldi	r30, 0x64	; 100
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	82 60       	ori	r24, 0x02	; 2
    2de2:	80 83       	st	Z, r24
    PORT_LED |= (1 << LED_1);
    2de4:	e5 e6       	ldi	r30, 0x65	; 101
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	82 60       	ori	r24, 0x02	; 2
    2dec:	80 83       	st	Z, r24
}
    2dee:	08 95       	ret

00002df0 <ta_led_LEDTest>:

void ta_led_LEDTest(void){
    PORT_LED ^= (1 << LED_1);
    2df0:	80 91 65 00 	lds	r24, 0x0065
    2df4:	92 e0       	ldi	r25, 0x02	; 2
    2df6:	89 27       	eor	r24, r25
    2df8:	80 93 65 00 	sts	0x0065, r24
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	20 ed       	ldi	r18, 0xD0	; 208
    2e02:	37 e0       	ldi	r19, 0x07	; 7
    2e04:	f9 01       	movw	r30, r18
    2e06:	31 97       	sbiw	r30, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <ta_led_LEDTest+0x16>
}

void tunda_ms(unsigned int time){
    unsigned int i;

    for(i=0;i<time;i++){
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	41 e0       	ldi	r20, 0x01	; 1
    2e0e:	84 3f       	cpi	r24, 0xF4	; 244
    2e10:	94 07       	cpc	r25, r20
    2e12:	c1 f7       	brne	.-16     	; 0x2e04 <ta_led_LEDTest+0x14>
}

void ta_led_LEDTest(void){
    PORT_LED ^= (1 << LED_1);
    tunda_ms(TUNDA);
}
    2e14:	08 95       	ret

00002e16 <uart_putchar>:
/* USING ATMega128 UART-1 */

char var_str[CHAR_LONG];

static int uart_putchar(char ch,FILE*stream)
{
    2e16:	1f 93       	push	r17
    2e18:	18 2f       	mov	r17, r24
    if(ch=='\n'){uart_putchar('\r',stream);}
    2e1a:	8a 30       	cpi	r24, 0x0A	; 10
    2e1c:	19 f4       	brne	.+6      	; 0x2e24 <uart_putchar+0xe>
    2e1e:	8d e0       	ldi	r24, 0x0D	; 13
    2e20:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <uart_putchar>
    while ((UCSR0A & (1 << UDRE0)) == 0) {};
    2e24:	5d 9b       	sbis	0x0b, 5	; 11
    2e26:	fe cf       	rjmp	.-4      	; 0x2e24 <uart_putchar+0xe>
    UDR0=ch;
    2e28:	1c b9       	out	0x0c, r17	; 12
    return 0;
}
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	1f 91       	pop	r17
    2e30:	08 95       	ret

00002e32 <uart_getchar>:

static int uart_getchar(FILE*stream)
{
    2e32:	0f 93       	push	r16
    2e34:	1f 93       	push	r17
    2e36:	bc 01       	movw	r22, r24
    (void) stream;
    char temp;

    while ((UCSR0A & (1 << RXC0)) == 0) {};
    2e38:	5f 9b       	sbis	0x0b, 7	; 11
    2e3a:	fe cf       	rjmp	.-4      	; 0x2e38 <uart_getchar+0x6>
    temp=UDR0;
    2e3c:	0c b1       	in	r16, 0x0c	; 12
	uart_putchar(temp,stream);
    2e3e:	80 2f       	mov	r24, r16
    2e40:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <uart_putchar>
    2e44:	11 27       	eor	r17, r17
    2e46:	07 fd       	sbrc	r16, 7
    2e48:	10 95       	com	r17
    return(temp);
}
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	1f 91       	pop	r17
    2e4e:	0f 91       	pop	r16
    2e50:	08 95       	ret

00002e52 <ta_uart_Init>:

static FILE uart_stdout=FDEV_SETUP_STREAM(uart_putchar,NULL,_FDEV_SETUP_WRITE);
static FILE uart_stdin=FDEV_SETUP_STREAM(NULL,uart_getchar,_FDEV_SETUP_READ);

void ta_uart_Init(void){
    UBRR0H=(((F_CPU / (BAUDRATE * 16UL))) - 1)>>8;
    2e52:	10 92 90 00 	sts	0x0090, r1
    UBRR0L=(((F_CPU / (BAUDRATE * 16UL))) - 1);
    2e56:	83 e3       	ldi	r24, 0x33	; 51
    2e58:	89 b9       	out	0x09, r24	; 9

    UCSR0B |= 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
    2e5a:	8a b1       	in	r24, 0x0a	; 10
    2e5c:	88 69       	ori	r24, 0x98	; 152
    2e5e:	8a b9       	out	0x0a, r24	; 10

    UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
    2e60:	e5 e9       	ldi	r30, 0x95	; 149
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	86 60       	ori	r24, 0x06	; 6
    2e68:	80 83       	st	Z, r24

    stdin=&uart_stdin;
    2e6a:	86 ed       	ldi	r24, 0xD6	; 214
    2e6c:	91 e0       	ldi	r25, 0x01	; 1
    2e6e:	90 93 5b 06 	sts	0x065B, r25
    2e72:	80 93 5a 06 	sts	0x065A, r24
    stdout=&uart_stdout;
    2e76:	84 ee       	ldi	r24, 0xE4	; 228
    2e78:	91 e0       	ldi	r25, 0x01	; 1
    2e7a:	90 93 5d 06 	sts	0x065D, r25
    2e7e:	80 93 5c 06 	sts	0x065C, r24
}
    2e82:	08 95       	ret

00002e84 <__vector_18>:

ISR(USART0_RX_vect){
    2e84:	1f 92       	push	r1
    2e86:	0f 92       	push	r0
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	0f 92       	push	r0
    2e8c:	0b b6       	in	r0, 0x3b	; 59
    2e8e:	0f 92       	push	r0
    2e90:	11 24       	eor	r1, r1
    2e92:	2f 93       	push	r18
    2e94:	3f 93       	push	r19
    2e96:	4f 93       	push	r20
    2e98:	5f 93       	push	r21
    2e9a:	6f 93       	push	r22
    2e9c:	7f 93       	push	r23
    2e9e:	8f 93       	push	r24
    2ea0:	9f 93       	push	r25
    2ea2:	af 93       	push	r26
    2ea4:	bf 93       	push	r27
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	ef 93       	push	r30
    2eac:	ff 93       	push	r31

    scanf("%s",var_str);
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <__vector_18+0x2c>
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <__vector_18+0x2e>
    2eb2:	87 eb       	ldi	r24, 0xB7	; 183
    2eb4:	91 e0       	ldi	r25, 0x01	; 1
    2eb6:	ed b7       	in	r30, 0x3d	; 61
    2eb8:	fe b7       	in	r31, 0x3e	; 62
    2eba:	92 83       	std	Z+2, r25	; 0x02
    2ebc:	81 83       	std	Z+1, r24	; 0x01
    2ebe:	ca e4       	ldi	r28, 0x4A	; 74
    2ec0:	d6 e0       	ldi	r29, 0x06	; 6
    2ec2:	d4 83       	std	Z+4, r29	; 0x04
    2ec4:	c3 83       	std	Z+3, r28	; 0x03
    2ec6:	0e 94 3c 18 	call	0x3078	; 0x3078 <scanf>
	printf("\n\r");
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	8a eb       	ldi	r24, 0xBA	; 186
    2ed0:	91 e0       	ldi	r25, 0x01	; 1
    2ed2:	ed b7       	in	r30, 0x3d	; 61
    2ed4:	fe b7       	in	r31, 0x3e	; 62
    2ed6:	92 83       	std	Z+2, r25	; 0x02
    2ed8:	81 83       	std	Z+1, r24	; 0x01
    2eda:	0e 94 2a 18 	call	0x3054	; 0x3054 <printf>
    if(strcmp(var_str,"test")==0){
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	6d eb       	ldi	r22, 0xBD	; 189
    2ee6:	71 e0       	ldi	r23, 0x01	; 1
    2ee8:	0e 94 21 18 	call	0x3042	; 0x3042 <strcmp>
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	61 f4       	brne	.+24     	; 0x2f08 <__vector_18+0x84>
        printf("serial OK \n\r");
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <__vector_18+0x6e>
    2ef2:	82 ec       	ldi	r24, 0xC2	; 194
    2ef4:	91 e0       	ldi	r25, 0x01	; 1
    2ef6:	ed b7       	in	r30, 0x3d	; 61
    2ef8:	fe b7       	in	r31, 0x3e	; 62
    2efa:	92 83       	std	Z+2, r25	; 0x02
    2efc:	81 83       	std	Z+1, r24	; 0x01
    2efe:	0e 94 2a 18 	call	0x3054	; 0x3054 <printf>
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	10 c0       	rjmp	.+32     	; 0x2f28 <__vector_18+0xa4>
    }
    else{
        printf("%s? \n\r",var_str);
    2f08:	00 d0       	rcall	.+0      	; 0x2f0a <__vector_18+0x86>
    2f0a:	00 d0       	rcall	.+0      	; 0x2f0c <__vector_18+0x88>
    2f0c:	8f ec       	ldi	r24, 0xCF	; 207
    2f0e:	91 e0       	ldi	r25, 0x01	; 1
    2f10:	ed b7       	in	r30, 0x3d	; 61
    2f12:	fe b7       	in	r31, 0x3e	; 62
    2f14:	92 83       	std	Z+2, r25	; 0x02
    2f16:	81 83       	std	Z+1, r24	; 0x01
    2f18:	d4 83       	std	Z+4, r29	; 0x04
    2f1a:	c3 83       	std	Z+3, r28	; 0x03
    2f1c:	0e 94 2a 18 	call	0x3054	; 0x3054 <printf>
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    }

    return;
}
    2f28:	ff 91       	pop	r31
    2f2a:	ef 91       	pop	r30
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	bf 91       	pop	r27
    2f32:	af 91       	pop	r26
    2f34:	9f 91       	pop	r25
    2f36:	8f 91       	pop	r24
    2f38:	7f 91       	pop	r23
    2f3a:	6f 91       	pop	r22
    2f3c:	5f 91       	pop	r21
    2f3e:	4f 91       	pop	r20
    2f40:	3f 91       	pop	r19
    2f42:	2f 91       	pop	r18
    2f44:	0f 90       	pop	r0
    2f46:	0b be       	out	0x3b, r0	; 59
    2f48:	0f 90       	pop	r0
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	0f 90       	pop	r0
    2f4e:	1f 90       	pop	r1
    2f50:	18 95       	reti

00002f52 <__mulsi3>:
    2f52:	62 9f       	mul	r22, r18
    2f54:	d0 01       	movw	r26, r0
    2f56:	73 9f       	mul	r23, r19
    2f58:	f0 01       	movw	r30, r0
    2f5a:	82 9f       	mul	r24, r18
    2f5c:	e0 0d       	add	r30, r0
    2f5e:	f1 1d       	adc	r31, r1
    2f60:	64 9f       	mul	r22, r20
    2f62:	e0 0d       	add	r30, r0
    2f64:	f1 1d       	adc	r31, r1
    2f66:	92 9f       	mul	r25, r18
    2f68:	f0 0d       	add	r31, r0
    2f6a:	83 9f       	mul	r24, r19
    2f6c:	f0 0d       	add	r31, r0
    2f6e:	74 9f       	mul	r23, r20
    2f70:	f0 0d       	add	r31, r0
    2f72:	65 9f       	mul	r22, r21
    2f74:	f0 0d       	add	r31, r0
    2f76:	99 27       	eor	r25, r25
    2f78:	72 9f       	mul	r23, r18
    2f7a:	b0 0d       	add	r27, r0
    2f7c:	e1 1d       	adc	r30, r1
    2f7e:	f9 1f       	adc	r31, r25
    2f80:	63 9f       	mul	r22, r19
    2f82:	b0 0d       	add	r27, r0
    2f84:	e1 1d       	adc	r30, r1
    2f86:	f9 1f       	adc	r31, r25
    2f88:	bd 01       	movw	r22, r26
    2f8a:	cf 01       	movw	r24, r30
    2f8c:	11 24       	eor	r1, r1
    2f8e:	08 95       	ret

00002f90 <__udivmodsi4>:
    2f90:	a1 e2       	ldi	r26, 0x21	; 33
    2f92:	1a 2e       	mov	r1, r26
    2f94:	aa 1b       	sub	r26, r26
    2f96:	bb 1b       	sub	r27, r27
    2f98:	fd 01       	movw	r30, r26
    2f9a:	0d c0       	rjmp	.+26     	; 0x2fb6 <__udivmodsi4_ep>

00002f9c <__udivmodsi4_loop>:
    2f9c:	aa 1f       	adc	r26, r26
    2f9e:	bb 1f       	adc	r27, r27
    2fa0:	ee 1f       	adc	r30, r30
    2fa2:	ff 1f       	adc	r31, r31
    2fa4:	a2 17       	cp	r26, r18
    2fa6:	b3 07       	cpc	r27, r19
    2fa8:	e4 07       	cpc	r30, r20
    2faa:	f5 07       	cpc	r31, r21
    2fac:	20 f0       	brcs	.+8      	; 0x2fb6 <__udivmodsi4_ep>
    2fae:	a2 1b       	sub	r26, r18
    2fb0:	b3 0b       	sbc	r27, r19
    2fb2:	e4 0b       	sbc	r30, r20
    2fb4:	f5 0b       	sbc	r31, r21

00002fb6 <__udivmodsi4_ep>:
    2fb6:	66 1f       	adc	r22, r22
    2fb8:	77 1f       	adc	r23, r23
    2fba:	88 1f       	adc	r24, r24
    2fbc:	99 1f       	adc	r25, r25
    2fbe:	1a 94       	dec	r1
    2fc0:	69 f7       	brne	.-38     	; 0x2f9c <__udivmodsi4_loop>
    2fc2:	60 95       	com	r22
    2fc4:	70 95       	com	r23
    2fc6:	80 95       	com	r24
    2fc8:	90 95       	com	r25
    2fca:	9b 01       	movw	r18, r22
    2fcc:	ac 01       	movw	r20, r24
    2fce:	bd 01       	movw	r22, r26
    2fd0:	cf 01       	movw	r24, r30
    2fd2:	08 95       	ret

00002fd4 <__prologue_saves__>:
    2fd4:	2f 92       	push	r2
    2fd6:	3f 92       	push	r3
    2fd8:	4f 92       	push	r4
    2fda:	5f 92       	push	r5
    2fdc:	6f 92       	push	r6
    2fde:	7f 92       	push	r7
    2fe0:	8f 92       	push	r8
    2fe2:	9f 92       	push	r9
    2fe4:	af 92       	push	r10
    2fe6:	bf 92       	push	r11
    2fe8:	cf 92       	push	r12
    2fea:	df 92       	push	r13
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	ca 1b       	sub	r28, r26
    2ffe:	db 0b       	sbc	r29, r27
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
    300a:	09 94       	ijmp

0000300c <__epilogue_restores__>:
    300c:	2a 88       	ldd	r2, Y+18	; 0x12
    300e:	39 88       	ldd	r3, Y+17	; 0x11
    3010:	48 88       	ldd	r4, Y+16	; 0x10
    3012:	5f 84       	ldd	r5, Y+15	; 0x0f
    3014:	6e 84       	ldd	r6, Y+14	; 0x0e
    3016:	7d 84       	ldd	r7, Y+13	; 0x0d
    3018:	8c 84       	ldd	r8, Y+12	; 0x0c
    301a:	9b 84       	ldd	r9, Y+11	; 0x0b
    301c:	aa 84       	ldd	r10, Y+10	; 0x0a
    301e:	b9 84       	ldd	r11, Y+9	; 0x09
    3020:	c8 84       	ldd	r12, Y+8	; 0x08
    3022:	df 80       	ldd	r13, Y+7	; 0x07
    3024:	ee 80       	ldd	r14, Y+6	; 0x06
    3026:	fd 80       	ldd	r15, Y+5	; 0x05
    3028:	0c 81       	ldd	r16, Y+4	; 0x04
    302a:	1b 81       	ldd	r17, Y+3	; 0x03
    302c:	aa 81       	ldd	r26, Y+2	; 0x02
    302e:	b9 81       	ldd	r27, Y+1	; 0x01
    3030:	ce 0f       	add	r28, r30
    3032:	d1 1d       	adc	r29, r1
    3034:	0f b6       	in	r0, 0x3f	; 63
    3036:	f8 94       	cli
    3038:	de bf       	out	0x3e, r29	; 62
    303a:	0f be       	out	0x3f, r0	; 63
    303c:	cd bf       	out	0x3d, r28	; 61
    303e:	ed 01       	movw	r28, r26
    3040:	08 95       	ret

00003042 <strcmp>:
    3042:	fb 01       	movw	r30, r22
    3044:	dc 01       	movw	r26, r24
    3046:	8d 91       	ld	r24, X+
    3048:	01 90       	ld	r0, Z+
    304a:	80 19       	sub	r24, r0
    304c:	01 10       	cpse	r0, r1
    304e:	d9 f3       	breq	.-10     	; 0x3046 <strcmp+0x4>
    3050:	99 0b       	sbc	r25, r25
    3052:	08 95       	ret

00003054 <printf>:
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	fe 01       	movw	r30, r28
    305e:	35 96       	adiw	r30, 0x05	; 5
    3060:	61 91       	ld	r22, Z+
    3062:	71 91       	ld	r23, Z+
    3064:	80 91 5c 06 	lds	r24, 0x065C
    3068:	90 91 5d 06 	lds	r25, 0x065D
    306c:	af 01       	movw	r20, r30
    306e:	0e 94 4e 18 	call	0x309c	; 0x309c <vfprintf>
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <scanf>:
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	fe 01       	movw	r30, r28
    3082:	35 96       	adiw	r30, 0x05	; 5
    3084:	61 91       	ld	r22, Z+
    3086:	71 91       	ld	r23, Z+
    3088:	80 91 5a 06 	lds	r24, 0x065A
    308c:	90 91 5b 06 	lds	r25, 0x065B
    3090:	af 01       	movw	r20, r30
    3092:	0e 94 03 1c 	call	0x3806	; 0x3806 <vfscanf>
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <vfprintf>:
    309c:	2f 92       	push	r2
    309e:	3f 92       	push	r3
    30a0:	4f 92       	push	r4
    30a2:	5f 92       	push	r5
    30a4:	6f 92       	push	r6
    30a6:	7f 92       	push	r7
    30a8:	8f 92       	push	r8
    30aa:	9f 92       	push	r9
    30ac:	af 92       	push	r10
    30ae:	bf 92       	push	r11
    30b0:	cf 92       	push	r12
    30b2:	df 92       	push	r13
    30b4:	ef 92       	push	r14
    30b6:	ff 92       	push	r15
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	2b 97       	sbiw	r28, 0x0b	; 11
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	3c 01       	movw	r6, r24
    30d2:	2b 01       	movw	r4, r22
    30d4:	5a 01       	movw	r10, r20
    30d6:	fc 01       	movw	r30, r24
    30d8:	17 82       	std	Z+7, r1	; 0x07
    30da:	16 82       	std	Z+6, r1	; 0x06
    30dc:	83 81       	ldd	r24, Z+3	; 0x03
    30de:	81 fd       	sbrc	r24, 1
    30e0:	03 c0       	rjmp	.+6      	; 0x30e8 <vfprintf+0x4c>
    30e2:	6f ef       	ldi	r22, 0xFF	; 255
    30e4:	7f ef       	ldi	r23, 0xFF	; 255
    30e6:	c6 c1       	rjmp	.+908    	; 0x3474 <vfprintf+0x3d8>
    30e8:	9a e0       	ldi	r25, 0x0A	; 10
    30ea:	89 2e       	mov	r8, r25
    30ec:	1e 01       	movw	r2, r28
    30ee:	08 94       	sec
    30f0:	21 1c       	adc	r2, r1
    30f2:	31 1c       	adc	r3, r1
    30f4:	f3 01       	movw	r30, r6
    30f6:	23 81       	ldd	r18, Z+3	; 0x03
    30f8:	f2 01       	movw	r30, r4
    30fa:	23 fd       	sbrc	r18, 3
    30fc:	85 91       	lpm	r24, Z+
    30fe:	23 ff       	sbrs	r18, 3
    3100:	81 91       	ld	r24, Z+
    3102:	2f 01       	movw	r4, r30
    3104:	88 23       	and	r24, r24
    3106:	09 f4       	brne	.+2      	; 0x310a <vfprintf+0x6e>
    3108:	b2 c1       	rjmp	.+868    	; 0x346e <vfprintf+0x3d2>
    310a:	85 32       	cpi	r24, 0x25	; 37
    310c:	39 f4       	brne	.+14     	; 0x311c <vfprintf+0x80>
    310e:	23 fd       	sbrc	r18, 3
    3110:	85 91       	lpm	r24, Z+
    3112:	23 ff       	sbrs	r18, 3
    3114:	81 91       	ld	r24, Z+
    3116:	2f 01       	movw	r4, r30
    3118:	85 32       	cpi	r24, 0x25	; 37
    311a:	29 f4       	brne	.+10     	; 0x3126 <vfprintf+0x8a>
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	b3 01       	movw	r22, r6
    3120:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <fputc>
    3124:	e7 cf       	rjmp	.-50     	; 0x30f4 <vfprintf+0x58>
    3126:	98 2f       	mov	r25, r24
    3128:	ff 24       	eor	r15, r15
    312a:	ee 24       	eor	r14, r14
    312c:	99 24       	eor	r9, r9
    312e:	ff e1       	ldi	r31, 0x1F	; 31
    3130:	ff 15       	cp	r31, r15
    3132:	d0 f0       	brcs	.+52     	; 0x3168 <vfprintf+0xcc>
    3134:	9b 32       	cpi	r25, 0x2B	; 43
    3136:	69 f0       	breq	.+26     	; 0x3152 <vfprintf+0xb6>
    3138:	9c 32       	cpi	r25, 0x2C	; 44
    313a:	28 f4       	brcc	.+10     	; 0x3146 <vfprintf+0xaa>
    313c:	90 32       	cpi	r25, 0x20	; 32
    313e:	59 f0       	breq	.+22     	; 0x3156 <vfprintf+0xba>
    3140:	93 32       	cpi	r25, 0x23	; 35
    3142:	91 f4       	brne	.+36     	; 0x3168 <vfprintf+0xcc>
    3144:	0e c0       	rjmp	.+28     	; 0x3162 <vfprintf+0xc6>
    3146:	9d 32       	cpi	r25, 0x2D	; 45
    3148:	49 f0       	breq	.+18     	; 0x315c <vfprintf+0xc0>
    314a:	90 33       	cpi	r25, 0x30	; 48
    314c:	69 f4       	brne	.+26     	; 0x3168 <vfprintf+0xcc>
    314e:	41 e0       	ldi	r20, 0x01	; 1
    3150:	24 c0       	rjmp	.+72     	; 0x319a <vfprintf+0xfe>
    3152:	52 e0       	ldi	r21, 0x02	; 2
    3154:	f5 2a       	or	r15, r21
    3156:	84 e0       	ldi	r24, 0x04	; 4
    3158:	f8 2a       	or	r15, r24
    315a:	28 c0       	rjmp	.+80     	; 0x31ac <vfprintf+0x110>
    315c:	98 e0       	ldi	r25, 0x08	; 8
    315e:	f9 2a       	or	r15, r25
    3160:	25 c0       	rjmp	.+74     	; 0x31ac <vfprintf+0x110>
    3162:	e0 e1       	ldi	r30, 0x10	; 16
    3164:	fe 2a       	or	r15, r30
    3166:	22 c0       	rjmp	.+68     	; 0x31ac <vfprintf+0x110>
    3168:	f7 fc       	sbrc	r15, 7
    316a:	29 c0       	rjmp	.+82     	; 0x31be <vfprintf+0x122>
    316c:	89 2f       	mov	r24, r25
    316e:	80 53       	subi	r24, 0x30	; 48
    3170:	8a 30       	cpi	r24, 0x0A	; 10
    3172:	70 f4       	brcc	.+28     	; 0x3190 <vfprintf+0xf4>
    3174:	f6 fe       	sbrs	r15, 6
    3176:	05 c0       	rjmp	.+10     	; 0x3182 <vfprintf+0xe6>
    3178:	98 9c       	mul	r9, r8
    317a:	90 2c       	mov	r9, r0
    317c:	11 24       	eor	r1, r1
    317e:	98 0e       	add	r9, r24
    3180:	15 c0       	rjmp	.+42     	; 0x31ac <vfprintf+0x110>
    3182:	e8 9c       	mul	r14, r8
    3184:	e0 2c       	mov	r14, r0
    3186:	11 24       	eor	r1, r1
    3188:	e8 0e       	add	r14, r24
    318a:	f0 e2       	ldi	r31, 0x20	; 32
    318c:	ff 2a       	or	r15, r31
    318e:	0e c0       	rjmp	.+28     	; 0x31ac <vfprintf+0x110>
    3190:	9e 32       	cpi	r25, 0x2E	; 46
    3192:	29 f4       	brne	.+10     	; 0x319e <vfprintf+0x102>
    3194:	f6 fc       	sbrc	r15, 6
    3196:	6b c1       	rjmp	.+726    	; 0x346e <vfprintf+0x3d2>
    3198:	40 e4       	ldi	r20, 0x40	; 64
    319a:	f4 2a       	or	r15, r20
    319c:	07 c0       	rjmp	.+14     	; 0x31ac <vfprintf+0x110>
    319e:	9c 36       	cpi	r25, 0x6C	; 108
    31a0:	19 f4       	brne	.+6      	; 0x31a8 <vfprintf+0x10c>
    31a2:	50 e8       	ldi	r21, 0x80	; 128
    31a4:	f5 2a       	or	r15, r21
    31a6:	02 c0       	rjmp	.+4      	; 0x31ac <vfprintf+0x110>
    31a8:	98 36       	cpi	r25, 0x68	; 104
    31aa:	49 f4       	brne	.+18     	; 0x31be <vfprintf+0x122>
    31ac:	f2 01       	movw	r30, r4
    31ae:	23 fd       	sbrc	r18, 3
    31b0:	95 91       	lpm	r25, Z+
    31b2:	23 ff       	sbrs	r18, 3
    31b4:	91 91       	ld	r25, Z+
    31b6:	2f 01       	movw	r4, r30
    31b8:	99 23       	and	r25, r25
    31ba:	09 f0       	breq	.+2      	; 0x31be <vfprintf+0x122>
    31bc:	b8 cf       	rjmp	.-144    	; 0x312e <vfprintf+0x92>
    31be:	89 2f       	mov	r24, r25
    31c0:	85 54       	subi	r24, 0x45	; 69
    31c2:	83 30       	cpi	r24, 0x03	; 3
    31c4:	18 f0       	brcs	.+6      	; 0x31cc <vfprintf+0x130>
    31c6:	80 52       	subi	r24, 0x20	; 32
    31c8:	83 30       	cpi	r24, 0x03	; 3
    31ca:	38 f4       	brcc	.+14     	; 0x31da <vfprintf+0x13e>
    31cc:	44 e0       	ldi	r20, 0x04	; 4
    31ce:	50 e0       	ldi	r21, 0x00	; 0
    31d0:	a4 0e       	add	r10, r20
    31d2:	b5 1e       	adc	r11, r21
    31d4:	5f e3       	ldi	r21, 0x3F	; 63
    31d6:	59 83       	std	Y+1, r21	; 0x01
    31d8:	0f c0       	rjmp	.+30     	; 0x31f8 <vfprintf+0x15c>
    31da:	93 36       	cpi	r25, 0x63	; 99
    31dc:	31 f0       	breq	.+12     	; 0x31ea <vfprintf+0x14e>
    31de:	93 37       	cpi	r25, 0x73	; 115
    31e0:	79 f0       	breq	.+30     	; 0x3200 <vfprintf+0x164>
    31e2:	93 35       	cpi	r25, 0x53	; 83
    31e4:	09 f0       	breq	.+2      	; 0x31e8 <vfprintf+0x14c>
    31e6:	56 c0       	rjmp	.+172    	; 0x3294 <vfprintf+0x1f8>
    31e8:	20 c0       	rjmp	.+64     	; 0x322a <vfprintf+0x18e>
    31ea:	f5 01       	movw	r30, r10
    31ec:	80 81       	ld	r24, Z
    31ee:	89 83       	std	Y+1, r24	; 0x01
    31f0:	42 e0       	ldi	r20, 0x02	; 2
    31f2:	50 e0       	ldi	r21, 0x00	; 0
    31f4:	a4 0e       	add	r10, r20
    31f6:	b5 1e       	adc	r11, r21
    31f8:	61 01       	movw	r12, r2
    31fa:	01 e0       	ldi	r16, 0x01	; 1
    31fc:	10 e0       	ldi	r17, 0x00	; 0
    31fe:	12 c0       	rjmp	.+36     	; 0x3224 <vfprintf+0x188>
    3200:	f5 01       	movw	r30, r10
    3202:	c0 80       	ld	r12, Z
    3204:	d1 80       	ldd	r13, Z+1	; 0x01
    3206:	f6 fc       	sbrc	r15, 6
    3208:	03 c0       	rjmp	.+6      	; 0x3210 <vfprintf+0x174>
    320a:	6f ef       	ldi	r22, 0xFF	; 255
    320c:	7f ef       	ldi	r23, 0xFF	; 255
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <vfprintf+0x178>
    3210:	69 2d       	mov	r22, r9
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	42 e0       	ldi	r20, 0x02	; 2
    3216:	50 e0       	ldi	r21, 0x00	; 0
    3218:	a4 0e       	add	r10, r20
    321a:	b5 1e       	adc	r11, r21
    321c:	c6 01       	movw	r24, r12
    321e:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <strnlen>
    3222:	8c 01       	movw	r16, r24
    3224:	5f e7       	ldi	r21, 0x7F	; 127
    3226:	f5 22       	and	r15, r21
    3228:	14 c0       	rjmp	.+40     	; 0x3252 <vfprintf+0x1b6>
    322a:	f5 01       	movw	r30, r10
    322c:	c0 80       	ld	r12, Z
    322e:	d1 80       	ldd	r13, Z+1	; 0x01
    3230:	f6 fc       	sbrc	r15, 6
    3232:	03 c0       	rjmp	.+6      	; 0x323a <vfprintf+0x19e>
    3234:	6f ef       	ldi	r22, 0xFF	; 255
    3236:	7f ef       	ldi	r23, 0xFF	; 255
    3238:	02 c0       	rjmp	.+4      	; 0x323e <vfprintf+0x1a2>
    323a:	69 2d       	mov	r22, r9
    323c:	70 e0       	ldi	r23, 0x00	; 0
    323e:	42 e0       	ldi	r20, 0x02	; 2
    3240:	50 e0       	ldi	r21, 0x00	; 0
    3242:	a4 0e       	add	r10, r20
    3244:	b5 1e       	adc	r11, r21
    3246:	c6 01       	movw	r24, r12
    3248:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <strnlen_P>
    324c:	8c 01       	movw	r16, r24
    324e:	50 e8       	ldi	r21, 0x80	; 128
    3250:	f5 2a       	or	r15, r21
    3252:	f3 fe       	sbrs	r15, 3
    3254:	07 c0       	rjmp	.+14     	; 0x3264 <vfprintf+0x1c8>
    3256:	1a c0       	rjmp	.+52     	; 0x328c <vfprintf+0x1f0>
    3258:	80 e2       	ldi	r24, 0x20	; 32
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	b3 01       	movw	r22, r6
    325e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <fputc>
    3262:	ea 94       	dec	r14
    3264:	8e 2d       	mov	r24, r14
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	08 17       	cp	r16, r24
    326a:	19 07       	cpc	r17, r25
    326c:	a8 f3       	brcs	.-22     	; 0x3258 <vfprintf+0x1bc>
    326e:	0e c0       	rjmp	.+28     	; 0x328c <vfprintf+0x1f0>
    3270:	f6 01       	movw	r30, r12
    3272:	f7 fc       	sbrc	r15, 7
    3274:	85 91       	lpm	r24, Z+
    3276:	f7 fe       	sbrs	r15, 7
    3278:	81 91       	ld	r24, Z+
    327a:	6f 01       	movw	r12, r30
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	b3 01       	movw	r22, r6
    3280:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <fputc>
    3284:	e1 10       	cpse	r14, r1
    3286:	ea 94       	dec	r14
    3288:	01 50       	subi	r16, 0x01	; 1
    328a:	10 40       	sbci	r17, 0x00	; 0
    328c:	01 15       	cp	r16, r1
    328e:	11 05       	cpc	r17, r1
    3290:	79 f7       	brne	.-34     	; 0x3270 <vfprintf+0x1d4>
    3292:	ea c0       	rjmp	.+468    	; 0x3468 <vfprintf+0x3cc>
    3294:	94 36       	cpi	r25, 0x64	; 100
    3296:	11 f0       	breq	.+4      	; 0x329c <vfprintf+0x200>
    3298:	99 36       	cpi	r25, 0x69	; 105
    329a:	69 f5       	brne	.+90     	; 0x32f6 <vfprintf+0x25a>
    329c:	f7 fe       	sbrs	r15, 7
    329e:	08 c0       	rjmp	.+16     	; 0x32b0 <vfprintf+0x214>
    32a0:	f5 01       	movw	r30, r10
    32a2:	20 81       	ld	r18, Z
    32a4:	31 81       	ldd	r19, Z+1	; 0x01
    32a6:	42 81       	ldd	r20, Z+2	; 0x02
    32a8:	53 81       	ldd	r21, Z+3	; 0x03
    32aa:	84 e0       	ldi	r24, 0x04	; 4
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	0a c0       	rjmp	.+20     	; 0x32c4 <vfprintf+0x228>
    32b0:	f5 01       	movw	r30, r10
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	9c 01       	movw	r18, r24
    32b8:	44 27       	eor	r20, r20
    32ba:	37 fd       	sbrc	r19, 7
    32bc:	40 95       	com	r20
    32be:	54 2f       	mov	r21, r20
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	a8 0e       	add	r10, r24
    32c6:	b9 1e       	adc	r11, r25
    32c8:	9f e6       	ldi	r25, 0x6F	; 111
    32ca:	f9 22       	and	r15, r25
    32cc:	57 ff       	sbrs	r21, 7
    32ce:	09 c0       	rjmp	.+18     	; 0x32e2 <vfprintf+0x246>
    32d0:	50 95       	com	r21
    32d2:	40 95       	com	r20
    32d4:	30 95       	com	r19
    32d6:	21 95       	neg	r18
    32d8:	3f 4f       	sbci	r19, 0xFF	; 255
    32da:	4f 4f       	sbci	r20, 0xFF	; 255
    32dc:	5f 4f       	sbci	r21, 0xFF	; 255
    32de:	e0 e8       	ldi	r30, 0x80	; 128
    32e0:	fe 2a       	or	r15, r30
    32e2:	ca 01       	movw	r24, r20
    32e4:	b9 01       	movw	r22, r18
    32e6:	a1 01       	movw	r20, r2
    32e8:	2a e0       	ldi	r18, 0x0A	; 10
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__ultoa_invert>
    32f0:	d8 2e       	mov	r13, r24
    32f2:	d2 18       	sub	r13, r2
    32f4:	40 c0       	rjmp	.+128    	; 0x3376 <vfprintf+0x2da>
    32f6:	95 37       	cpi	r25, 0x75	; 117
    32f8:	29 f4       	brne	.+10     	; 0x3304 <vfprintf+0x268>
    32fa:	1f 2d       	mov	r17, r15
    32fc:	1f 7e       	andi	r17, 0xEF	; 239
    32fe:	2a e0       	ldi	r18, 0x0A	; 10
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	1d c0       	rjmp	.+58     	; 0x333e <vfprintf+0x2a2>
    3304:	1f 2d       	mov	r17, r15
    3306:	19 7f       	andi	r17, 0xF9	; 249
    3308:	9f 36       	cpi	r25, 0x6F	; 111
    330a:	61 f0       	breq	.+24     	; 0x3324 <vfprintf+0x288>
    330c:	90 37       	cpi	r25, 0x70	; 112
    330e:	20 f4       	brcc	.+8      	; 0x3318 <vfprintf+0x27c>
    3310:	98 35       	cpi	r25, 0x58	; 88
    3312:	09 f0       	breq	.+2      	; 0x3316 <vfprintf+0x27a>
    3314:	ac c0       	rjmp	.+344    	; 0x346e <vfprintf+0x3d2>
    3316:	0f c0       	rjmp	.+30     	; 0x3336 <vfprintf+0x29a>
    3318:	90 37       	cpi	r25, 0x70	; 112
    331a:	39 f0       	breq	.+14     	; 0x332a <vfprintf+0x28e>
    331c:	98 37       	cpi	r25, 0x78	; 120
    331e:	09 f0       	breq	.+2      	; 0x3322 <vfprintf+0x286>
    3320:	a6 c0       	rjmp	.+332    	; 0x346e <vfprintf+0x3d2>
    3322:	04 c0       	rjmp	.+8      	; 0x332c <vfprintf+0x290>
    3324:	28 e0       	ldi	r18, 0x08	; 8
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	0a c0       	rjmp	.+20     	; 0x333e <vfprintf+0x2a2>
    332a:	10 61       	ori	r17, 0x10	; 16
    332c:	14 fd       	sbrc	r17, 4
    332e:	14 60       	ori	r17, 0x04	; 4
    3330:	20 e1       	ldi	r18, 0x10	; 16
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	04 c0       	rjmp	.+8      	; 0x333e <vfprintf+0x2a2>
    3336:	14 fd       	sbrc	r17, 4
    3338:	16 60       	ori	r17, 0x06	; 6
    333a:	20 e1       	ldi	r18, 0x10	; 16
    333c:	32 e0       	ldi	r19, 0x02	; 2
    333e:	17 ff       	sbrs	r17, 7
    3340:	08 c0       	rjmp	.+16     	; 0x3352 <vfprintf+0x2b6>
    3342:	f5 01       	movw	r30, r10
    3344:	60 81       	ld	r22, Z
    3346:	71 81       	ldd	r23, Z+1	; 0x01
    3348:	82 81       	ldd	r24, Z+2	; 0x02
    334a:	93 81       	ldd	r25, Z+3	; 0x03
    334c:	44 e0       	ldi	r20, 0x04	; 4
    334e:	50 e0       	ldi	r21, 0x00	; 0
    3350:	08 c0       	rjmp	.+16     	; 0x3362 <vfprintf+0x2c6>
    3352:	f5 01       	movw	r30, r10
    3354:	80 81       	ld	r24, Z
    3356:	91 81       	ldd	r25, Z+1	; 0x01
    3358:	bc 01       	movw	r22, r24
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	42 e0       	ldi	r20, 0x02	; 2
    3360:	50 e0       	ldi	r21, 0x00	; 0
    3362:	a4 0e       	add	r10, r20
    3364:	b5 1e       	adc	r11, r21
    3366:	a1 01       	movw	r20, r2
    3368:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__ultoa_invert>
    336c:	d8 2e       	mov	r13, r24
    336e:	d2 18       	sub	r13, r2
    3370:	8f e7       	ldi	r24, 0x7F	; 127
    3372:	f8 2e       	mov	r15, r24
    3374:	f1 22       	and	r15, r17
    3376:	f6 fe       	sbrs	r15, 6
    3378:	0b c0       	rjmp	.+22     	; 0x3390 <vfprintf+0x2f4>
    337a:	5e ef       	ldi	r21, 0xFE	; 254
    337c:	f5 22       	and	r15, r21
    337e:	d9 14       	cp	r13, r9
    3380:	38 f4       	brcc	.+14     	; 0x3390 <vfprintf+0x2f4>
    3382:	f4 fe       	sbrs	r15, 4
    3384:	07 c0       	rjmp	.+14     	; 0x3394 <vfprintf+0x2f8>
    3386:	f2 fc       	sbrc	r15, 2
    3388:	05 c0       	rjmp	.+10     	; 0x3394 <vfprintf+0x2f8>
    338a:	8f ee       	ldi	r24, 0xEF	; 239
    338c:	f8 22       	and	r15, r24
    338e:	02 c0       	rjmp	.+4      	; 0x3394 <vfprintf+0x2f8>
    3390:	1d 2d       	mov	r17, r13
    3392:	01 c0       	rjmp	.+2      	; 0x3396 <vfprintf+0x2fa>
    3394:	19 2d       	mov	r17, r9
    3396:	f4 fe       	sbrs	r15, 4
    3398:	0d c0       	rjmp	.+26     	; 0x33b4 <vfprintf+0x318>
    339a:	fe 01       	movw	r30, r28
    339c:	ed 0d       	add	r30, r13
    339e:	f1 1d       	adc	r31, r1
    33a0:	80 81       	ld	r24, Z
    33a2:	80 33       	cpi	r24, 0x30	; 48
    33a4:	19 f4       	brne	.+6      	; 0x33ac <vfprintf+0x310>
    33a6:	99 ee       	ldi	r25, 0xE9	; 233
    33a8:	f9 22       	and	r15, r25
    33aa:	08 c0       	rjmp	.+16     	; 0x33bc <vfprintf+0x320>
    33ac:	1f 5f       	subi	r17, 0xFF	; 255
    33ae:	f2 fe       	sbrs	r15, 2
    33b0:	05 c0       	rjmp	.+10     	; 0x33bc <vfprintf+0x320>
    33b2:	03 c0       	rjmp	.+6      	; 0x33ba <vfprintf+0x31e>
    33b4:	8f 2d       	mov	r24, r15
    33b6:	86 78       	andi	r24, 0x86	; 134
    33b8:	09 f0       	breq	.+2      	; 0x33bc <vfprintf+0x320>
    33ba:	1f 5f       	subi	r17, 0xFF	; 255
    33bc:	0f 2d       	mov	r16, r15
    33be:	f3 fc       	sbrc	r15, 3
    33c0:	14 c0       	rjmp	.+40     	; 0x33ea <vfprintf+0x34e>
    33c2:	f0 fe       	sbrs	r15, 0
    33c4:	0f c0       	rjmp	.+30     	; 0x33e4 <vfprintf+0x348>
    33c6:	1e 15       	cp	r17, r14
    33c8:	10 f0       	brcs	.+4      	; 0x33ce <vfprintf+0x332>
    33ca:	9d 2c       	mov	r9, r13
    33cc:	0b c0       	rjmp	.+22     	; 0x33e4 <vfprintf+0x348>
    33ce:	9d 2c       	mov	r9, r13
    33d0:	9e 0c       	add	r9, r14
    33d2:	91 1a       	sub	r9, r17
    33d4:	1e 2d       	mov	r17, r14
    33d6:	06 c0       	rjmp	.+12     	; 0x33e4 <vfprintf+0x348>
    33d8:	80 e2       	ldi	r24, 0x20	; 32
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	b3 01       	movw	r22, r6
    33de:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <fputc>
    33e2:	1f 5f       	subi	r17, 0xFF	; 255
    33e4:	1e 15       	cp	r17, r14
    33e6:	c0 f3       	brcs	.-16     	; 0x33d8 <vfprintf+0x33c>
    33e8:	04 c0       	rjmp	.+8      	; 0x33f2 <vfprintf+0x356>
    33ea:	1e 15       	cp	r17, r14
    33ec:	10 f4       	brcc	.+4      	; 0x33f2 <vfprintf+0x356>
    33ee:	e1 1a       	sub	r14, r17
    33f0:	01 c0       	rjmp	.+2      	; 0x33f4 <vfprintf+0x358>
    33f2:	ee 24       	eor	r14, r14
    33f4:	04 ff       	sbrs	r16, 4
    33f6:	0f c0       	rjmp	.+30     	; 0x3416 <vfprintf+0x37a>
    33f8:	80 e3       	ldi	r24, 0x30	; 48
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	b3 01       	movw	r22, r6
    33fe:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <fputc>
    3402:	02 ff       	sbrs	r16, 2
    3404:	1d c0       	rjmp	.+58     	; 0x3440 <vfprintf+0x3a4>
    3406:	01 fd       	sbrc	r16, 1
    3408:	03 c0       	rjmp	.+6      	; 0x3410 <vfprintf+0x374>
    340a:	88 e7       	ldi	r24, 0x78	; 120
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	0e c0       	rjmp	.+28     	; 0x342c <vfprintf+0x390>
    3410:	88 e5       	ldi	r24, 0x58	; 88
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	0b c0       	rjmp	.+22     	; 0x342c <vfprintf+0x390>
    3416:	80 2f       	mov	r24, r16
    3418:	86 78       	andi	r24, 0x86	; 134
    341a:	91 f0       	breq	.+36     	; 0x3440 <vfprintf+0x3a4>
    341c:	01 ff       	sbrs	r16, 1
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <vfprintf+0x388>
    3420:	8b e2       	ldi	r24, 0x2B	; 43
    3422:	01 c0       	rjmp	.+2      	; 0x3426 <vfprintf+0x38a>
    3424:	80 e2       	ldi	r24, 0x20	; 32
    3426:	f7 fc       	sbrc	r15, 7
    3428:	8d e2       	ldi	r24, 0x2D	; 45
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	b3 01       	movw	r22, r6
    342e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <fputc>
    3432:	06 c0       	rjmp	.+12     	; 0x3440 <vfprintf+0x3a4>
    3434:	80 e3       	ldi	r24, 0x30	; 48
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	b3 01       	movw	r22, r6
    343a:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <fputc>
    343e:	9a 94       	dec	r9
    3440:	d9 14       	cp	r13, r9
    3442:	c0 f3       	brcs	.-16     	; 0x3434 <vfprintf+0x398>
    3444:	da 94       	dec	r13
    3446:	f1 01       	movw	r30, r2
    3448:	ed 0d       	add	r30, r13
    344a:	f1 1d       	adc	r31, r1
    344c:	80 81       	ld	r24, Z
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	b3 01       	movw	r22, r6
    3452:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <fputc>
    3456:	dd 20       	and	r13, r13
    3458:	a9 f7       	brne	.-22     	; 0x3444 <vfprintf+0x3a8>
    345a:	06 c0       	rjmp	.+12     	; 0x3468 <vfprintf+0x3cc>
    345c:	80 e2       	ldi	r24, 0x20	; 32
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	b3 01       	movw	r22, r6
    3462:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <fputc>
    3466:	ea 94       	dec	r14
    3468:	ee 20       	and	r14, r14
    346a:	c1 f7       	brne	.-16     	; 0x345c <vfprintf+0x3c0>
    346c:	43 ce       	rjmp	.-890    	; 0x30f4 <vfprintf+0x58>
    346e:	f3 01       	movw	r30, r6
    3470:	66 81       	ldd	r22, Z+6	; 0x06
    3472:	77 81       	ldd	r23, Z+7	; 0x07
    3474:	cb 01       	movw	r24, r22
    3476:	2b 96       	adiw	r28, 0x0b	; 11
    3478:	0f b6       	in	r0, 0x3f	; 63
    347a:	f8 94       	cli
    347c:	de bf       	out	0x3e, r29	; 62
    347e:	0f be       	out	0x3f, r0	; 63
    3480:	cd bf       	out	0x3d, r28	; 61
    3482:	cf 91       	pop	r28
    3484:	df 91       	pop	r29
    3486:	1f 91       	pop	r17
    3488:	0f 91       	pop	r16
    348a:	ff 90       	pop	r15
    348c:	ef 90       	pop	r14
    348e:	df 90       	pop	r13
    3490:	cf 90       	pop	r12
    3492:	bf 90       	pop	r11
    3494:	af 90       	pop	r10
    3496:	9f 90       	pop	r9
    3498:	8f 90       	pop	r8
    349a:	7f 90       	pop	r7
    349c:	6f 90       	pop	r6
    349e:	5f 90       	pop	r5
    34a0:	4f 90       	pop	r4
    34a2:	3f 90       	pop	r3
    34a4:	2f 90       	pop	r2
    34a6:	08 95       	ret

000034a8 <putval>:
    34a8:	fc 01       	movw	r30, r24
    34aa:	20 fd       	sbrc	r18, 0
    34ac:	08 c0       	rjmp	.+16     	; 0x34be <putval+0x16>
    34ae:	23 fd       	sbrc	r18, 3
    34b0:	05 c0       	rjmp	.+10     	; 0x34bc <putval+0x14>
    34b2:	22 ff       	sbrs	r18, 2
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <putval+0x12>
    34b6:	73 83       	std	Z+3, r23	; 0x03
    34b8:	62 83       	std	Z+2, r22	; 0x02
    34ba:	51 83       	std	Z+1, r21	; 0x01
    34bc:	40 83       	st	Z, r20
    34be:	08 95       	ret

000034c0 <mulacc>:
    34c0:	ef 92       	push	r14
    34c2:	ff 92       	push	r15
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    34c8:	44 ff       	sbrs	r20, 4
    34ca:	02 c0       	rjmp	.+4      	; 0x34d0 <mulacc+0x10>
    34cc:	33 e0       	ldi	r19, 0x03	; 3
    34ce:	11 c0       	rjmp	.+34     	; 0x34f2 <mulacc+0x32>
    34d0:	46 ff       	sbrs	r20, 6
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <mulacc+0x18>
    34d4:	34 e0       	ldi	r19, 0x04	; 4
    34d6:	0d c0       	rjmp	.+26     	; 0x34f2 <mulacc+0x32>
    34d8:	db 01       	movw	r26, r22
    34da:	fc 01       	movw	r30, r24
    34dc:	aa 0f       	add	r26, r26
    34de:	bb 1f       	adc	r27, r27
    34e0:	ee 1f       	adc	r30, r30
    34e2:	ff 1f       	adc	r31, r31
    34e4:	10 94       	com	r1
    34e6:	d1 f7       	brne	.-12     	; 0x34dc <mulacc+0x1c>
    34e8:	6a 0f       	add	r22, r26
    34ea:	7b 1f       	adc	r23, r27
    34ec:	8e 1f       	adc	r24, r30
    34ee:	9f 1f       	adc	r25, r31
    34f0:	31 e0       	ldi	r19, 0x01	; 1
    34f2:	66 0f       	add	r22, r22
    34f4:	77 1f       	adc	r23, r23
    34f6:	88 1f       	adc	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	31 50       	subi	r19, 0x01	; 1
    34fc:	d1 f7       	brne	.-12     	; 0x34f2 <mulacc+0x32>
    34fe:	7b 01       	movw	r14, r22
    3500:	8c 01       	movw	r16, r24
    3502:	e2 0e       	add	r14, r18
    3504:	f1 1c       	adc	r15, r1
    3506:	01 1d       	adc	r16, r1
    3508:	11 1d       	adc	r17, r1
    350a:	a8 01       	movw	r20, r16
    350c:	97 01       	movw	r18, r14
    350e:	b7 01       	movw	r22, r14
    3510:	ca 01       	movw	r24, r20
    3512:	1f 91       	pop	r17
    3514:	0f 91       	pop	r16
    3516:	ff 90       	pop	r15
    3518:	ef 90       	pop	r14
    351a:	08 95       	ret

0000351c <skip_spaces>:
    351c:	0f 93       	push	r16
    351e:	1f 93       	push	r17
    3520:	cf 93       	push	r28
    3522:	df 93       	push	r29
    3524:	8c 01       	movw	r16, r24
    3526:	c8 01       	movw	r24, r16
    3528:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    352c:	ec 01       	movw	r28, r24
    352e:	97 fd       	sbrc	r25, 7
    3530:	08 c0       	rjmp	.+16     	; 0x3542 <skip_spaces+0x26>
    3532:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <isspace>
    3536:	89 2b       	or	r24, r25
    3538:	b1 f7       	brne	.-20     	; 0x3526 <skip_spaces+0xa>
    353a:	ce 01       	movw	r24, r28
    353c:	b8 01       	movw	r22, r16
    353e:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <ungetc>
    3542:	ce 01       	movw	r24, r28
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	1f 91       	pop	r17
    354a:	0f 91       	pop	r16
    354c:	08 95       	ret

0000354e <conv_int>:
    354e:	af 92       	push	r10
    3550:	bf 92       	push	r11
    3552:	cf 92       	push	r12
    3554:	df 92       	push	r13
    3556:	ef 92       	push	r14
    3558:	ff 92       	push	r15
    355a:	0f 93       	push	r16
    355c:	1f 93       	push	r17
    355e:	cf 93       	push	r28
    3560:	df 93       	push	r29
    3562:	ec 01       	movw	r28, r24
    3564:	c6 2e       	mov	r12, r22
    3566:	5a 01       	movw	r10, r20
    3568:	12 2f       	mov	r17, r18
    356a:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    356e:	ac 01       	movw	r20, r24
    3570:	8b 32       	cpi	r24, 0x2B	; 43
    3572:	19 f0       	breq	.+6      	; 0x357a <conv_int+0x2c>
    3574:	8d 32       	cpi	r24, 0x2D	; 45
    3576:	51 f4       	brne	.+20     	; 0x358c <conv_int+0x3e>
    3578:	10 68       	ori	r17, 0x80	; 128
    357a:	ca 94       	dec	r12
    357c:	09 f4       	brne	.+2      	; 0x3580 <conv_int+0x32>
    357e:	6d c0       	rjmp	.+218    	; 0x365a <conv_int+0x10c>
    3580:	ce 01       	movw	r24, r28
    3582:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    3586:	ac 01       	movw	r20, r24
    3588:	97 fd       	sbrc	r25, 7
    358a:	67 c0       	rjmp	.+206    	; 0x365a <conv_int+0x10c>
    358c:	6d ef       	ldi	r22, 0xFD	; 253
    358e:	d6 2e       	mov	r13, r22
    3590:	d1 22       	and	r13, r17
    3592:	8d 2d       	mov	r24, r13
    3594:	80 73       	andi	r24, 0x30	; 48
    3596:	01 f5       	brne	.+64     	; 0x35d8 <conv_int+0x8a>
    3598:	40 33       	cpi	r20, 0x30	; 48
    359a:	f1 f4       	brne	.+60     	; 0x35d8 <conv_int+0x8a>
    359c:	ca 94       	dec	r12
    359e:	09 f4       	brne	.+2      	; 0x35a2 <conv_int+0x54>
    35a0:	47 c0       	rjmp	.+142    	; 0x3630 <conv_int+0xe2>
    35a2:	ce 01       	movw	r24, r28
    35a4:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    35a8:	ac 01       	movw	r20, r24
    35aa:	97 fd       	sbrc	r25, 7
    35ac:	41 c0       	rjmp	.+130    	; 0x3630 <conv_int+0xe2>
    35ae:	82 e0       	ldi	r24, 0x02	; 2
    35b0:	d8 2a       	or	r13, r24
    35b2:	48 37       	cpi	r20, 0x78	; 120
    35b4:	11 f0       	breq	.+4      	; 0x35ba <conv_int+0x6c>
    35b6:	48 35       	cpi	r20, 0x58	; 88
    35b8:	59 f4       	brne	.+22     	; 0x35d0 <conv_int+0x82>
    35ba:	80 e4       	ldi	r24, 0x40	; 64
    35bc:	d8 2a       	or	r13, r24
    35be:	ca 94       	dec	r12
    35c0:	b9 f1       	breq	.+110    	; 0x3630 <conv_int+0xe2>
    35c2:	ce 01       	movw	r24, r28
    35c4:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    35c8:	ac 01       	movw	r20, r24
    35ca:	99 23       	and	r25, r25
    35cc:	2c f4       	brge	.+10     	; 0x35d8 <conv_int+0x8a>
    35ce:	30 c0       	rjmp	.+96     	; 0x3630 <conv_int+0xe2>
    35d0:	d6 fc       	sbrc	r13, 6
    35d2:	02 c0       	rjmp	.+4      	; 0x35d8 <conv_int+0x8a>
    35d4:	80 e1       	ldi	r24, 0x10	; 16
    35d6:	d8 2a       	or	r13, r24
    35d8:	ee 24       	eor	r14, r14
    35da:	ff 24       	eor	r15, r15
    35dc:	87 01       	movw	r16, r14
    35de:	24 2f       	mov	r18, r20
    35e0:	20 53       	subi	r18, 0x30	; 48
    35e2:	28 30       	cpi	r18, 0x08	; 8
    35e4:	88 f0       	brcs	.+34     	; 0x3608 <conv_int+0xba>
    35e6:	d4 fc       	sbrc	r13, 4
    35e8:	09 c0       	rjmp	.+18     	; 0x35fc <conv_int+0xae>
    35ea:	2a 30       	cpi	r18, 0x0A	; 10
    35ec:	68 f0       	brcs	.+26     	; 0x3608 <conv_int+0xba>
    35ee:	d6 fe       	sbrs	r13, 6
    35f0:	05 c0       	rjmp	.+10     	; 0x35fc <conv_int+0xae>
    35f2:	2f 7d       	andi	r18, 0xDF	; 223
    35f4:	82 2f       	mov	r24, r18
    35f6:	81 51       	subi	r24, 0x11	; 17
    35f8:	86 30       	cpi	r24, 0x06	; 6
    35fa:	28 f0       	brcs	.+10     	; 0x3606 <conv_int+0xb8>
    35fc:	ca 01       	movw	r24, r20
    35fe:	be 01       	movw	r22, r28
    3600:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <ungetc>
    3604:	12 c0       	rjmp	.+36     	; 0x362a <conv_int+0xdc>
    3606:	27 50       	subi	r18, 0x07	; 7
    3608:	c8 01       	movw	r24, r16
    360a:	b7 01       	movw	r22, r14
    360c:	4d 2d       	mov	r20, r13
    360e:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <mulacc>
    3612:	7b 01       	movw	r14, r22
    3614:	8c 01       	movw	r16, r24
    3616:	82 e0       	ldi	r24, 0x02	; 2
    3618:	d8 2a       	or	r13, r24
    361a:	ca 94       	dec	r12
    361c:	61 f0       	breq	.+24     	; 0x3636 <conv_int+0xe8>
    361e:	ce 01       	movw	r24, r28
    3620:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    3624:	ac 01       	movw	r20, r24
    3626:	97 ff       	sbrs	r25, 7
    3628:	da cf       	rjmp	.-76     	; 0x35de <conv_int+0x90>
    362a:	d1 fc       	sbrc	r13, 1
    362c:	04 c0       	rjmp	.+8      	; 0x3636 <conv_int+0xe8>
    362e:	15 c0       	rjmp	.+42     	; 0x365a <conv_int+0x10c>
    3630:	ee 24       	eor	r14, r14
    3632:	ff 24       	eor	r15, r15
    3634:	87 01       	movw	r16, r14
    3636:	d7 fe       	sbrs	r13, 7
    3638:	08 c0       	rjmp	.+16     	; 0x364a <conv_int+0xfc>
    363a:	10 95       	com	r17
    363c:	00 95       	com	r16
    363e:	f0 94       	com	r15
    3640:	e0 94       	com	r14
    3642:	e1 1c       	adc	r14, r1
    3644:	f1 1c       	adc	r15, r1
    3646:	01 1d       	adc	r16, r1
    3648:	11 1d       	adc	r17, r1
    364a:	c5 01       	movw	r24, r10
    364c:	b8 01       	movw	r22, r16
    364e:	a7 01       	movw	r20, r14
    3650:	2d 2d       	mov	r18, r13
    3652:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <putval>
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	01 c0       	rjmp	.+2      	; 0x365c <conv_int+0x10e>
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	df 91       	pop	r29
    365e:	cf 91       	pop	r28
    3660:	1f 91       	pop	r17
    3662:	0f 91       	pop	r16
    3664:	ff 90       	pop	r15
    3666:	ef 90       	pop	r14
    3668:	df 90       	pop	r13
    366a:	cf 90       	pop	r12
    366c:	bf 90       	pop	r11
    366e:	af 90       	pop	r10
    3670:	08 95       	ret

00003672 <conv_brk>:
    3672:	6f 92       	push	r6
    3674:	7f 92       	push	r7
    3676:	8f 92       	push	r8
    3678:	9f 92       	push	r9
    367a:	af 92       	push	r10
    367c:	bf 92       	push	r11
    367e:	cf 92       	push	r12
    3680:	df 92       	push	r13
    3682:	ef 92       	push	r14
    3684:	ff 92       	push	r15
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	df 93       	push	r29
    368c:	cf 93       	push	r28
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
    3692:	a0 97       	sbiw	r28, 0x20	; 32
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	6c 01       	movw	r12, r24
    36a0:	a6 2e       	mov	r10, r22
    36a2:	8a 01       	movw	r16, r20
    36a4:	79 01       	movw	r14, r18
    36a6:	fe 01       	movw	r30, r28
    36a8:	31 96       	adiw	r30, 0x01	; 1
    36aa:	80 e2       	ldi	r24, 0x20	; 32
    36ac:	df 01       	movw	r26, r30
    36ae:	1d 92       	st	X+, r1
    36b0:	8a 95       	dec	r24
    36b2:	e9 f7       	brne	.-6      	; 0x36ae <conv_brk+0x3c>
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	60 e0       	ldi	r22, 0x00	; 0
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	4f 01       	movw	r8, r30
    36c0:	a1 e0       	ldi	r26, 0x01	; 1
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	f6 01       	movw	r30, r12
    36c6:	83 81       	ldd	r24, Z+3	; 0x03
    36c8:	f7 01       	movw	r30, r14
    36ca:	83 fd       	sbrc	r24, 3
    36cc:	25 91       	lpm	r18, Z+
    36ce:	83 ff       	sbrs	r24, 3
    36d0:	21 91       	ld	r18, Z+
    36d2:	7f 01       	movw	r14, r30
    36d4:	22 23       	and	r18, r18
    36d6:	09 f4       	brne	.+2      	; 0x36da <conv_brk+0x68>
    36d8:	7e c0       	rjmp	.+252    	; 0x37d6 <conv_brk+0x164>
    36da:	2e 35       	cpi	r18, 0x5E	; 94
    36dc:	19 f4       	brne	.+6      	; 0x36e4 <conv_brk+0x72>
    36de:	41 15       	cp	r20, r1
    36e0:	51 05       	cpc	r21, r1
    36e2:	69 f1       	breq	.+90     	; 0x373e <conv_brk+0xcc>
    36e4:	87 2f       	mov	r24, r23
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	84 17       	cp	r24, r20
    36ea:	95 07       	cpc	r25, r21
    36ec:	44 f4       	brge	.+16     	; 0x36fe <conv_brk+0x8c>
    36ee:	2d 35       	cpi	r18, 0x5D	; 93
    36f0:	51 f1       	breq	.+84     	; 0x3746 <conv_brk+0xd4>
    36f2:	2d 32       	cpi	r18, 0x2D	; 45
    36f4:	21 f4       	brne	.+8      	; 0x36fe <conv_brk+0x8c>
    36f6:	33 23       	and	r19, r19
    36f8:	29 f4       	brne	.+10     	; 0x3704 <conv_brk+0x92>
    36fa:	31 e0       	ldi	r19, 0x01	; 1
    36fc:	21 c0       	rjmp	.+66     	; 0x3740 <conv_brk+0xce>
    36fe:	33 23       	and	r19, r19
    3700:	09 f4       	brne	.+2      	; 0x3704 <conv_brk+0x92>
    3702:	62 2f       	mov	r22, r18
    3704:	32 2f       	mov	r19, r18
    3706:	83 2f       	mov	r24, r19
    3708:	86 95       	lsr	r24
    370a:	86 95       	lsr	r24
    370c:	86 95       	lsr	r24
    370e:	f4 01       	movw	r30, r8
    3710:	e8 0f       	add	r30, r24
    3712:	f1 1d       	adc	r31, r1
    3714:	83 2f       	mov	r24, r19
    3716:	87 70       	andi	r24, 0x07	; 7
    3718:	3d 01       	movw	r6, r26
    371a:	02 c0       	rjmp	.+4      	; 0x3720 <conv_brk+0xae>
    371c:	66 0c       	add	r6, r6
    371e:	77 1c       	adc	r7, r7
    3720:	8a 95       	dec	r24
    3722:	e2 f7       	brpl	.-8      	; 0x371c <conv_brk+0xaa>
    3724:	20 81       	ld	r18, Z
    3726:	26 29       	or	r18, r6
    3728:	20 83       	st	Z, r18
    372a:	36 17       	cp	r19, r22
    372c:	11 f4       	brne	.+4      	; 0x3732 <conv_brk+0xc0>
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	07 c0       	rjmp	.+14     	; 0x3740 <conv_brk+0xce>
    3732:	36 17       	cp	r19, r22
    3734:	10 f4       	brcc	.+4      	; 0x373a <conv_brk+0xc8>
    3736:	3f 5f       	subi	r19, 0xFF	; 255
    3738:	e6 cf       	rjmp	.-52     	; 0x3706 <conv_brk+0x94>
    373a:	31 50       	subi	r19, 0x01	; 1
    373c:	e4 cf       	rjmp	.-56     	; 0x3706 <conv_brk+0x94>
    373e:	71 e0       	ldi	r23, 0x01	; 1
    3740:	4f 5f       	subi	r20, 0xFF	; 255
    3742:	5f 4f       	sbci	r21, 0xFF	; 255
    3744:	bf cf       	rjmp	.-130    	; 0x36c4 <conv_brk+0x52>
    3746:	33 23       	and	r19, r19
    3748:	19 f0       	breq	.+6      	; 0x3750 <conv_brk+0xde>
    374a:	8e 81       	ldd	r24, Y+6	; 0x06
    374c:	80 62       	ori	r24, 0x20	; 32
    374e:	8e 83       	std	Y+6, r24	; 0x06
    3750:	77 23       	and	r23, r23
    3752:	59 f0       	breq	.+22     	; 0x376a <conv_brk+0xf8>
    3754:	fe 01       	movw	r30, r28
    3756:	31 96       	adiw	r30, 0x01	; 1
    3758:	9e 01       	movw	r18, r28
    375a:	2f 5d       	subi	r18, 0xDF	; 223
    375c:	3f 4f       	sbci	r19, 0xFF	; 255
    375e:	80 81       	ld	r24, Z
    3760:	80 95       	com	r24
    3762:	81 93       	st	Z+, r24
    3764:	e2 17       	cp	r30, r18
    3766:	f3 07       	cpc	r31, r19
    3768:	d1 f7       	brne	.-12     	; 0x375e <conv_brk+0xec>
    376a:	bb 24       	eor	r11, r11
    376c:	b3 94       	inc	r11
    376e:	4e 01       	movw	r8, r28
    3770:	08 94       	sec
    3772:	81 1c       	adc	r8, r1
    3774:	91 1c       	adc	r9, r1
    3776:	c6 01       	movw	r24, r12
    3778:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    377c:	ac 01       	movw	r20, r24
    377e:	97 fd       	sbrc	r25, 7
    3780:	22 c0       	rjmp	.+68     	; 0x37c6 <conv_brk+0x154>
    3782:	86 95       	lsr	r24
    3784:	86 95       	lsr	r24
    3786:	86 95       	lsr	r24
    3788:	f4 01       	movw	r30, r8
    378a:	e8 0f       	add	r30, r24
    378c:	f1 1d       	adc	r31, r1
    378e:	80 81       	ld	r24, Z
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	9a 01       	movw	r18, r20
    3794:	27 70       	andi	r18, 0x07	; 7
    3796:	30 70       	andi	r19, 0x00	; 0
    3798:	02 c0       	rjmp	.+4      	; 0x379e <conv_brk+0x12c>
    379a:	95 95       	asr	r25
    379c:	87 95       	ror	r24
    379e:	2a 95       	dec	r18
    37a0:	e2 f7       	brpl	.-8      	; 0x379a <conv_brk+0x128>
    37a2:	80 fd       	sbrc	r24, 0
    37a4:	05 c0       	rjmp	.+10     	; 0x37b0 <conv_brk+0x13e>
    37a6:	ca 01       	movw	r24, r20
    37a8:	b6 01       	movw	r22, r12
    37aa:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <ungetc>
    37ae:	0b c0       	rjmp	.+22     	; 0x37c6 <conv_brk+0x154>
    37b0:	01 15       	cp	r16, r1
    37b2:	11 05       	cpc	r17, r1
    37b4:	19 f0       	breq	.+6      	; 0x37bc <conv_brk+0x14a>
    37b6:	d8 01       	movw	r26, r16
    37b8:	4d 93       	st	X+, r20
    37ba:	8d 01       	movw	r16, r26
    37bc:	aa 94       	dec	r10
    37be:	bb 24       	eor	r11, r11
    37c0:	aa 20       	and	r10, r10
    37c2:	c9 f6       	brne	.-78     	; 0x3776 <conv_brk+0x104>
    37c4:	02 c0       	rjmp	.+4      	; 0x37ca <conv_brk+0x158>
    37c6:	bb 20       	and	r11, r11
    37c8:	31 f4       	brne	.+12     	; 0x37d6 <conv_brk+0x164>
    37ca:	01 15       	cp	r16, r1
    37cc:	11 05       	cpc	r17, r1
    37ce:	29 f0       	breq	.+10     	; 0x37da <conv_brk+0x168>
    37d0:	f8 01       	movw	r30, r16
    37d2:	10 82       	st	Z, r1
    37d4:	02 c0       	rjmp	.+4      	; 0x37da <conv_brk+0x168>
    37d6:	ee 24       	eor	r14, r14
    37d8:	ff 24       	eor	r15, r15
    37da:	c7 01       	movw	r24, r14
    37dc:	a0 96       	adiw	r28, 0x20	; 32
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	f8 94       	cli
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	cd bf       	out	0x3d, r28	; 61
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	ff 90       	pop	r15
    37f2:	ef 90       	pop	r14
    37f4:	df 90       	pop	r13
    37f6:	cf 90       	pop	r12
    37f8:	bf 90       	pop	r11
    37fa:	af 90       	pop	r10
    37fc:	9f 90       	pop	r9
    37fe:	8f 90       	pop	r8
    3800:	7f 90       	pop	r7
    3802:	6f 90       	pop	r6
    3804:	08 95       	ret

00003806 <vfscanf>:
    3806:	6f 92       	push	r6
    3808:	7f 92       	push	r7
    380a:	8f 92       	push	r8
    380c:	9f 92       	push	r9
    380e:	af 92       	push	r10
    3810:	bf 92       	push	r11
    3812:	cf 92       	push	r12
    3814:	df 92       	push	r13
    3816:	ef 92       	push	r14
    3818:	ff 92       	push	r15
    381a:	0f 93       	push	r16
    381c:	1f 93       	push	r17
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	5c 01       	movw	r10, r24
    3824:	6b 01       	movw	r12, r22
    3826:	3a 01       	movw	r6, r20
    3828:	fc 01       	movw	r30, r24
    382a:	17 82       	std	Z+7, r1	; 0x07
    382c:	16 82       	std	Z+6, r1	; 0x06
    382e:	88 24       	eor	r8, r8
    3830:	ea c0       	rjmp	.+468    	; 0x3a06 <vfscanf+0x200>
    3832:	81 2f       	mov	r24, r17
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <isspace>
    383a:	89 2b       	or	r24, r25
    383c:	21 f0       	breq	.+8      	; 0x3846 <vfscanf+0x40>
    383e:	c5 01       	movw	r24, r10
    3840:	0e 94 8e 1a 	call	0x351c	; 0x351c <skip_spaces>
    3844:	e0 c0       	rjmp	.+448    	; 0x3a06 <vfscanf+0x200>
    3846:	15 32       	cpi	r17, 0x25	; 37
    3848:	49 f4       	brne	.+18     	; 0x385c <vfscanf+0x56>
    384a:	f6 01       	movw	r30, r12
    384c:	f3 fc       	sbrc	r15, 3
    384e:	65 91       	lpm	r22, Z+
    3850:	f3 fe       	sbrs	r15, 3
    3852:	61 91       	ld	r22, Z+
    3854:	6f 01       	movw	r12, r30
    3856:	65 32       	cpi	r22, 0x25	; 37
    3858:	69 f4       	brne	.+26     	; 0x3874 <vfscanf+0x6e>
    385a:	15 e2       	ldi	r17, 0x25	; 37
    385c:	c5 01       	movw	r24, r10
    385e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    3862:	97 fd       	sbrc	r25, 7
    3864:	dc c0       	rjmp	.+440    	; 0x3a1e <vfscanf+0x218>
    3866:	18 17       	cp	r17, r24
    3868:	09 f4       	brne	.+2      	; 0x386c <vfscanf+0x66>
    386a:	cd c0       	rjmp	.+410    	; 0x3a06 <vfscanf+0x200>
    386c:	b5 01       	movw	r22, r10
    386e:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <ungetc>
    3872:	da c0       	rjmp	.+436    	; 0x3a28 <vfscanf+0x222>
    3874:	6a 32       	cpi	r22, 0x2A	; 42
    3876:	19 f0       	breq	.+6      	; 0x387e <vfscanf+0x78>
    3878:	16 2f       	mov	r17, r22
    387a:	00 e0       	ldi	r16, 0x00	; 0
    387c:	06 c0       	rjmp	.+12     	; 0x388a <vfscanf+0x84>
    387e:	f3 fc       	sbrc	r15, 3
    3880:	15 91       	lpm	r17, Z+
    3882:	f3 fe       	sbrs	r15, 3
    3884:	11 91       	ld	r17, Z+
    3886:	6f 01       	movw	r12, r30
    3888:	01 e0       	ldi	r16, 0x01	; 1
    388a:	99 24       	eor	r9, r9
    388c:	0f c0       	rjmp	.+30     	; 0x38ac <vfscanf+0xa6>
    388e:	02 60       	ori	r16, 0x02	; 2
    3890:	69 2d       	mov	r22, r9
    3892:	70 e0       	ldi	r23, 0x00	; 0
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	40 e2       	ldi	r20, 0x20	; 32
    389a:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <mulacc>
    389e:	96 2e       	mov	r9, r22
    38a0:	f6 01       	movw	r30, r12
    38a2:	f3 fc       	sbrc	r15, 3
    38a4:	15 91       	lpm	r17, Z+
    38a6:	f3 fe       	sbrs	r15, 3
    38a8:	11 91       	ld	r17, Z+
    38aa:	6f 01       	movw	r12, r30
    38ac:	21 2f       	mov	r18, r17
    38ae:	20 53       	subi	r18, 0x30	; 48
    38b0:	2a 30       	cpi	r18, 0x0A	; 10
    38b2:	68 f3       	brcs	.-38     	; 0x388e <vfscanf+0x88>
    38b4:	01 fd       	sbrc	r16, 1
    38b6:	03 c0       	rjmp	.+6      	; 0x38be <vfscanf+0xb8>
    38b8:	99 24       	eor	r9, r9
    38ba:	9a 94       	dec	r9
    38bc:	03 c0       	rjmp	.+6      	; 0x38c4 <vfscanf+0xbe>
    38be:	99 20       	and	r9, r9
    38c0:	09 f4       	brne	.+2      	; 0x38c4 <vfscanf+0xbe>
    38c2:	b2 c0       	rjmp	.+356    	; 0x3a28 <vfscanf+0x222>
    38c4:	18 36       	cpi	r17, 0x68	; 104
    38c6:	21 f0       	breq	.+8      	; 0x38d0 <vfscanf+0xca>
    38c8:	1c 36       	cpi	r17, 0x6C	; 108
    38ca:	99 f4       	brne	.+38     	; 0x38f2 <vfscanf+0xec>
    38cc:	f6 01       	movw	r30, r12
    38ce:	0b c0       	rjmp	.+22     	; 0x38e6 <vfscanf+0xe0>
    38d0:	f6 01       	movw	r30, r12
    38d2:	f3 fc       	sbrc	r15, 3
    38d4:	65 91       	lpm	r22, Z+
    38d6:	f3 fe       	sbrs	r15, 3
    38d8:	61 91       	ld	r22, Z+
    38da:	68 36       	cpi	r22, 0x68	; 104
    38dc:	19 f0       	breq	.+6      	; 0x38e4 <vfscanf+0xde>
    38de:	6f 01       	movw	r12, r30
    38e0:	16 2f       	mov	r17, r22
    38e2:	07 c0       	rjmp	.+14     	; 0x38f2 <vfscanf+0xec>
    38e4:	08 60       	ori	r16, 0x08	; 8
    38e6:	04 60       	ori	r16, 0x04	; 4
    38e8:	f3 fc       	sbrc	r15, 3
    38ea:	15 91       	lpm	r17, Z+
    38ec:	f3 fe       	sbrs	r15, 3
    38ee:	11 91       	ld	r17, Z+
    38f0:	6f 01       	movw	r12, r30
    38f2:	11 23       	and	r17, r17
    38f4:	09 f4       	brne	.+2      	; 0x38f8 <vfscanf+0xf2>
    38f6:	98 c0       	rjmp	.+304    	; 0x3a28 <vfscanf+0x222>
    38f8:	8c e8       	ldi	r24, 0x8C	; 140
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	61 2f       	mov	r22, r17
    38fe:	70 e0       	ldi	r23, 0x00	; 0
    3900:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <strchr_P>
    3904:	89 2b       	or	r24, r25
    3906:	09 f4       	brne	.+2      	; 0x390a <vfscanf+0x104>
    3908:	8f c0       	rjmp	.+286    	; 0x3a28 <vfscanf+0x222>
    390a:	80 2f       	mov	r24, r16
    390c:	00 ff       	sbrs	r16, 0
    390e:	03 c0       	rjmp	.+6      	; 0x3916 <vfscanf+0x110>
    3910:	ee 24       	eor	r14, r14
    3912:	ff 24       	eor	r15, r15
    3914:	07 c0       	rjmp	.+14     	; 0x3924 <vfscanf+0x11e>
    3916:	f3 01       	movw	r30, r6
    3918:	e0 80       	ld	r14, Z
    391a:	f1 80       	ldd	r15, Z+1	; 0x01
    391c:	22 e0       	ldi	r18, 0x02	; 2
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	62 0e       	add	r6, r18
    3922:	73 1e       	adc	r7, r19
    3924:	1e 36       	cpi	r17, 0x6E	; 110
    3926:	51 f4       	brne	.+20     	; 0x393c <vfscanf+0x136>
    3928:	f5 01       	movw	r30, r10
    392a:	46 81       	ldd	r20, Z+6	; 0x06
    392c:	57 81       	ldd	r21, Z+7	; 0x07
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	70 e0       	ldi	r23, 0x00	; 0
    3932:	c7 01       	movw	r24, r14
    3934:	20 2f       	mov	r18, r16
    3936:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <putval>
    393a:	65 c0       	rjmp	.+202    	; 0x3a06 <vfscanf+0x200>
    393c:	13 36       	cpi	r17, 0x63	; 99
    393e:	91 f4       	brne	.+36     	; 0x3964 <vfscanf+0x15e>
    3940:	81 fd       	sbrc	r24, 1
    3942:	02 c0       	rjmp	.+4      	; 0x3948 <vfscanf+0x142>
    3944:	99 24       	eor	r9, r9
    3946:	93 94       	inc	r9
    3948:	c5 01       	movw	r24, r10
    394a:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    394e:	97 fd       	sbrc	r25, 7
    3950:	66 c0       	rjmp	.+204    	; 0x3a1e <vfscanf+0x218>
    3952:	e1 14       	cp	r14, r1
    3954:	f1 04       	cpc	r15, r1
    3956:	19 f0       	breq	.+6      	; 0x395e <vfscanf+0x158>
    3958:	f7 01       	movw	r30, r14
    395a:	81 93       	st	Z+, r24
    395c:	7f 01       	movw	r14, r30
    395e:	9a 94       	dec	r9
    3960:	99 f7       	brne	.-26     	; 0x3948 <vfscanf+0x142>
    3962:	4f c0       	rjmp	.+158    	; 0x3a02 <vfscanf+0x1fc>
    3964:	1b 35       	cpi	r17, 0x5B	; 91
    3966:	59 f4       	brne	.+22     	; 0x397e <vfscanf+0x178>
    3968:	c5 01       	movw	r24, r10
    396a:	69 2d       	mov	r22, r9
    396c:	a7 01       	movw	r20, r14
    396e:	96 01       	movw	r18, r12
    3970:	0e 94 39 1b 	call	0x3672	; 0x3672 <conv_brk>
    3974:	6c 01       	movw	r12, r24
    3976:	00 97       	sbiw	r24, 0x00	; 0
    3978:	09 f0       	breq	.+2      	; 0x397c <vfscanf+0x176>
    397a:	43 c0       	rjmp	.+134    	; 0x3a02 <vfscanf+0x1fc>
    397c:	3d c0       	rjmp	.+122    	; 0x39f8 <vfscanf+0x1f2>
    397e:	c5 01       	movw	r24, r10
    3980:	0e 94 8e 1a 	call	0x351c	; 0x351c <skip_spaces>
    3984:	97 fd       	sbrc	r25, 7
    3986:	4b c0       	rjmp	.+150    	; 0x3a1e <vfscanf+0x218>
    3988:	1f 36       	cpi	r17, 0x6F	; 111
    398a:	59 f1       	breq	.+86     	; 0x39e2 <vfscanf+0x1dc>
    398c:	10 37       	cpi	r17, 0x70	; 112
    398e:	28 f4       	brcc	.+10     	; 0x399a <vfscanf+0x194>
    3990:	14 36       	cpi	r17, 0x64	; 100
    3992:	29 f1       	breq	.+74     	; 0x39de <vfscanf+0x1d8>
    3994:	19 36       	cpi	r17, 0x69	; 105
    3996:	39 f5       	brne	.+78     	; 0x39e6 <vfscanf+0x1e0>
    3998:	27 c0       	rjmp	.+78     	; 0x39e8 <vfscanf+0x1e2>
    399a:	13 37       	cpi	r17, 0x73	; 115
    399c:	19 f0       	breq	.+6      	; 0x39a4 <vfscanf+0x19e>
    399e:	15 37       	cpi	r17, 0x75	; 117
    39a0:	11 f5       	brne	.+68     	; 0x39e6 <vfscanf+0x1e0>
    39a2:	1d c0       	rjmp	.+58     	; 0x39de <vfscanf+0x1d8>
    39a4:	c5 01       	movw	r24, r10
    39a6:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    39aa:	ec 01       	movw	r28, r24
    39ac:	97 fd       	sbrc	r25, 7
    39ae:	11 c0       	rjmp	.+34     	; 0x39d2 <vfscanf+0x1cc>
    39b0:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <isspace>
    39b4:	89 2b       	or	r24, r25
    39b6:	29 f0       	breq	.+10     	; 0x39c2 <vfscanf+0x1bc>
    39b8:	ce 01       	movw	r24, r28
    39ba:	b5 01       	movw	r22, r10
    39bc:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <ungetc>
    39c0:	08 c0       	rjmp	.+16     	; 0x39d2 <vfscanf+0x1cc>
    39c2:	e1 14       	cp	r14, r1
    39c4:	f1 04       	cpc	r15, r1
    39c6:	19 f0       	breq	.+6      	; 0x39ce <vfscanf+0x1c8>
    39c8:	f7 01       	movw	r30, r14
    39ca:	c1 93       	st	Z+, r28
    39cc:	7f 01       	movw	r14, r30
    39ce:	9a 94       	dec	r9
    39d0:	49 f7       	brne	.-46     	; 0x39a4 <vfscanf+0x19e>
    39d2:	e1 14       	cp	r14, r1
    39d4:	f1 04       	cpc	r15, r1
    39d6:	a9 f0       	breq	.+42     	; 0x3a02 <vfscanf+0x1fc>
    39d8:	f7 01       	movw	r30, r14
    39da:	10 82       	st	Z, r1
    39dc:	12 c0       	rjmp	.+36     	; 0x3a02 <vfscanf+0x1fc>
    39de:	00 62       	ori	r16, 0x20	; 32
    39e0:	03 c0       	rjmp	.+6      	; 0x39e8 <vfscanf+0x1e2>
    39e2:	00 61       	ori	r16, 0x10	; 16
    39e4:	01 c0       	rjmp	.+2      	; 0x39e8 <vfscanf+0x1e2>
    39e6:	00 64       	ori	r16, 0x40	; 64
    39e8:	c5 01       	movw	r24, r10
    39ea:	69 2d       	mov	r22, r9
    39ec:	a7 01       	movw	r20, r14
    39ee:	20 2f       	mov	r18, r16
    39f0:	0e 94 a7 1a 	call	0x354e	; 0x354e <conv_int>
    39f4:	88 23       	and	r24, r24
    39f6:	29 f4       	brne	.+10     	; 0x3a02 <vfscanf+0x1fc>
    39f8:	f5 01       	movw	r30, r10
    39fa:	83 81       	ldd	r24, Z+3	; 0x03
    39fc:	80 73       	andi	r24, 0x30	; 48
    39fe:	79 f4       	brne	.+30     	; 0x3a1e <vfscanf+0x218>
    3a00:	13 c0       	rjmp	.+38     	; 0x3a28 <vfscanf+0x222>
    3a02:	00 ff       	sbrs	r16, 0
    3a04:	83 94       	inc	r8
    3a06:	f5 01       	movw	r30, r10
    3a08:	f3 80       	ldd	r15, Z+3	; 0x03
    3a0a:	f6 01       	movw	r30, r12
    3a0c:	f3 fc       	sbrc	r15, 3
    3a0e:	15 91       	lpm	r17, Z+
    3a10:	f3 fe       	sbrs	r15, 3
    3a12:	11 91       	ld	r17, Z+
    3a14:	6f 01       	movw	r12, r30
    3a16:	11 23       	and	r17, r17
    3a18:	09 f0       	breq	.+2      	; 0x3a1c <vfscanf+0x216>
    3a1a:	0b cf       	rjmp	.-490    	; 0x3832 <vfscanf+0x2c>
    3a1c:	05 c0       	rjmp	.+10     	; 0x3a28 <vfscanf+0x222>
    3a1e:	88 20       	and	r8, r8
    3a20:	19 f4       	brne	.+6      	; 0x3a28 <vfscanf+0x222>
    3a22:	2f ef       	ldi	r18, 0xFF	; 255
    3a24:	3f ef       	ldi	r19, 0xFF	; 255
    3a26:	02 c0       	rjmp	.+4      	; 0x3a2c <vfscanf+0x226>
    3a28:	28 2d       	mov	r18, r8
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	c9 01       	movw	r24, r18
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	1f 91       	pop	r17
    3a34:	0f 91       	pop	r16
    3a36:	ff 90       	pop	r15
    3a38:	ef 90       	pop	r14
    3a3a:	df 90       	pop	r13
    3a3c:	cf 90       	pop	r12
    3a3e:	bf 90       	pop	r11
    3a40:	af 90       	pop	r10
    3a42:	9f 90       	pop	r9
    3a44:	8f 90       	pop	r8
    3a46:	7f 90       	pop	r7
    3a48:	6f 90       	pop	r6
    3a4a:	08 95       	ret

00003a4c <isspace>:
    3a4c:	91 11       	cpse	r25, r1
    3a4e:	0d c1       	rjmp	.+538    	; 0x3c6a <__ctype_isfalse>
    3a50:	80 32       	cpi	r24, 0x20	; 32
    3a52:	19 f0       	breq	.+6      	; 0x3a5a <isspace+0xe>
    3a54:	89 50       	subi	r24, 0x09	; 9
    3a56:	85 50       	subi	r24, 0x05	; 5
    3a58:	d0 f7       	brcc	.-12     	; 0x3a4e <isspace+0x2>
    3a5a:	08 95       	ret

00003a5c <strchr_P>:
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	05 90       	lpm	r0, Z+
    3a60:	06 16       	cp	r0, r22
    3a62:	21 f0       	breq	.+8      	; 0x3a6c <strchr_P+0x10>
    3a64:	00 20       	and	r0, r0
    3a66:	d9 f7       	brne	.-10     	; 0x3a5e <strchr_P+0x2>
    3a68:	c0 01       	movw	r24, r0
    3a6a:	08 95       	ret
    3a6c:	31 97       	sbiw	r30, 0x01	; 1
    3a6e:	cf 01       	movw	r24, r30
    3a70:	08 95       	ret

00003a72 <strnlen_P>:
    3a72:	fc 01       	movw	r30, r24
    3a74:	05 90       	lpm	r0, Z+
    3a76:	61 50       	subi	r22, 0x01	; 1
    3a78:	70 40       	sbci	r23, 0x00	; 0
    3a7a:	01 10       	cpse	r0, r1
    3a7c:	d8 f7       	brcc	.-10     	; 0x3a74 <strnlen_P+0x2>
    3a7e:	80 95       	com	r24
    3a80:	90 95       	com	r25
    3a82:	8e 0f       	add	r24, r30
    3a84:	9f 1f       	adc	r25, r31
    3a86:	08 95       	ret

00003a88 <strnlen>:
    3a88:	fc 01       	movw	r30, r24
    3a8a:	61 50       	subi	r22, 0x01	; 1
    3a8c:	70 40       	sbci	r23, 0x00	; 0
    3a8e:	01 90       	ld	r0, Z+
    3a90:	01 10       	cpse	r0, r1
    3a92:	d8 f7       	brcc	.-10     	; 0x3a8a <strnlen+0x2>
    3a94:	80 95       	com	r24
    3a96:	90 95       	com	r25
    3a98:	8e 0f       	add	r24, r30
    3a9a:	9f 1f       	adc	r25, r31
    3a9c:	08 95       	ret

00003a9e <fgetc>:
    3a9e:	cf 93       	push	r28
    3aa0:	df 93       	push	r29
    3aa2:	ec 01       	movw	r28, r24
    3aa4:	4b 81       	ldd	r20, Y+3	; 0x03
    3aa6:	40 ff       	sbrs	r20, 0
    3aa8:	1a c0       	rjmp	.+52     	; 0x3ade <fgetc+0x40>
    3aaa:	46 ff       	sbrs	r20, 6
    3aac:	0a c0       	rjmp	.+20     	; 0x3ac2 <fgetc+0x24>
    3aae:	4f 7b       	andi	r20, 0xBF	; 191
    3ab0:	4b 83       	std	Y+3, r20	; 0x03
    3ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ab6:	01 96       	adiw	r24, 0x01	; 1
    3ab8:	9f 83       	std	Y+7, r25	; 0x07
    3aba:	8e 83       	std	Y+6, r24	; 0x06
    3abc:	8a 81       	ldd	r24, Y+2	; 0x02
    3abe:	28 2f       	mov	r18, r24
    3ac0:	2b c0       	rjmp	.+86     	; 0x3b18 <fgetc+0x7a>
    3ac2:	42 ff       	sbrs	r20, 2
    3ac4:	13 c0       	rjmp	.+38     	; 0x3aec <fgetc+0x4e>
    3ac6:	e8 81       	ld	r30, Y
    3ac8:	f9 81       	ldd	r31, Y+1	; 0x01
    3aca:	80 81       	ld	r24, Z
    3acc:	28 2f       	mov	r18, r24
    3ace:	33 27       	eor	r19, r19
    3ad0:	27 fd       	sbrc	r18, 7
    3ad2:	30 95       	com	r19
    3ad4:	21 15       	cp	r18, r1
    3ad6:	31 05       	cpc	r19, r1
    3ad8:	29 f4       	brne	.+10     	; 0x3ae4 <fgetc+0x46>
    3ada:	40 62       	ori	r20, 0x20	; 32
    3adc:	4b 83       	std	Y+3, r20	; 0x03
    3ade:	2f ef       	ldi	r18, 0xFF	; 255
    3ae0:	3f ef       	ldi	r19, 0xFF	; 255
    3ae2:	1b c0       	rjmp	.+54     	; 0x3b1a <fgetc+0x7c>
    3ae4:	31 96       	adiw	r30, 0x01	; 1
    3ae6:	f9 83       	std	Y+1, r31	; 0x01
    3ae8:	e8 83       	st	Y, r30
    3aea:	11 c0       	rjmp	.+34     	; 0x3b0e <fgetc+0x70>
    3aec:	ea 85       	ldd	r30, Y+10	; 0x0a
    3aee:	fb 85       	ldd	r31, Y+11	; 0x0b
    3af0:	ce 01       	movw	r24, r28
    3af2:	09 95       	icall
    3af4:	9c 01       	movw	r18, r24
    3af6:	97 ff       	sbrs	r25, 7
    3af8:	0a c0       	rjmp	.+20     	; 0x3b0e <fgetc+0x70>
    3afa:	9b 81       	ldd	r25, Y+3	; 0x03
    3afc:	2f 5f       	subi	r18, 0xFF	; 255
    3afe:	3f 4f       	sbci	r19, 0xFF	; 255
    3b00:	11 f0       	breq	.+4      	; 0x3b06 <fgetc+0x68>
    3b02:	80 e2       	ldi	r24, 0x20	; 32
    3b04:	01 c0       	rjmp	.+2      	; 0x3b08 <fgetc+0x6a>
    3b06:	80 e1       	ldi	r24, 0x10	; 16
    3b08:	89 2b       	or	r24, r25
    3b0a:	8b 83       	std	Y+3, r24	; 0x03
    3b0c:	e8 cf       	rjmp	.-48     	; 0x3ade <fgetc+0x40>
    3b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b10:	9f 81       	ldd	r25, Y+7	; 0x07
    3b12:	01 96       	adiw	r24, 0x01	; 1
    3b14:	9f 83       	std	Y+7, r25	; 0x07
    3b16:	8e 83       	std	Y+6, r24	; 0x06
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	c9 01       	movw	r24, r18
    3b1c:	df 91       	pop	r29
    3b1e:	cf 91       	pop	r28
    3b20:	08 95       	ret

00003b22 <fputc>:
    3b22:	0f 93       	push	r16
    3b24:	1f 93       	push	r17
    3b26:	cf 93       	push	r28
    3b28:	df 93       	push	r29
    3b2a:	8c 01       	movw	r16, r24
    3b2c:	eb 01       	movw	r28, r22
    3b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b30:	81 ff       	sbrs	r24, 1
    3b32:	1b c0       	rjmp	.+54     	; 0x3b6a <fputc+0x48>
    3b34:	82 ff       	sbrs	r24, 2
    3b36:	0d c0       	rjmp	.+26     	; 0x3b52 <fputc+0x30>
    3b38:	2e 81       	ldd	r18, Y+6	; 0x06
    3b3a:	3f 81       	ldd	r19, Y+7	; 0x07
    3b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b3e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b40:	28 17       	cp	r18, r24
    3b42:	39 07       	cpc	r19, r25
    3b44:	64 f4       	brge	.+24     	; 0x3b5e <fputc+0x3c>
    3b46:	e8 81       	ld	r30, Y
    3b48:	f9 81       	ldd	r31, Y+1	; 0x01
    3b4a:	01 93       	st	Z+, r16
    3b4c:	f9 83       	std	Y+1, r31	; 0x01
    3b4e:	e8 83       	st	Y, r30
    3b50:	06 c0       	rjmp	.+12     	; 0x3b5e <fputc+0x3c>
    3b52:	e8 85       	ldd	r30, Y+8	; 0x08
    3b54:	f9 85       	ldd	r31, Y+9	; 0x09
    3b56:	80 2f       	mov	r24, r16
    3b58:	09 95       	icall
    3b5a:	89 2b       	or	r24, r25
    3b5c:	31 f4       	brne	.+12     	; 0x3b6a <fputc+0x48>
    3b5e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b60:	9f 81       	ldd	r25, Y+7	; 0x07
    3b62:	01 96       	adiw	r24, 0x01	; 1
    3b64:	9f 83       	std	Y+7, r25	; 0x07
    3b66:	8e 83       	std	Y+6, r24	; 0x06
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <fputc+0x4c>
    3b6a:	0f ef       	ldi	r16, 0xFF	; 255
    3b6c:	1f ef       	ldi	r17, 0xFF	; 255
    3b6e:	c8 01       	movw	r24, r16
    3b70:	df 91       	pop	r29
    3b72:	cf 91       	pop	r28
    3b74:	1f 91       	pop	r17
    3b76:	0f 91       	pop	r16
    3b78:	08 95       	ret

00003b7a <ungetc>:
    3b7a:	9c 01       	movw	r18, r24
    3b7c:	fb 01       	movw	r30, r22
    3b7e:	83 81       	ldd	r24, Z+3	; 0x03
    3b80:	80 ff       	sbrs	r24, 0
    3b82:	11 c0       	rjmp	.+34     	; 0x3ba6 <ungetc+0x2c>
    3b84:	86 fd       	sbrc	r24, 6
    3b86:	0f c0       	rjmp	.+30     	; 0x3ba6 <ungetc+0x2c>
    3b88:	9f ef       	ldi	r25, 0xFF	; 255
    3b8a:	2f 3f       	cpi	r18, 0xFF	; 255
    3b8c:	39 07       	cpc	r19, r25
    3b8e:	59 f0       	breq	.+22     	; 0x3ba6 <ungetc+0x2c>
    3b90:	22 83       	std	Z+2, r18	; 0x02
    3b92:	80 64       	ori	r24, 0x40	; 64
    3b94:	8f 7d       	andi	r24, 0xDF	; 223
    3b96:	83 83       	std	Z+3, r24	; 0x03
    3b98:	86 81       	ldd	r24, Z+6	; 0x06
    3b9a:	97 81       	ldd	r25, Z+7	; 0x07
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	97 83       	std	Z+7, r25	; 0x07
    3ba0:	86 83       	std	Z+6, r24	; 0x06
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	02 c0       	rjmp	.+4      	; 0x3baa <ungetc+0x30>
    3ba6:	2f ef       	ldi	r18, 0xFF	; 255
    3ba8:	3f ef       	ldi	r19, 0xFF	; 255
    3baa:	c9 01       	movw	r24, r18
    3bac:	08 95       	ret

00003bae <__ultoa_invert>:
    3bae:	fa 01       	movw	r30, r20
    3bb0:	aa 27       	eor	r26, r26
    3bb2:	28 30       	cpi	r18, 0x08	; 8
    3bb4:	51 f1       	breq	.+84     	; 0x3c0a <__ultoa_invert+0x5c>
    3bb6:	20 31       	cpi	r18, 0x10	; 16
    3bb8:	81 f1       	breq	.+96     	; 0x3c1a <__ultoa_invert+0x6c>
    3bba:	e8 94       	clt
    3bbc:	6f 93       	push	r22
    3bbe:	6e 7f       	andi	r22, 0xFE	; 254
    3bc0:	6e 5f       	subi	r22, 0xFE	; 254
    3bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc8:	af 4f       	sbci	r26, 0xFF	; 255
    3bca:	b1 e0       	ldi	r27, 0x01	; 1
    3bcc:	3e d0       	rcall	.+124    	; 0x3c4a <__ultoa_invert+0x9c>
    3bce:	b4 e0       	ldi	r27, 0x04	; 4
    3bd0:	3c d0       	rcall	.+120    	; 0x3c4a <__ultoa_invert+0x9c>
    3bd2:	67 0f       	add	r22, r23
    3bd4:	78 1f       	adc	r23, r24
    3bd6:	89 1f       	adc	r24, r25
    3bd8:	9a 1f       	adc	r25, r26
    3bda:	a1 1d       	adc	r26, r1
    3bdc:	68 0f       	add	r22, r24
    3bde:	79 1f       	adc	r23, r25
    3be0:	8a 1f       	adc	r24, r26
    3be2:	91 1d       	adc	r25, r1
    3be4:	a1 1d       	adc	r26, r1
    3be6:	6a 0f       	add	r22, r26
    3be8:	71 1d       	adc	r23, r1
    3bea:	81 1d       	adc	r24, r1
    3bec:	91 1d       	adc	r25, r1
    3bee:	a1 1d       	adc	r26, r1
    3bf0:	20 d0       	rcall	.+64     	; 0x3c32 <__ultoa_invert+0x84>
    3bf2:	09 f4       	brne	.+2      	; 0x3bf6 <__ultoa_invert+0x48>
    3bf4:	68 94       	set
    3bf6:	3f 91       	pop	r19
    3bf8:	2a e0       	ldi	r18, 0x0A	; 10
    3bfa:	26 9f       	mul	r18, r22
    3bfc:	11 24       	eor	r1, r1
    3bfe:	30 19       	sub	r19, r0
    3c00:	30 5d       	subi	r19, 0xD0	; 208
    3c02:	31 93       	st	Z+, r19
    3c04:	de f6       	brtc	.-74     	; 0x3bbc <__ultoa_invert+0xe>
    3c06:	cf 01       	movw	r24, r30
    3c08:	08 95       	ret
    3c0a:	46 2f       	mov	r20, r22
    3c0c:	47 70       	andi	r20, 0x07	; 7
    3c0e:	40 5d       	subi	r20, 0xD0	; 208
    3c10:	41 93       	st	Z+, r20
    3c12:	b3 e0       	ldi	r27, 0x03	; 3
    3c14:	0f d0       	rcall	.+30     	; 0x3c34 <__ultoa_invert+0x86>
    3c16:	c9 f7       	brne	.-14     	; 0x3c0a <__ultoa_invert+0x5c>
    3c18:	f6 cf       	rjmp	.-20     	; 0x3c06 <__ultoa_invert+0x58>
    3c1a:	46 2f       	mov	r20, r22
    3c1c:	4f 70       	andi	r20, 0x0F	; 15
    3c1e:	40 5d       	subi	r20, 0xD0	; 208
    3c20:	4a 33       	cpi	r20, 0x3A	; 58
    3c22:	18 f0       	brcs	.+6      	; 0x3c2a <__ultoa_invert+0x7c>
    3c24:	49 5d       	subi	r20, 0xD9	; 217
    3c26:	31 fd       	sbrc	r19, 1
    3c28:	40 52       	subi	r20, 0x20	; 32
    3c2a:	41 93       	st	Z+, r20
    3c2c:	02 d0       	rcall	.+4      	; 0x3c32 <__ultoa_invert+0x84>
    3c2e:	a9 f7       	brne	.-22     	; 0x3c1a <__ultoa_invert+0x6c>
    3c30:	ea cf       	rjmp	.-44     	; 0x3c06 <__ultoa_invert+0x58>
    3c32:	b4 e0       	ldi	r27, 0x04	; 4
    3c34:	a6 95       	lsr	r26
    3c36:	97 95       	ror	r25
    3c38:	87 95       	ror	r24
    3c3a:	77 95       	ror	r23
    3c3c:	67 95       	ror	r22
    3c3e:	ba 95       	dec	r27
    3c40:	c9 f7       	brne	.-14     	; 0x3c34 <__ultoa_invert+0x86>
    3c42:	00 97       	sbiw	r24, 0x00	; 0
    3c44:	61 05       	cpc	r22, r1
    3c46:	71 05       	cpc	r23, r1
    3c48:	08 95       	ret
    3c4a:	9b 01       	movw	r18, r22
    3c4c:	ac 01       	movw	r20, r24
    3c4e:	0a 2e       	mov	r0, r26
    3c50:	06 94       	lsr	r0
    3c52:	57 95       	ror	r21
    3c54:	47 95       	ror	r20
    3c56:	37 95       	ror	r19
    3c58:	27 95       	ror	r18
    3c5a:	ba 95       	dec	r27
    3c5c:	c9 f7       	brne	.-14     	; 0x3c50 <__ultoa_invert+0xa2>
    3c5e:	62 0f       	add	r22, r18
    3c60:	73 1f       	adc	r23, r19
    3c62:	84 1f       	adc	r24, r20
    3c64:	95 1f       	adc	r25, r21
    3c66:	a0 1d       	adc	r26, r0
    3c68:	08 95       	ret

00003c6a <__ctype_isfalse>:
    3c6a:	99 27       	eor	r25, r25
    3c6c:	88 27       	eor	r24, r24

00003c6e <__ctype_istrue>:
    3c6e:	08 95       	ret

00003c70 <_exit>:
    3c70:	f8 94       	cli

00003c72 <__stop_program>:
    3c72:	ff cf       	rjmp	.-2      	; 0x3c72 <__stop_program>
